// Code generated by Prisma (prisma@1.29.0-beta.9). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  admission: (where?: AdmissionWhereInput) => Promise<boolean>;
  callout: (where?: CalloutWhereInput) => Promise<boolean>;
  caregiver: (where?: CaregiverWhereInput) => Promise<boolean>;
  chartevent: (where?: CharteventWhereInput) => Promise<boolean>;
  chartevents_1: (where?: Chartevents_1WhereInput) => Promise<boolean>;
  chartevents_10: (where?: Chartevents_10WhereInput) => Promise<boolean>;
  chartevents_11: (where?: Chartevents_11WhereInput) => Promise<boolean>;
  chartevents_12: (where?: Chartevents_12WhereInput) => Promise<boolean>;
  chartevents_13: (where?: Chartevents_13WhereInput) => Promise<boolean>;
  chartevents_14: (where?: Chartevents_14WhereInput) => Promise<boolean>;
  chartevents_15: (where?: Chartevents_15WhereInput) => Promise<boolean>;
  chartevents_16: (where?: Chartevents_16WhereInput) => Promise<boolean>;
  chartevents_17: (where?: Chartevents_17WhereInput) => Promise<boolean>;
  chartevents_2: (where?: Chartevents_2WhereInput) => Promise<boolean>;
  chartevents_3: (where?: Chartevents_3WhereInput) => Promise<boolean>;
  chartevents_4: (where?: Chartevents_4WhereInput) => Promise<boolean>;
  chartevents_5: (where?: Chartevents_5WhereInput) => Promise<boolean>;
  chartevents_6: (where?: Chartevents_6WhereInput) => Promise<boolean>;
  chartevents_7: (where?: Chartevents_7WhereInput) => Promise<boolean>;
  chartevents_8: (where?: Chartevents_8WhereInput) => Promise<boolean>;
  chartevents_9: (where?: Chartevents_9WhereInput) => Promise<boolean>;
  cptevent: (where?: CpteventWhereInput) => Promise<boolean>;
  d_cpt: (where?: D_cptWhereInput) => Promise<boolean>;
  d_icd_diagnosis: (where?: D_icd_diagnosisWhereInput) => Promise<boolean>;
  d_icd_procedure: (where?: D_icd_procedureWhereInput) => Promise<boolean>;
  d_item: (where?: D_itemWhereInput) => Promise<boolean>;
  d_labitem: (where?: D_labitemWhereInput) => Promise<boolean>;
  datetimeevent: (where?: DatetimeeventWhereInput) => Promise<boolean>;
  diagnoses_icd: (where?: Diagnoses_icdWhereInput) => Promise<boolean>;
  drgcode: (where?: DrgcodeWhereInput) => Promise<boolean>;
  icustay: (where?: IcustayWhereInput) => Promise<boolean>;
  inputevents_cv: (where?: Inputevents_cvWhereInput) => Promise<boolean>;
  inputevents_mv: (where?: Inputevents_mvWhereInput) => Promise<boolean>;
  labevent: (where?: LabeventWhereInput) => Promise<boolean>;
  microbiologyevent: (where?: MicrobiologyeventWhereInput) => Promise<boolean>;
  noteevent: (where?: NoteeventWhereInput) => Promise<boolean>;
  outputevent: (where?: OutputeventWhereInput) => Promise<boolean>;
  patient: (where?: PatientWhereInput) => Promise<boolean>;
  prescription: (where?: PrescriptionWhereInput) => Promise<boolean>;
  procedureevents_mv: (
    where?: Procedureevents_mvWhereInput
  ) => Promise<boolean>;
  procedures_icd: (where?: Procedures_icdWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  transfer: (where?: TransferWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  admission: (where: AdmissionWhereUniqueInput) => AdmissionPromise;
  admissions: (
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Admission>;
  admissionsConnection: (
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AdmissionConnectionPromise;
  callout: (where: CalloutWhereUniqueInput) => CalloutPromise;
  callouts: (
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Callout>;
  calloutsConnection: (
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CalloutConnectionPromise;
  caregiver: (where: CaregiverWhereUniqueInput) => CaregiverPromise;
  caregivers: (
    args?: {
      where?: CaregiverWhereInput;
      orderBy?: CaregiverOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Caregiver>;
  caregiversConnection: (
    args?: {
      where?: CaregiverWhereInput;
      orderBy?: CaregiverOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CaregiverConnectionPromise;
  chartevent: (where: CharteventWhereUniqueInput) => CharteventPromise;
  chartevents: (
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevent>;
  charteventsConnection: (
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CharteventConnectionPromise;
  chartevents_1s: (
    args?: {
      where?: Chartevents_1WhereInput;
      orderBy?: Chartevents_1OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_1>;
  chartevents_1sConnection: (
    args?: {
      where?: Chartevents_1WhereInput;
      orderBy?: Chartevents_1OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_1ConnectionPromise;
  chartevents_10s: (
    args?: {
      where?: Chartevents_10WhereInput;
      orderBy?: Chartevents_10OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_10>;
  chartevents_10sConnection: (
    args?: {
      where?: Chartevents_10WhereInput;
      orderBy?: Chartevents_10OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_10ConnectionPromise;
  chartevents_11s: (
    args?: {
      where?: Chartevents_11WhereInput;
      orderBy?: Chartevents_11OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_11>;
  chartevents_11sConnection: (
    args?: {
      where?: Chartevents_11WhereInput;
      orderBy?: Chartevents_11OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_11ConnectionPromise;
  chartevents_12s: (
    args?: {
      where?: Chartevents_12WhereInput;
      orderBy?: Chartevents_12OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_12>;
  chartevents_12sConnection: (
    args?: {
      where?: Chartevents_12WhereInput;
      orderBy?: Chartevents_12OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_12ConnectionPromise;
  chartevents_13s: (
    args?: {
      where?: Chartevents_13WhereInput;
      orderBy?: Chartevents_13OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_13>;
  chartevents_13sConnection: (
    args?: {
      where?: Chartevents_13WhereInput;
      orderBy?: Chartevents_13OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_13ConnectionPromise;
  chartevents_14s: (
    args?: {
      where?: Chartevents_14WhereInput;
      orderBy?: Chartevents_14OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_14>;
  chartevents_14sConnection: (
    args?: {
      where?: Chartevents_14WhereInput;
      orderBy?: Chartevents_14OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_14ConnectionPromise;
  chartevents_15s: (
    args?: {
      where?: Chartevents_15WhereInput;
      orderBy?: Chartevents_15OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_15>;
  chartevents_15sConnection: (
    args?: {
      where?: Chartevents_15WhereInput;
      orderBy?: Chartevents_15OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_15ConnectionPromise;
  chartevents_16s: (
    args?: {
      where?: Chartevents_16WhereInput;
      orderBy?: Chartevents_16OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_16>;
  chartevents_16sConnection: (
    args?: {
      where?: Chartevents_16WhereInput;
      orderBy?: Chartevents_16OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_16ConnectionPromise;
  chartevents_17s: (
    args?: {
      where?: Chartevents_17WhereInput;
      orderBy?: Chartevents_17OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_17>;
  chartevents_17sConnection: (
    args?: {
      where?: Chartevents_17WhereInput;
      orderBy?: Chartevents_17OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_17ConnectionPromise;
  chartevents_2s: (
    args?: {
      where?: Chartevents_2WhereInput;
      orderBy?: Chartevents_2OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_2>;
  chartevents_2sConnection: (
    args?: {
      where?: Chartevents_2WhereInput;
      orderBy?: Chartevents_2OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_2ConnectionPromise;
  chartevents_3s: (
    args?: {
      where?: Chartevents_3WhereInput;
      orderBy?: Chartevents_3OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_3>;
  chartevents_3sConnection: (
    args?: {
      where?: Chartevents_3WhereInput;
      orderBy?: Chartevents_3OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_3ConnectionPromise;
  chartevents_4s: (
    args?: {
      where?: Chartevents_4WhereInput;
      orderBy?: Chartevents_4OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_4>;
  chartevents_4sConnection: (
    args?: {
      where?: Chartevents_4WhereInput;
      orderBy?: Chartevents_4OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_4ConnectionPromise;
  chartevents_5s: (
    args?: {
      where?: Chartevents_5WhereInput;
      orderBy?: Chartevents_5OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_5>;
  chartevents_5sConnection: (
    args?: {
      where?: Chartevents_5WhereInput;
      orderBy?: Chartevents_5OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_5ConnectionPromise;
  chartevents_6s: (
    args?: {
      where?: Chartevents_6WhereInput;
      orderBy?: Chartevents_6OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_6>;
  chartevents_6sConnection: (
    args?: {
      where?: Chartevents_6WhereInput;
      orderBy?: Chartevents_6OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_6ConnectionPromise;
  chartevents_7s: (
    args?: {
      where?: Chartevents_7WhereInput;
      orderBy?: Chartevents_7OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_7>;
  chartevents_7sConnection: (
    args?: {
      where?: Chartevents_7WhereInput;
      orderBy?: Chartevents_7OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_7ConnectionPromise;
  chartevents_8s: (
    args?: {
      where?: Chartevents_8WhereInput;
      orderBy?: Chartevents_8OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_8>;
  chartevents_8sConnection: (
    args?: {
      where?: Chartevents_8WhereInput;
      orderBy?: Chartevents_8OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_8ConnectionPromise;
  chartevents_9s: (
    args?: {
      where?: Chartevents_9WhereInput;
      orderBy?: Chartevents_9OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents_9>;
  chartevents_9sConnection: (
    args?: {
      where?: Chartevents_9WhereInput;
      orderBy?: Chartevents_9OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents_9ConnectionPromise;
  cptevent: (where: CpteventWhereUniqueInput) => CpteventPromise;
  cptevents: (
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Cptevent>;
  cpteventsConnection: (
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CpteventConnectionPromise;
  d_cpt: (where: D_cptWhereUniqueInput) => D_cptPromise;
  d_cpts: (
    args?: {
      where?: D_cptWhereInput;
      orderBy?: D_cptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<D_cpt>;
  d_cptsConnection: (
    args?: {
      where?: D_cptWhereInput;
      orderBy?: D_cptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => D_cptConnectionPromise;
  d_icd_diagnosis: (
    where: D_icd_diagnosisWhereUniqueInput
  ) => D_icd_diagnosisPromise;
  d_icd_diagnoses: (
    args?: {
      where?: D_icd_diagnosisWhereInput;
      orderBy?: D_icd_diagnosisOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<D_icd_diagnosis>;
  d_icd_diagnosesConnection: (
    args?: {
      where?: D_icd_diagnosisWhereInput;
      orderBy?: D_icd_diagnosisOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => D_icd_diagnosisConnectionPromise;
  d_icd_procedure: (
    where: D_icd_procedureWhereUniqueInput
  ) => D_icd_procedurePromise;
  d_icd_procedures: (
    args?: {
      where?: D_icd_procedureWhereInput;
      orderBy?: D_icd_procedureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<D_icd_procedure>;
  d_icd_proceduresConnection: (
    args?: {
      where?: D_icd_procedureWhereInput;
      orderBy?: D_icd_procedureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => D_icd_procedureConnectionPromise;
  d_item: (where: D_itemWhereUniqueInput) => D_itemPromise;
  d_items: (
    args?: {
      where?: D_itemWhereInput;
      orderBy?: D_itemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<D_item>;
  d_itemsConnection: (
    args?: {
      where?: D_itemWhereInput;
      orderBy?: D_itemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => D_itemConnectionPromise;
  d_labitem: (where: D_labitemWhereUniqueInput) => D_labitemPromise;
  d_labitems: (
    args?: {
      where?: D_labitemWhereInput;
      orderBy?: D_labitemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<D_labitem>;
  d_labitemsConnection: (
    args?: {
      where?: D_labitemWhereInput;
      orderBy?: D_labitemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => D_labitemConnectionPromise;
  datetimeevent: (where: DatetimeeventWhereUniqueInput) => DatetimeeventPromise;
  datetimeevents: (
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Datetimeevent>;
  datetimeeventsConnection: (
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DatetimeeventConnectionPromise;
  diagnoses_icd: (where: Diagnoses_icdWhereUniqueInput) => Diagnoses_icdPromise;
  diagnoses_icds: (
    args?: {
      where?: Diagnoses_icdWhereInput;
      orderBy?: Diagnoses_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Diagnoses_icd>;
  diagnoses_icdsConnection: (
    args?: {
      where?: Diagnoses_icdWhereInput;
      orderBy?: Diagnoses_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Diagnoses_icdConnectionPromise;
  drgcode: (where: DrgcodeWhereUniqueInput) => DrgcodePromise;
  drgcodes: (
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Drgcode>;
  drgcodesConnection: (
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DrgcodeConnectionPromise;
  icustay: (where: IcustayWhereUniqueInput) => IcustayPromise;
  icustays: (
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Icustay>;
  icustaysConnection: (
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IcustayConnectionPromise;
  inputevents_cv: (
    where: Inputevents_cvWhereUniqueInput
  ) => Inputevents_cvPromise;
  inputevents_cvs: (
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Inputevents_cv>;
  inputevents_cvsConnection: (
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Inputevents_cvConnectionPromise;
  inputevents_mv: (
    where: Inputevents_mvWhereUniqueInput
  ) => Inputevents_mvPromise;
  inputevents_mvs: (
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Inputevents_mv>;
  inputevents_mvsConnection: (
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Inputevents_mvConnectionPromise;
  labevent: (where: LabeventWhereUniqueInput) => LabeventPromise;
  labevents: (
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Labevent>;
  labeventsConnection: (
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LabeventConnectionPromise;
  microbiologyevent: (
    where: MicrobiologyeventWhereUniqueInput
  ) => MicrobiologyeventPromise;
  microbiologyevents: (
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Microbiologyevent>;
  microbiologyeventsConnection: (
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MicrobiologyeventConnectionPromise;
  noteevent: (where: NoteeventWhereUniqueInput) => NoteeventPromise;
  noteevents: (
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Noteevent>;
  noteeventsConnection: (
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NoteeventConnectionPromise;
  outputevent: (where: OutputeventWhereUniqueInput) => OutputeventPromise;
  outputevents: (
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Outputevent>;
  outputeventsConnection: (
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OutputeventConnectionPromise;
  patient: (where: PatientWhereUniqueInput) => PatientPromise;
  patients: (
    args?: {
      where?: PatientWhereInput;
      orderBy?: PatientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Patient>;
  patientsConnection: (
    args?: {
      where?: PatientWhereInput;
      orderBy?: PatientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PatientConnectionPromise;
  prescription: (where: PrescriptionWhereUniqueInput) => PrescriptionPromise;
  prescriptions: (
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Prescription>;
  prescriptionsConnection: (
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PrescriptionConnectionPromise;
  procedureevents_mv: (
    where: Procedureevents_mvWhereUniqueInput
  ) => Procedureevents_mvPromise;
  procedureevents_mvs: (
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Procedureevents_mv>;
  procedureevents_mvsConnection: (
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Procedureevents_mvConnectionPromise;
  procedures_icd: (
    where: Procedures_icdWhereUniqueInput
  ) => Procedures_icdPromise;
  procedures_icds: (
    args?: {
      where?: Procedures_icdWhereInput;
      orderBy?: Procedures_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Procedures_icd>;
  procedures_icdsConnection: (
    args?: {
      where?: Procedures_icdWhereInput;
      orderBy?: Procedures_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Procedures_icdConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServicePromise;
  services: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Service>;
  servicesConnection: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceConnectionPromise;
  transfer: (where: TransferWhereUniqueInput) => TransferPromise;
  transfers: (
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Transfer>;
  transfersConnection: (
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TransferConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdmission: (data: AdmissionCreateInput) => AdmissionPromise;
  updateAdmission: (
    args: { data: AdmissionUpdateInput; where: AdmissionWhereUniqueInput }
  ) => AdmissionPromise;
  updateManyAdmissions: (
    args: {
      data: AdmissionUpdateManyMutationInput;
      where?: AdmissionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAdmission: (
    args: {
      where: AdmissionWhereUniqueInput;
      create: AdmissionCreateInput;
      update: AdmissionUpdateInput;
    }
  ) => AdmissionPromise;
  deleteAdmission: (where: AdmissionWhereUniqueInput) => AdmissionPromise;
  deleteManyAdmissions: (where?: AdmissionWhereInput) => BatchPayloadPromise;
  createCallout: (data: CalloutCreateInput) => CalloutPromise;
  updateCallout: (
    args: { data: CalloutUpdateInput; where: CalloutWhereUniqueInput }
  ) => CalloutPromise;
  updateManyCallouts: (
    args: { data: CalloutUpdateManyMutationInput; where?: CalloutWhereInput }
  ) => BatchPayloadPromise;
  upsertCallout: (
    args: {
      where: CalloutWhereUniqueInput;
      create: CalloutCreateInput;
      update: CalloutUpdateInput;
    }
  ) => CalloutPromise;
  deleteCallout: (where: CalloutWhereUniqueInput) => CalloutPromise;
  deleteManyCallouts: (where?: CalloutWhereInput) => BatchPayloadPromise;
  createCaregiver: (data: CaregiverCreateInput) => CaregiverPromise;
  updateCaregiver: (
    args: { data: CaregiverUpdateInput; where: CaregiverWhereUniqueInput }
  ) => CaregiverPromise;
  updateManyCaregivers: (
    args: {
      data: CaregiverUpdateManyMutationInput;
      where?: CaregiverWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCaregiver: (
    args: {
      where: CaregiverWhereUniqueInput;
      create: CaregiverCreateInput;
      update: CaregiverUpdateInput;
    }
  ) => CaregiverPromise;
  deleteCaregiver: (where: CaregiverWhereUniqueInput) => CaregiverPromise;
  deleteManyCaregivers: (where?: CaregiverWhereInput) => BatchPayloadPromise;
  createChartevent: (data: CharteventCreateInput) => CharteventPromise;
  updateChartevent: (
    args: { data: CharteventUpdateInput; where: CharteventWhereUniqueInput }
  ) => CharteventPromise;
  updateManyChartevents: (
    args: {
      data: CharteventUpdateManyMutationInput;
      where?: CharteventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertChartevent: (
    args: {
      where: CharteventWhereUniqueInput;
      create: CharteventCreateInput;
      update: CharteventUpdateInput;
    }
  ) => CharteventPromise;
  deleteChartevent: (where: CharteventWhereUniqueInput) => CharteventPromise;
  deleteManyChartevents: (where?: CharteventWhereInput) => BatchPayloadPromise;
  createChartevents_1: (data: Chartevents_1CreateInput) => Chartevents_1Promise;
  updateManyChartevents_1s: (
    args: {
      data: Chartevents_1UpdateManyMutationInput;
      where?: Chartevents_1WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_1s: (
    where?: Chartevents_1WhereInput
  ) => BatchPayloadPromise;
  createChartevents_10: (
    data: Chartevents_10CreateInput
  ) => Chartevents_10Promise;
  updateManyChartevents_10s: (
    args: {
      data: Chartevents_10UpdateManyMutationInput;
      where?: Chartevents_10WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_10s: (
    where?: Chartevents_10WhereInput
  ) => BatchPayloadPromise;
  createChartevents_11: (
    data: Chartevents_11CreateInput
  ) => Chartevents_11Promise;
  updateManyChartevents_11s: (
    args: {
      data: Chartevents_11UpdateManyMutationInput;
      where?: Chartevents_11WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_11s: (
    where?: Chartevents_11WhereInput
  ) => BatchPayloadPromise;
  createChartevents_12: (
    data: Chartevents_12CreateInput
  ) => Chartevents_12Promise;
  updateManyChartevents_12s: (
    args: {
      data: Chartevents_12UpdateManyMutationInput;
      where?: Chartevents_12WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_12s: (
    where?: Chartevents_12WhereInput
  ) => BatchPayloadPromise;
  createChartevents_13: (
    data: Chartevents_13CreateInput
  ) => Chartevents_13Promise;
  updateManyChartevents_13s: (
    args: {
      data: Chartevents_13UpdateManyMutationInput;
      where?: Chartevents_13WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_13s: (
    where?: Chartevents_13WhereInput
  ) => BatchPayloadPromise;
  createChartevents_14: (
    data: Chartevents_14CreateInput
  ) => Chartevents_14Promise;
  updateManyChartevents_14s: (
    args: {
      data: Chartevents_14UpdateManyMutationInput;
      where?: Chartevents_14WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_14s: (
    where?: Chartevents_14WhereInput
  ) => BatchPayloadPromise;
  createChartevents_15: (
    data: Chartevents_15CreateInput
  ) => Chartevents_15Promise;
  updateManyChartevents_15s: (
    args: {
      data: Chartevents_15UpdateManyMutationInput;
      where?: Chartevents_15WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_15s: (
    where?: Chartevents_15WhereInput
  ) => BatchPayloadPromise;
  createChartevents_16: (
    data: Chartevents_16CreateInput
  ) => Chartevents_16Promise;
  updateManyChartevents_16s: (
    args: {
      data: Chartevents_16UpdateManyMutationInput;
      where?: Chartevents_16WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_16s: (
    where?: Chartevents_16WhereInput
  ) => BatchPayloadPromise;
  createChartevents_17: (
    data: Chartevents_17CreateInput
  ) => Chartevents_17Promise;
  updateManyChartevents_17s: (
    args: {
      data: Chartevents_17UpdateManyMutationInput;
      where?: Chartevents_17WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_17s: (
    where?: Chartevents_17WhereInput
  ) => BatchPayloadPromise;
  createChartevents_2: (data: Chartevents_2CreateInput) => Chartevents_2Promise;
  updateManyChartevents_2s: (
    args: {
      data: Chartevents_2UpdateManyMutationInput;
      where?: Chartevents_2WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_2s: (
    where?: Chartevents_2WhereInput
  ) => BatchPayloadPromise;
  createChartevents_3: (data: Chartevents_3CreateInput) => Chartevents_3Promise;
  updateManyChartevents_3s: (
    args: {
      data: Chartevents_3UpdateManyMutationInput;
      where?: Chartevents_3WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_3s: (
    where?: Chartevents_3WhereInput
  ) => BatchPayloadPromise;
  createChartevents_4: (data: Chartevents_4CreateInput) => Chartevents_4Promise;
  updateManyChartevents_4s: (
    args: {
      data: Chartevents_4UpdateManyMutationInput;
      where?: Chartevents_4WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_4s: (
    where?: Chartevents_4WhereInput
  ) => BatchPayloadPromise;
  createChartevents_5: (data: Chartevents_5CreateInput) => Chartevents_5Promise;
  updateManyChartevents_5s: (
    args: {
      data: Chartevents_5UpdateManyMutationInput;
      where?: Chartevents_5WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_5s: (
    where?: Chartevents_5WhereInput
  ) => BatchPayloadPromise;
  createChartevents_6: (data: Chartevents_6CreateInput) => Chartevents_6Promise;
  updateManyChartevents_6s: (
    args: {
      data: Chartevents_6UpdateManyMutationInput;
      where?: Chartevents_6WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_6s: (
    where?: Chartevents_6WhereInput
  ) => BatchPayloadPromise;
  createChartevents_7: (data: Chartevents_7CreateInput) => Chartevents_7Promise;
  updateManyChartevents_7s: (
    args: {
      data: Chartevents_7UpdateManyMutationInput;
      where?: Chartevents_7WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_7s: (
    where?: Chartevents_7WhereInput
  ) => BatchPayloadPromise;
  createChartevents_8: (data: Chartevents_8CreateInput) => Chartevents_8Promise;
  updateManyChartevents_8s: (
    args: {
      data: Chartevents_8UpdateManyMutationInput;
      where?: Chartevents_8WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_8s: (
    where?: Chartevents_8WhereInput
  ) => BatchPayloadPromise;
  createChartevents_9: (data: Chartevents_9CreateInput) => Chartevents_9Promise;
  updateManyChartevents_9s: (
    args: {
      data: Chartevents_9UpdateManyMutationInput;
      where?: Chartevents_9WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents_9s: (
    where?: Chartevents_9WhereInput
  ) => BatchPayloadPromise;
  createCptevent: (data: CpteventCreateInput) => CpteventPromise;
  updateCptevent: (
    args: { data: CpteventUpdateInput; where: CpteventWhereUniqueInput }
  ) => CpteventPromise;
  updateManyCptevents: (
    args: { data: CpteventUpdateManyMutationInput; where?: CpteventWhereInput }
  ) => BatchPayloadPromise;
  upsertCptevent: (
    args: {
      where: CpteventWhereUniqueInput;
      create: CpteventCreateInput;
      update: CpteventUpdateInput;
    }
  ) => CpteventPromise;
  deleteCptevent: (where: CpteventWhereUniqueInput) => CpteventPromise;
  deleteManyCptevents: (where?: CpteventWhereInput) => BatchPayloadPromise;
  createD_cpt: (data: D_cptCreateInput) => D_cptPromise;
  updateD_cpt: (
    args: { data: D_cptUpdateInput; where: D_cptWhereUniqueInput }
  ) => D_cptPromise;
  updateManyD_cpts: (
    args: { data: D_cptUpdateManyMutationInput; where?: D_cptWhereInput }
  ) => BatchPayloadPromise;
  upsertD_cpt: (
    args: {
      where: D_cptWhereUniqueInput;
      create: D_cptCreateInput;
      update: D_cptUpdateInput;
    }
  ) => D_cptPromise;
  deleteD_cpt: (where: D_cptWhereUniqueInput) => D_cptPromise;
  deleteManyD_cpts: (where?: D_cptWhereInput) => BatchPayloadPromise;
  createD_icd_diagnosis: (
    data: D_icd_diagnosisCreateInput
  ) => D_icd_diagnosisPromise;
  updateD_icd_diagnosis: (
    args: {
      data: D_icd_diagnosisUpdateInput;
      where: D_icd_diagnosisWhereUniqueInput;
    }
  ) => D_icd_diagnosisPromise;
  updateManyD_icd_diagnoses: (
    args: {
      data: D_icd_diagnosisUpdateManyMutationInput;
      where?: D_icd_diagnosisWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertD_icd_diagnosis: (
    args: {
      where: D_icd_diagnosisWhereUniqueInput;
      create: D_icd_diagnosisCreateInput;
      update: D_icd_diagnosisUpdateInput;
    }
  ) => D_icd_diagnosisPromise;
  deleteD_icd_diagnosis: (
    where: D_icd_diagnosisWhereUniqueInput
  ) => D_icd_diagnosisPromise;
  deleteManyD_icd_diagnoses: (
    where?: D_icd_diagnosisWhereInput
  ) => BatchPayloadPromise;
  createD_icd_procedure: (
    data: D_icd_procedureCreateInput
  ) => D_icd_procedurePromise;
  updateD_icd_procedure: (
    args: {
      data: D_icd_procedureUpdateInput;
      where: D_icd_procedureWhereUniqueInput;
    }
  ) => D_icd_procedurePromise;
  updateManyD_icd_procedures: (
    args: {
      data: D_icd_procedureUpdateManyMutationInput;
      where?: D_icd_procedureWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertD_icd_procedure: (
    args: {
      where: D_icd_procedureWhereUniqueInput;
      create: D_icd_procedureCreateInput;
      update: D_icd_procedureUpdateInput;
    }
  ) => D_icd_procedurePromise;
  deleteD_icd_procedure: (
    where: D_icd_procedureWhereUniqueInput
  ) => D_icd_procedurePromise;
  deleteManyD_icd_procedures: (
    where?: D_icd_procedureWhereInput
  ) => BatchPayloadPromise;
  createD_item: (data: D_itemCreateInput) => D_itemPromise;
  updateD_item: (
    args: { data: D_itemUpdateInput; where: D_itemWhereUniqueInput }
  ) => D_itemPromise;
  updateManyD_items: (
    args: { data: D_itemUpdateManyMutationInput; where?: D_itemWhereInput }
  ) => BatchPayloadPromise;
  upsertD_item: (
    args: {
      where: D_itemWhereUniqueInput;
      create: D_itemCreateInput;
      update: D_itemUpdateInput;
    }
  ) => D_itemPromise;
  deleteD_item: (where: D_itemWhereUniqueInput) => D_itemPromise;
  deleteManyD_items: (where?: D_itemWhereInput) => BatchPayloadPromise;
  createD_labitem: (data: D_labitemCreateInput) => D_labitemPromise;
  updateD_labitem: (
    args: { data: D_labitemUpdateInput; where: D_labitemWhereUniqueInput }
  ) => D_labitemPromise;
  updateManyD_labitems: (
    args: {
      data: D_labitemUpdateManyMutationInput;
      where?: D_labitemWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertD_labitem: (
    args: {
      where: D_labitemWhereUniqueInput;
      create: D_labitemCreateInput;
      update: D_labitemUpdateInput;
    }
  ) => D_labitemPromise;
  deleteD_labitem: (where: D_labitemWhereUniqueInput) => D_labitemPromise;
  deleteManyD_labitems: (where?: D_labitemWhereInput) => BatchPayloadPromise;
  createDatetimeevent: (data: DatetimeeventCreateInput) => DatetimeeventPromise;
  updateDatetimeevent: (
    args: {
      data: DatetimeeventUpdateInput;
      where: DatetimeeventWhereUniqueInput;
    }
  ) => DatetimeeventPromise;
  updateManyDatetimeevents: (
    args: {
      data: DatetimeeventUpdateManyMutationInput;
      where?: DatetimeeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDatetimeevent: (
    args: {
      where: DatetimeeventWhereUniqueInput;
      create: DatetimeeventCreateInput;
      update: DatetimeeventUpdateInput;
    }
  ) => DatetimeeventPromise;
  deleteDatetimeevent: (
    where: DatetimeeventWhereUniqueInput
  ) => DatetimeeventPromise;
  deleteManyDatetimeevents: (
    where?: DatetimeeventWhereInput
  ) => BatchPayloadPromise;
  createDiagnoses_icd: (data: Diagnoses_icdCreateInput) => Diagnoses_icdPromise;
  updateDiagnoses_icd: (
    args: {
      data: Diagnoses_icdUpdateInput;
      where: Diagnoses_icdWhereUniqueInput;
    }
  ) => Diagnoses_icdPromise;
  updateManyDiagnoses_icds: (
    args: {
      data: Diagnoses_icdUpdateManyMutationInput;
      where?: Diagnoses_icdWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDiagnoses_icd: (
    args: {
      where: Diagnoses_icdWhereUniqueInput;
      create: Diagnoses_icdCreateInput;
      update: Diagnoses_icdUpdateInput;
    }
  ) => Diagnoses_icdPromise;
  deleteDiagnoses_icd: (
    where: Diagnoses_icdWhereUniqueInput
  ) => Diagnoses_icdPromise;
  deleteManyDiagnoses_icds: (
    where?: Diagnoses_icdWhereInput
  ) => BatchPayloadPromise;
  createDrgcode: (data: DrgcodeCreateInput) => DrgcodePromise;
  updateDrgcode: (
    args: { data: DrgcodeUpdateInput; where: DrgcodeWhereUniqueInput }
  ) => DrgcodePromise;
  updateManyDrgcodes: (
    args: { data: DrgcodeUpdateManyMutationInput; where?: DrgcodeWhereInput }
  ) => BatchPayloadPromise;
  upsertDrgcode: (
    args: {
      where: DrgcodeWhereUniqueInput;
      create: DrgcodeCreateInput;
      update: DrgcodeUpdateInput;
    }
  ) => DrgcodePromise;
  deleteDrgcode: (where: DrgcodeWhereUniqueInput) => DrgcodePromise;
  deleteManyDrgcodes: (where?: DrgcodeWhereInput) => BatchPayloadPromise;
  createIcustay: (data: IcustayCreateInput) => IcustayPromise;
  updateIcustay: (
    args: { data: IcustayUpdateInput; where: IcustayWhereUniqueInput }
  ) => IcustayPromise;
  updateManyIcustays: (
    args: { data: IcustayUpdateManyMutationInput; where?: IcustayWhereInput }
  ) => BatchPayloadPromise;
  upsertIcustay: (
    args: {
      where: IcustayWhereUniqueInput;
      create: IcustayCreateInput;
      update: IcustayUpdateInput;
    }
  ) => IcustayPromise;
  deleteIcustay: (where: IcustayWhereUniqueInput) => IcustayPromise;
  deleteManyIcustays: (where?: IcustayWhereInput) => BatchPayloadPromise;
  createInputevents_cv: (
    data: Inputevents_cvCreateInput
  ) => Inputevents_cvPromise;
  updateInputevents_cv: (
    args: {
      data: Inputevents_cvUpdateInput;
      where: Inputevents_cvWhereUniqueInput;
    }
  ) => Inputevents_cvPromise;
  updateManyInputevents_cvs: (
    args: {
      data: Inputevents_cvUpdateManyMutationInput;
      where?: Inputevents_cvWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInputevents_cv: (
    args: {
      where: Inputevents_cvWhereUniqueInput;
      create: Inputevents_cvCreateInput;
      update: Inputevents_cvUpdateInput;
    }
  ) => Inputevents_cvPromise;
  deleteInputevents_cv: (
    where: Inputevents_cvWhereUniqueInput
  ) => Inputevents_cvPromise;
  deleteManyInputevents_cvs: (
    where?: Inputevents_cvWhereInput
  ) => BatchPayloadPromise;
  createInputevents_mv: (
    data: Inputevents_mvCreateInput
  ) => Inputevents_mvPromise;
  updateInputevents_mv: (
    args: {
      data: Inputevents_mvUpdateInput;
      where: Inputevents_mvWhereUniqueInput;
    }
  ) => Inputevents_mvPromise;
  updateManyInputevents_mvs: (
    args: {
      data: Inputevents_mvUpdateManyMutationInput;
      where?: Inputevents_mvWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInputevents_mv: (
    args: {
      where: Inputevents_mvWhereUniqueInput;
      create: Inputevents_mvCreateInput;
      update: Inputevents_mvUpdateInput;
    }
  ) => Inputevents_mvPromise;
  deleteInputevents_mv: (
    where: Inputevents_mvWhereUniqueInput
  ) => Inputevents_mvPromise;
  deleteManyInputevents_mvs: (
    where?: Inputevents_mvWhereInput
  ) => BatchPayloadPromise;
  createLabevent: (data: LabeventCreateInput) => LabeventPromise;
  updateLabevent: (
    args: { data: LabeventUpdateInput; where: LabeventWhereUniqueInput }
  ) => LabeventPromise;
  updateManyLabevents: (
    args: { data: LabeventUpdateManyMutationInput; where?: LabeventWhereInput }
  ) => BatchPayloadPromise;
  upsertLabevent: (
    args: {
      where: LabeventWhereUniqueInput;
      create: LabeventCreateInput;
      update: LabeventUpdateInput;
    }
  ) => LabeventPromise;
  deleteLabevent: (where: LabeventWhereUniqueInput) => LabeventPromise;
  deleteManyLabevents: (where?: LabeventWhereInput) => BatchPayloadPromise;
  createMicrobiologyevent: (
    data: MicrobiologyeventCreateInput
  ) => MicrobiologyeventPromise;
  updateMicrobiologyevent: (
    args: {
      data: MicrobiologyeventUpdateInput;
      where: MicrobiologyeventWhereUniqueInput;
    }
  ) => MicrobiologyeventPromise;
  updateManyMicrobiologyevents: (
    args: {
      data: MicrobiologyeventUpdateManyMutationInput;
      where?: MicrobiologyeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMicrobiologyevent: (
    args: {
      where: MicrobiologyeventWhereUniqueInput;
      create: MicrobiologyeventCreateInput;
      update: MicrobiologyeventUpdateInput;
    }
  ) => MicrobiologyeventPromise;
  deleteMicrobiologyevent: (
    where: MicrobiologyeventWhereUniqueInput
  ) => MicrobiologyeventPromise;
  deleteManyMicrobiologyevents: (
    where?: MicrobiologyeventWhereInput
  ) => BatchPayloadPromise;
  createNoteevent: (data: NoteeventCreateInput) => NoteeventPromise;
  updateNoteevent: (
    args: { data: NoteeventUpdateInput; where: NoteeventWhereUniqueInput }
  ) => NoteeventPromise;
  updateManyNoteevents: (
    args: {
      data: NoteeventUpdateManyMutationInput;
      where?: NoteeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNoteevent: (
    args: {
      where: NoteeventWhereUniqueInput;
      create: NoteeventCreateInput;
      update: NoteeventUpdateInput;
    }
  ) => NoteeventPromise;
  deleteNoteevent: (where: NoteeventWhereUniqueInput) => NoteeventPromise;
  deleteManyNoteevents: (where?: NoteeventWhereInput) => BatchPayloadPromise;
  createOutputevent: (data: OutputeventCreateInput) => OutputeventPromise;
  updateOutputevent: (
    args: { data: OutputeventUpdateInput; where: OutputeventWhereUniqueInput }
  ) => OutputeventPromise;
  updateManyOutputevents: (
    args: {
      data: OutputeventUpdateManyMutationInput;
      where?: OutputeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOutputevent: (
    args: {
      where: OutputeventWhereUniqueInput;
      create: OutputeventCreateInput;
      update: OutputeventUpdateInput;
    }
  ) => OutputeventPromise;
  deleteOutputevent: (where: OutputeventWhereUniqueInput) => OutputeventPromise;
  deleteManyOutputevents: (
    where?: OutputeventWhereInput
  ) => BatchPayloadPromise;
  createPatient: (data: PatientCreateInput) => PatientPromise;
  updatePatient: (
    args: { data: PatientUpdateInput; where: PatientWhereUniqueInput }
  ) => PatientPromise;
  updateManyPatients: (
    args: { data: PatientUpdateManyMutationInput; where?: PatientWhereInput }
  ) => BatchPayloadPromise;
  upsertPatient: (
    args: {
      where: PatientWhereUniqueInput;
      create: PatientCreateInput;
      update: PatientUpdateInput;
    }
  ) => PatientPromise;
  deletePatient: (where: PatientWhereUniqueInput) => PatientPromise;
  deleteManyPatients: (where?: PatientWhereInput) => BatchPayloadPromise;
  createPrescription: (data: PrescriptionCreateInput) => PrescriptionPromise;
  updatePrescription: (
    args: { data: PrescriptionUpdateInput; where: PrescriptionWhereUniqueInput }
  ) => PrescriptionPromise;
  updateManyPrescriptions: (
    args: {
      data: PrescriptionUpdateManyMutationInput;
      where?: PrescriptionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPrescription: (
    args: {
      where: PrescriptionWhereUniqueInput;
      create: PrescriptionCreateInput;
      update: PrescriptionUpdateInput;
    }
  ) => PrescriptionPromise;
  deletePrescription: (
    where: PrescriptionWhereUniqueInput
  ) => PrescriptionPromise;
  deleteManyPrescriptions: (
    where?: PrescriptionWhereInput
  ) => BatchPayloadPromise;
  createProcedureevents_mv: (
    data: Procedureevents_mvCreateInput
  ) => Procedureevents_mvPromise;
  updateProcedureevents_mv: (
    args: {
      data: Procedureevents_mvUpdateInput;
      where: Procedureevents_mvWhereUniqueInput;
    }
  ) => Procedureevents_mvPromise;
  updateManyProcedureevents_mvs: (
    args: {
      data: Procedureevents_mvUpdateManyMutationInput;
      where?: Procedureevents_mvWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProcedureevents_mv: (
    args: {
      where: Procedureevents_mvWhereUniqueInput;
      create: Procedureevents_mvCreateInput;
      update: Procedureevents_mvUpdateInput;
    }
  ) => Procedureevents_mvPromise;
  deleteProcedureevents_mv: (
    where: Procedureevents_mvWhereUniqueInput
  ) => Procedureevents_mvPromise;
  deleteManyProcedureevents_mvs: (
    where?: Procedureevents_mvWhereInput
  ) => BatchPayloadPromise;
  createProcedures_icd: (
    data: Procedures_icdCreateInput
  ) => Procedures_icdPromise;
  updateProcedures_icd: (
    args: {
      data: Procedures_icdUpdateInput;
      where: Procedures_icdWhereUniqueInput;
    }
  ) => Procedures_icdPromise;
  updateManyProcedures_icds: (
    args: {
      data: Procedures_icdUpdateManyMutationInput;
      where?: Procedures_icdWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProcedures_icd: (
    args: {
      where: Procedures_icdWhereUniqueInput;
      create: Procedures_icdCreateInput;
      update: Procedures_icdUpdateInput;
    }
  ) => Procedures_icdPromise;
  deleteProcedures_icd: (
    where: Procedures_icdWhereUniqueInput
  ) => Procedures_icdPromise;
  deleteManyProcedures_icds: (
    where?: Procedures_icdWhereInput
  ) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (
    args: { data: ServiceUpdateInput; where: ServiceWhereUniqueInput }
  ) => ServicePromise;
  updateManyServices: (
    args: { data: ServiceUpdateManyMutationInput; where?: ServiceWhereInput }
  ) => BatchPayloadPromise;
  upsertService: (
    args: {
      where: ServiceWhereUniqueInput;
      create: ServiceCreateInput;
      update: ServiceUpdateInput;
    }
  ) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createTransfer: (data: TransferCreateInput) => TransferPromise;
  updateTransfer: (
    args: { data: TransferUpdateInput; where: TransferWhereUniqueInput }
  ) => TransferPromise;
  updateManyTransfers: (
    args: { data: TransferUpdateManyMutationInput; where?: TransferWhereInput }
  ) => BatchPayloadPromise;
  upsertTransfer: (
    args: {
      where: TransferWhereUniqueInput;
      create: TransferCreateInput;
      update: TransferUpdateInput;
    }
  ) => TransferPromise;
  deleteTransfer: (where: TransferWhereUniqueInput) => TransferPromise;
  deleteManyTransfers: (where?: TransferWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  admission: (
    where?: AdmissionSubscriptionWhereInput
  ) => AdmissionSubscriptionPayloadSubscription;
  callout: (
    where?: CalloutSubscriptionWhereInput
  ) => CalloutSubscriptionPayloadSubscription;
  caregiver: (
    where?: CaregiverSubscriptionWhereInput
  ) => CaregiverSubscriptionPayloadSubscription;
  chartevent: (
    where?: CharteventSubscriptionWhereInput
  ) => CharteventSubscriptionPayloadSubscription;
  chartevents_1: (
    where?: Chartevents_1SubscriptionWhereInput
  ) => Chartevents_1SubscriptionPayloadSubscription;
  chartevents_10: (
    where?: Chartevents_10SubscriptionWhereInput
  ) => Chartevents_10SubscriptionPayloadSubscription;
  chartevents_11: (
    where?: Chartevents_11SubscriptionWhereInput
  ) => Chartevents_11SubscriptionPayloadSubscription;
  chartevents_12: (
    where?: Chartevents_12SubscriptionWhereInput
  ) => Chartevents_12SubscriptionPayloadSubscription;
  chartevents_13: (
    where?: Chartevents_13SubscriptionWhereInput
  ) => Chartevents_13SubscriptionPayloadSubscription;
  chartevents_14: (
    where?: Chartevents_14SubscriptionWhereInput
  ) => Chartevents_14SubscriptionPayloadSubscription;
  chartevents_15: (
    where?: Chartevents_15SubscriptionWhereInput
  ) => Chartevents_15SubscriptionPayloadSubscription;
  chartevents_16: (
    where?: Chartevents_16SubscriptionWhereInput
  ) => Chartevents_16SubscriptionPayloadSubscription;
  chartevents_17: (
    where?: Chartevents_17SubscriptionWhereInput
  ) => Chartevents_17SubscriptionPayloadSubscription;
  chartevents_2: (
    where?: Chartevents_2SubscriptionWhereInput
  ) => Chartevents_2SubscriptionPayloadSubscription;
  chartevents_3: (
    where?: Chartevents_3SubscriptionWhereInput
  ) => Chartevents_3SubscriptionPayloadSubscription;
  chartevents_4: (
    where?: Chartevents_4SubscriptionWhereInput
  ) => Chartevents_4SubscriptionPayloadSubscription;
  chartevents_5: (
    where?: Chartevents_5SubscriptionWhereInput
  ) => Chartevents_5SubscriptionPayloadSubscription;
  chartevents_6: (
    where?: Chartevents_6SubscriptionWhereInput
  ) => Chartevents_6SubscriptionPayloadSubscription;
  chartevents_7: (
    where?: Chartevents_7SubscriptionWhereInput
  ) => Chartevents_7SubscriptionPayloadSubscription;
  chartevents_8: (
    where?: Chartevents_8SubscriptionWhereInput
  ) => Chartevents_8SubscriptionPayloadSubscription;
  chartevents_9: (
    where?: Chartevents_9SubscriptionWhereInput
  ) => Chartevents_9SubscriptionPayloadSubscription;
  cptevent: (
    where?: CpteventSubscriptionWhereInput
  ) => CpteventSubscriptionPayloadSubscription;
  d_cpt: (
    where?: D_cptSubscriptionWhereInput
  ) => D_cptSubscriptionPayloadSubscription;
  d_icd_diagnosis: (
    where?: D_icd_diagnosisSubscriptionWhereInput
  ) => D_icd_diagnosisSubscriptionPayloadSubscription;
  d_icd_procedure: (
    where?: D_icd_procedureSubscriptionWhereInput
  ) => D_icd_procedureSubscriptionPayloadSubscription;
  d_item: (
    where?: D_itemSubscriptionWhereInput
  ) => D_itemSubscriptionPayloadSubscription;
  d_labitem: (
    where?: D_labitemSubscriptionWhereInput
  ) => D_labitemSubscriptionPayloadSubscription;
  datetimeevent: (
    where?: DatetimeeventSubscriptionWhereInput
  ) => DatetimeeventSubscriptionPayloadSubscription;
  diagnoses_icd: (
    where?: Diagnoses_icdSubscriptionWhereInput
  ) => Diagnoses_icdSubscriptionPayloadSubscription;
  drgcode: (
    where?: DrgcodeSubscriptionWhereInput
  ) => DrgcodeSubscriptionPayloadSubscription;
  icustay: (
    where?: IcustaySubscriptionWhereInput
  ) => IcustaySubscriptionPayloadSubscription;
  inputevents_cv: (
    where?: Inputevents_cvSubscriptionWhereInput
  ) => Inputevents_cvSubscriptionPayloadSubscription;
  inputevents_mv: (
    where?: Inputevents_mvSubscriptionWhereInput
  ) => Inputevents_mvSubscriptionPayloadSubscription;
  labevent: (
    where?: LabeventSubscriptionWhereInput
  ) => LabeventSubscriptionPayloadSubscription;
  microbiologyevent: (
    where?: MicrobiologyeventSubscriptionWhereInput
  ) => MicrobiologyeventSubscriptionPayloadSubscription;
  noteevent: (
    where?: NoteeventSubscriptionWhereInput
  ) => NoteeventSubscriptionPayloadSubscription;
  outputevent: (
    where?: OutputeventSubscriptionWhereInput
  ) => OutputeventSubscriptionPayloadSubscription;
  patient: (
    where?: PatientSubscriptionWhereInput
  ) => PatientSubscriptionPayloadSubscription;
  prescription: (
    where?: PrescriptionSubscriptionWhereInput
  ) => PrescriptionSubscriptionPayloadSubscription;
  procedureevents_mv: (
    where?: Procedureevents_mvSubscriptionWhereInput
  ) => Procedureevents_mvSubscriptionPayloadSubscription;
  procedures_icd: (
    where?: Procedures_icdSubscriptionWhereInput
  ) => Procedures_icdSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  transfer: (
    where?: TransferSubscriptionWhereInput
  ) => TransferSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DrgcodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "drg_code_ASC"
  | "drg_code_DESC"
  | "drg_mortality_ASC"
  | "drg_mortality_DESC"
  | "drg_severity_ASC"
  | "drg_severity_DESC"
  | "drg_type_ASC"
  | "drg_type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LabeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "flag_ASC"
  | "flag_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_16OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PatientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "dod_ASC"
  | "dod_DESC"
  | "dod_hosp_ASC"
  | "dod_hosp_DESC"
  | "dod_ssn_ASC"
  | "dod_ssn_DESC"
  | "expire_flag_ASC"
  | "expire_flag_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_15OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type D_itemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "abbreviation_ASC"
  | "abbreviation_DESC"
  | "category_ASC"
  | "category_DESC"
  | "conceptid_ASC"
  | "conceptid_DESC"
  | "dbsource_ASC"
  | "dbsource_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "label_ASC"
  | "label_DESC"
  | "linksto_ASC"
  | "linksto_DESC"
  | "param_type_ASC"
  | "param_type_DESC"
  | "unitname_ASC"
  | "unitname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_14OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CalloutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "acknowledge_status_ASC"
  | "acknowledge_status_DESC"
  | "acknowledgetime_ASC"
  | "acknowledgetime_DESC"
  | "callout_outcome_ASC"
  | "callout_outcome_DESC"
  | "callout_service_ASC"
  | "callout_service_DESC"
  | "callout_status_ASC"
  | "callout_status_DESC"
  | "callout_wardid_ASC"
  | "callout_wardid_DESC"
  | "createtime_ASC"
  | "createtime_DESC"
  | "curr_careunit_ASC"
  | "curr_careunit_DESC"
  | "curr_wardid_ASC"
  | "curr_wardid_DESC"
  | "currentreservationtime_ASC"
  | "currentreservationtime_DESC"
  | "discharge_wardid_ASC"
  | "discharge_wardid_DESC"
  | "firstreservationtime_ASC"
  | "firstreservationtime_DESC"
  | "outcometime_ASC"
  | "outcometime_DESC"
  | "request_cdiff_ASC"
  | "request_cdiff_DESC"
  | "request_mrsa_ASC"
  | "request_mrsa_DESC"
  | "request_resp_ASC"
  | "request_resp_DESC"
  | "request_tele_ASC"
  | "request_tele_DESC"
  | "request_vre_ASC"
  | "request_vre_DESC"
  | "submit_careunit_ASC"
  | "submit_careunit_DESC"
  | "submit_wardid_ASC"
  | "submit_wardid_DESC"
  | "updatetime_ASC"
  | "updatetime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_13OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type D_cptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "codesuffix_ASC"
  | "codesuffix_DESC"
  | "maxcodeinsubsection_ASC"
  | "maxcodeinsubsection_DESC"
  | "mincodeinsubsection_ASC"
  | "mincodeinsubsection_DESC"
  | "sectionheader_ASC"
  | "sectionheader_DESC"
  | "sectionrange_ASC"
  | "sectionrange_DESC"
  | "subsectionheader_ASC"
  | "subsectionheader_DESC"
  | "subsectionrange_ASC"
  | "subsectionrange_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_12OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CharteventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_11OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_7OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_10OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_6OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_1OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DatetimeeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IcustayOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dbsource_ASC"
  | "dbsource_DESC"
  | "first_careunit_ASC"
  | "first_careunit_DESC"
  | "first_wardid_ASC"
  | "first_wardid_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "intime_ASC"
  | "intime_DESC"
  | "last_careunit_ASC"
  | "last_careunit_DESC"
  | "last_wardid_ASC"
  | "last_wardid_DESC"
  | "los_ASC"
  | "los_DESC"
  | "outtime_ASC"
  | "outtime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_3OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CaregiverOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cgid_ASC"
  | "cgid_DESC"
  | "label_ASC"
  | "label_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_2OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Inputevents_cvOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "amountuom_ASC"
  | "amountuom_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "linkorderid_ASC"
  | "linkorderid_DESC"
  | "newbottle_ASC"
  | "newbottle_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "originalamount_ASC"
  | "originalamount_DESC"
  | "originalamountuom_ASC"
  | "originalamountuom_DESC"
  | "originalrate_ASC"
  | "originalrate_DESC"
  | "originalrateuom_ASC"
  | "originalrateuom_DESC"
  | "originalroute_ASC"
  | "originalroute_DESC"
  | "originalsite_ASC"
  | "originalsite_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "rateuom_ASC"
  | "rateuom_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AdmissionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "admission_location_ASC"
  | "admission_location_DESC"
  | "admission_type_ASC"
  | "admission_type_DESC"
  | "admittime_ASC"
  | "admittime_DESC"
  | "deathtime_ASC"
  | "deathtime_DESC"
  | "diagnosis_ASC"
  | "diagnosis_DESC"
  | "discharge_location_ASC"
  | "discharge_location_DESC"
  | "dischtime_ASC"
  | "dischtime_DESC"
  | "edouttime_ASC"
  | "edouttime_DESC"
  | "edregtime_ASC"
  | "edregtime_DESC"
  | "ethnicity_ASC"
  | "ethnicity_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "has_chartevents_data_ASC"
  | "has_chartevents_data_DESC"
  | "hospital_expire_flag_ASC"
  | "hospital_expire_flag_DESC"
  | "insurance_ASC"
  | "insurance_DESC"
  | "language_ASC"
  | "language_DESC"
  | "marital_status_ASC"
  | "marital_status_DESC"
  | "religion_ASC"
  | "religion_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type D_icd_procedureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "long_title_ASC"
  | "long_title_DESC"
  | "short_title_ASC"
  | "short_title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Inputevents_mvOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "amountuom_ASC"
  | "amountuom_DESC"
  | "cancelreason_ASC"
  | "cancelreason_DESC"
  | "comments_canceledby_ASC"
  | "comments_canceledby_DESC"
  | "comments_date_ASC"
  | "comments_date_DESC"
  | "comments_editedby_ASC"
  | "comments_editedby_DESC"
  | "continueinnextdept_ASC"
  | "continueinnextdept_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "isopenbag_ASC"
  | "isopenbag_DESC"
  | "linkorderid_ASC"
  | "linkorderid_DESC"
  | "ordercategorydescription_ASC"
  | "ordercategorydescription_DESC"
  | "ordercategoryname_ASC"
  | "ordercategoryname_DESC"
  | "ordercomponenttypedescription_ASC"
  | "ordercomponenttypedescription_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "originalamount_ASC"
  | "originalamount_DESC"
  | "originalrate_ASC"
  | "originalrate_DESC"
  | "patientweight_ASC"
  | "patientweight_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "rateuom_ASC"
  | "rateuom_DESC"
  | "secondaryordercategoryname_ASC"
  | "secondaryordercategoryname_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "statusdescription_ASC"
  | "statusdescription_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "totalamount_ASC"
  | "totalamount_DESC"
  | "totalamountuom_ASC"
  | "totalamountuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_9OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "curr_service_ASC"
  | "curr_service_DESC"
  | "prev_service_ASC"
  | "prev_service_DESC"
  | "transfertime_ASC"
  | "transfertime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CpteventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "chartdate_ASC"
  | "chartdate_DESC"
  | "costcenter_ASC"
  | "costcenter_DESC"
  | "cpt_cd_ASC"
  | "cpt_cd_DESC"
  | "cpt_number_ASC"
  | "cpt_number_DESC"
  | "cpt_suffix_ASC"
  | "cpt_suffix_DESC"
  | "description_ASC"
  | "description_DESC"
  | "sectionheader_ASC"
  | "sectionheader_DESC"
  | "subsectionheader_ASC"
  | "subsectionheader_DESC"
  | "ticket_id_seq_ASC"
  | "ticket_id_seq_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OutputeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "iserror_ASC"
  | "iserror_DESC"
  | "newbottle_ASC"
  | "newbottle_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_4OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Procedures_icdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "seq_num_ASC"
  | "seq_num_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_17OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PrescriptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dose_unit_rx_ASC"
  | "dose_unit_rx_DESC"
  | "dose_val_rx_ASC"
  | "dose_val_rx_DESC"
  | "drug_ASC"
  | "drug_DESC"
  | "drug_name_generic_ASC"
  | "drug_name_generic_DESC"
  | "drug_name_poe_ASC"
  | "drug_name_poe_DESC"
  | "drug_type_ASC"
  | "drug_type_DESC"
  | "enddate_ASC"
  | "enddate_DESC"
  | "form_unit_disp_ASC"
  | "form_unit_disp_DESC"
  | "form_val_disp_ASC"
  | "form_val_disp_DESC"
  | "formulary_drug_cd_ASC"
  | "formulary_drug_cd_DESC"
  | "gsn_ASC"
  | "gsn_DESC"
  | "ndc_ASC"
  | "ndc_DESC"
  | "prod_strength_ASC"
  | "prod_strength_DESC"
  | "route_ASC"
  | "route_DESC"
  | "startdate_ASC"
  | "startdate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type D_icd_diagnosisOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "long_title_ASC"
  | "long_title_DESC"
  | "short_title_ASC"
  | "short_title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TransferOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "curr_careunit_ASC"
  | "curr_careunit_DESC"
  | "curr_wardid_ASC"
  | "curr_wardid_DESC"
  | "dbsource_ASC"
  | "dbsource_DESC"
  | "eventtype_ASC"
  | "eventtype_DESC"
  | "intime_ASC"
  | "intime_DESC"
  | "los_ASC"
  | "los_DESC"
  | "outtime_ASC"
  | "outtime_DESC"
  | "prev_careunit_ASC"
  | "prev_careunit_DESC"
  | "prev_wardid_ASC"
  | "prev_wardid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MicrobiologyeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ab_name_ASC"
  | "ab_name_DESC"
  | "chartdate_ASC"
  | "chartdate_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "dilution_comparison_ASC"
  | "dilution_comparison_DESC"
  | "dilution_text_ASC"
  | "dilution_text_DESC"
  | "dilution_value_ASC"
  | "dilution_value_DESC"
  | "interpretation_ASC"
  | "interpretation_DESC"
  | "isolate_num_ASC"
  | "isolate_num_DESC"
  | "org_name_ASC"
  | "org_name_DESC"
  | "spec_type_desc_ASC"
  | "spec_type_desc_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Procedureevents_mvOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cancelreason_ASC"
  | "cancelreason_DESC"
  | "comments_canceledby_ASC"
  | "comments_canceledby_DESC"
  | "comments_date_ASC"
  | "comments_date_DESC"
  | "comments_editedby_ASC"
  | "comments_editedby_DESC"
  | "continueinnextdept_ASC"
  | "continueinnextdept_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "isopenbag_ASC"
  | "isopenbag_DESC"
  | "linkorderid_ASC"
  | "linkorderid_DESC"
  | "location_ASC"
  | "location_DESC"
  | "locationcategory_ASC"
  | "locationcategory_DESC"
  | "ordercategorydescription_ASC"
  | "ordercategorydescription_DESC"
  | "ordercategoryname_ASC"
  | "ordercategoryname_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "secondaryordercategoryname_ASC"
  | "secondaryordercategoryname_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "statusdescription_ASC"
  | "statusdescription_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NoteeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "chartdate_ASC"
  | "chartdate_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "description_ASC"
  | "description_DESC"
  | "iserror_ASC"
  | "iserror_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_8OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type D_labitemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "fluid_ASC"
  | "fluid_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "label_ASC"
  | "label_DESC"
  | "loinc_code_ASC"
  | "loinc_code_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Diagnoses_icdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "seq_num_ASC"
  | "seq_num_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents_5OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CpteventUpdateManyInput {
  create?: CpteventCreateInput[] | CpteventCreateInput;
  update?:
    | CpteventUpdateWithWhereUniqueNestedInput[]
    | CpteventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CpteventUpsertWithWhereUniqueNestedInput[]
    | CpteventUpsertWithWhereUniqueNestedInput;
  delete?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  connect?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  set?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  disconnect?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  deleteMany?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
  updateMany?:
    | CpteventUpdateManyWithWhereNestedInput[]
    | CpteventUpdateManyWithWhereNestedInput;
}

export type AdmissionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  hadm_id?: Int;
}>;

export interface DrgcodeUpdateDataInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface LabeventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  flag?: String;
  flag_not?: String;
  flag_in?: String[] | String;
  flag_not_in?: String[] | String;
  flag_lt?: String;
  flag_lte?: String;
  flag_gt?: String;
  flag_gte?: String;
  flag_contains?: String;
  flag_not_contains?: String;
  flag_starts_with?: String;
  flag_not_starts_with?: String;
  flag_ends_with?: String;
  flag_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: LabeventWhereInput[] | LabeventWhereInput;
  OR?: LabeventWhereInput[] | LabeventWhereInput;
  NOT?: LabeventWhereInput[] | LabeventWhereInput;
}

export interface Chartevents_1UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface LabeventUpdateManyInput {
  create?: LabeventCreateInput[] | LabeventCreateInput;
  update?:
    | LabeventUpdateWithWhereUniqueNestedInput[]
    | LabeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | LabeventUpsertWithWhereUniqueNestedInput[]
    | LabeventUpsertWithWhereUniqueNestedInput;
  delete?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  connect?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  set?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  disconnect?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  deleteMany?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
  updateMany?:
    | LabeventUpdateManyWithWhereNestedInput[]
    | LabeventUpdateManyWithWhereNestedInput;
}

export type IcustayWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  icustay_id?: Int;
}>;

export interface DrgcodeUpsertWithWhereUniqueNestedInput {
  where: DrgcodeWhereUniqueInput;
  update: DrgcodeUpdateDataInput;
  create: DrgcodeCreateInput;
}

export interface Chartevents_1CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceWhereInput;
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  NOT?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
}

export interface CharteventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedures_icdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Procedures_icdWhereInput;
  AND?:
    | Procedures_icdSubscriptionWhereInput[]
    | Procedures_icdSubscriptionWhereInput;
  OR?:
    | Procedures_icdSubscriptionWhereInput[]
    | Procedures_icdSubscriptionWhereInput;
  NOT?:
    | Procedures_icdSubscriptionWhereInput[]
    | Procedures_icdSubscriptionWhereInput;
}

export interface CharteventUpdateInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedures_icdWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: Procedures_icdWhereInput[] | Procedures_icdWhereInput;
  OR?: Procedures_icdWhereInput[] | Procedures_icdWhereInput;
  NOT?: Procedures_icdWhereInput[] | Procedures_icdWhereInput;
}

export type Inputevents_cvWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PatientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PatientWhereInput;
  AND?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
  OR?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
  NOT?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
}

export interface CaregiverUpdateManyMutationInput {
  cgid?: Int;
  label?: String;
  description?: String;
}

export interface OutputeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OutputeventWhereInput;
  AND?: OutputeventSubscriptionWhereInput[] | OutputeventSubscriptionWhereInput;
  OR?: OutputeventSubscriptionWhereInput[] | OutputeventSubscriptionWhereInput;
  NOT?: OutputeventSubscriptionWhereInput[] | OutputeventSubscriptionWhereInput;
}

export interface CaregiverUpdateInput {
  cgid?: Int;
  label?: String;
  description?: String;
  chartevents?: CharteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  inputevents_cv?: Inputevents_cvUpdateManyInput;
  inputevents_mv?: Inputevents_mvUpdateManyInput;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  procedureevents_mv?: Procedureevents_mvUpdateManyInput;
}

export interface AdmissionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  admission_location?: String;
  admission_location_not?: String;
  admission_location_in?: String[] | String;
  admission_location_not_in?: String[] | String;
  admission_location_lt?: String;
  admission_location_lte?: String;
  admission_location_gt?: String;
  admission_location_gte?: String;
  admission_location_contains?: String;
  admission_location_not_contains?: String;
  admission_location_starts_with?: String;
  admission_location_not_starts_with?: String;
  admission_location_ends_with?: String;
  admission_location_not_ends_with?: String;
  admission_type?: String;
  admission_type_not?: String;
  admission_type_in?: String[] | String;
  admission_type_not_in?: String[] | String;
  admission_type_lt?: String;
  admission_type_lte?: String;
  admission_type_gt?: String;
  admission_type_gte?: String;
  admission_type_contains?: String;
  admission_type_not_contains?: String;
  admission_type_starts_with?: String;
  admission_type_not_starts_with?: String;
  admission_type_ends_with?: String;
  admission_type_not_ends_with?: String;
  admittime?: DateTimeInput;
  admittime_not?: DateTimeInput;
  admittime_in?: DateTimeInput[] | DateTimeInput;
  admittime_not_in?: DateTimeInput[] | DateTimeInput;
  admittime_lt?: DateTimeInput;
  admittime_lte?: DateTimeInput;
  admittime_gt?: DateTimeInput;
  admittime_gte?: DateTimeInput;
  callout_every?: CalloutWhereInput;
  callout_some?: CalloutWhereInput;
  callout_none?: CalloutWhereInput;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  cptevents_every?: CpteventWhereInput;
  cptevents_some?: CpteventWhereInput;
  cptevents_none?: CpteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  deathtime?: DateTimeInput;
  deathtime_not?: DateTimeInput;
  deathtime_in?: DateTimeInput[] | DateTimeInput;
  deathtime_not_in?: DateTimeInput[] | DateTimeInput;
  deathtime_lt?: DateTimeInput;
  deathtime_lte?: DateTimeInput;
  deathtime_gt?: DateTimeInput;
  deathtime_gte?: DateTimeInput;
  diagnoses_icd_every?: Diagnoses_icdWhereInput;
  diagnoses_icd_some?: Diagnoses_icdWhereInput;
  diagnoses_icd_none?: Diagnoses_icdWhereInput;
  diagnosis?: String;
  diagnosis_not?: String;
  diagnosis_in?: String[] | String;
  diagnosis_not_in?: String[] | String;
  diagnosis_lt?: String;
  diagnosis_lte?: String;
  diagnosis_gt?: String;
  diagnosis_gte?: String;
  diagnosis_contains?: String;
  diagnosis_not_contains?: String;
  diagnosis_starts_with?: String;
  diagnosis_not_starts_with?: String;
  diagnosis_ends_with?: String;
  diagnosis_not_ends_with?: String;
  discharge_location?: String;
  discharge_location_not?: String;
  discharge_location_in?: String[] | String;
  discharge_location_not_in?: String[] | String;
  discharge_location_lt?: String;
  discharge_location_lte?: String;
  discharge_location_gt?: String;
  discharge_location_gte?: String;
  discharge_location_contains?: String;
  discharge_location_not_contains?: String;
  discharge_location_starts_with?: String;
  discharge_location_not_starts_with?: String;
  discharge_location_ends_with?: String;
  discharge_location_not_ends_with?: String;
  dischtime?: DateTimeInput;
  dischtime_not?: DateTimeInput;
  dischtime_in?: DateTimeInput[] | DateTimeInput;
  dischtime_not_in?: DateTimeInput[] | DateTimeInput;
  dischtime_lt?: DateTimeInput;
  dischtime_lte?: DateTimeInput;
  dischtime_gt?: DateTimeInput;
  dischtime_gte?: DateTimeInput;
  drgcodes_every?: DrgcodeWhereInput;
  drgcodes_some?: DrgcodeWhereInput;
  drgcodes_none?: DrgcodeWhereInput;
  edouttime?: DateTimeInput;
  edouttime_not?: DateTimeInput;
  edouttime_in?: DateTimeInput[] | DateTimeInput;
  edouttime_not_in?: DateTimeInput[] | DateTimeInput;
  edouttime_lt?: DateTimeInput;
  edouttime_lte?: DateTimeInput;
  edouttime_gt?: DateTimeInput;
  edouttime_gte?: DateTimeInput;
  edregtime?: DateTimeInput;
  edregtime_not?: DateTimeInput;
  edregtime_in?: DateTimeInput[] | DateTimeInput;
  edregtime_not_in?: DateTimeInput[] | DateTimeInput;
  edregtime_lt?: DateTimeInput;
  edregtime_lte?: DateTimeInput;
  edregtime_gt?: DateTimeInput;
  edregtime_gte?: DateTimeInput;
  ethnicity?: String;
  ethnicity_not?: String;
  ethnicity_in?: String[] | String;
  ethnicity_not_in?: String[] | String;
  ethnicity_lt?: String;
  ethnicity_lte?: String;
  ethnicity_gt?: String;
  ethnicity_gte?: String;
  ethnicity_contains?: String;
  ethnicity_not_contains?: String;
  ethnicity_starts_with?: String;
  ethnicity_not_starts_with?: String;
  ethnicity_ends_with?: String;
  ethnicity_not_ends_with?: String;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  has_chartevents_data?: Int;
  has_chartevents_data_not?: Int;
  has_chartevents_data_in?: Int[] | Int;
  has_chartevents_data_not_in?: Int[] | Int;
  has_chartevents_data_lt?: Int;
  has_chartevents_data_lte?: Int;
  has_chartevents_data_gt?: Int;
  has_chartevents_data_gte?: Int;
  hospital_expire_flag?: Int;
  hospital_expire_flag_not?: Int;
  hospital_expire_flag_in?: Int[] | Int;
  hospital_expire_flag_not_in?: Int[] | Int;
  hospital_expire_flag_lt?: Int;
  hospital_expire_flag_lte?: Int;
  hospital_expire_flag_gt?: Int;
  hospital_expire_flag_gte?: Int;
  icustays_every?: IcustayWhereInput;
  icustays_some?: IcustayWhereInput;
  icustays_none?: IcustayWhereInput;
  inputevents_cv_every?: Inputevents_cvWhereInput;
  inputevents_cv_some?: Inputevents_cvWhereInput;
  inputevents_cv_none?: Inputevents_cvWhereInput;
  inputevents_mv_every?: Inputevents_mvWhereInput;
  inputevents_mv_some?: Inputevents_mvWhereInput;
  inputevents_mv_none?: Inputevents_mvWhereInput;
  insurance?: String;
  insurance_not?: String;
  insurance_in?: String[] | String;
  insurance_not_in?: String[] | String;
  insurance_lt?: String;
  insurance_lte?: String;
  insurance_gt?: String;
  insurance_gte?: String;
  insurance_contains?: String;
  insurance_not_contains?: String;
  insurance_starts_with?: String;
  insurance_not_starts_with?: String;
  insurance_ends_with?: String;
  insurance_not_ends_with?: String;
  labevents_every?: LabeventWhereInput;
  labevents_some?: LabeventWhereInput;
  labevents_none?: LabeventWhereInput;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  marital_status?: String;
  marital_status_not?: String;
  marital_status_in?: String[] | String;
  marital_status_not_in?: String[] | String;
  marital_status_lt?: String;
  marital_status_lte?: String;
  marital_status_gt?: String;
  marital_status_gte?: String;
  marital_status_contains?: String;
  marital_status_not_contains?: String;
  marital_status_starts_with?: String;
  marital_status_not_starts_with?: String;
  marital_status_ends_with?: String;
  marital_status_not_ends_with?: String;
  microbiologyevents_every?: MicrobiologyeventWhereInput;
  microbiologyevents_some?: MicrobiologyeventWhereInput;
  microbiologyevents_none?: MicrobiologyeventWhereInput;
  noteevents_every?: NoteeventWhereInput;
  noteevents_some?: NoteeventWhereInput;
  noteevents_none?: NoteeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  prescriptions_every?: PrescriptionWhereInput;
  prescriptions_some?: PrescriptionWhereInput;
  prescriptions_none?: PrescriptionWhereInput;
  procedureevents_mv_every?: Procedureevents_mvWhereInput;
  procedureevents_mv_some?: Procedureevents_mvWhereInput;
  procedureevents_mv_none?: Procedureevents_mvWhereInput;
  procedures_icd_every?: Procedures_icdWhereInput;
  procedures_icd_some?: Procedures_icdWhereInput;
  procedures_icd_none?: Procedures_icdWhereInput;
  religion?: String;
  religion_not?: String;
  religion_in?: String[] | String;
  religion_not_in?: String[] | String;
  religion_lt?: String;
  religion_lte?: String;
  religion_gt?: String;
  religion_gte?: String;
  religion_contains?: String;
  religion_not_contains?: String;
  religion_starts_with?: String;
  religion_not_starts_with?: String;
  religion_ends_with?: String;
  religion_not_ends_with?: String;
  services_every?: ServiceWhereInput;
  services_some?: ServiceWhereInput;
  services_none?: ServiceWhereInput;
  transfers_every?: TransferWhereInput;
  transfers_some?: TransferWhereInput;
  transfers_none?: TransferWhereInput;
  AND?: AdmissionWhereInput[] | AdmissionWhereInput;
  OR?: AdmissionWhereInput[] | AdmissionWhereInput;
  NOT?: AdmissionWhereInput[] | AdmissionWhereInput;
}

export interface CaregiverCreateInput {
  cgid: Int;
  label?: String;
  description?: String;
  chartevents?: CharteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  inputevents_cv?: Inputevents_cvCreateManyInput;
  inputevents_mv?: Inputevents_mvCreateManyInput;
  noteevents?: NoteeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  procedureevents_mv?: Procedureevents_mvCreateManyInput;
}

export interface LabeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LabeventWhereInput;
  AND?: LabeventSubscriptionWhereInput[] | LabeventSubscriptionWhereInput;
  OR?: LabeventSubscriptionWhereInput[] | LabeventSubscriptionWhereInput;
  NOT?: LabeventSubscriptionWhereInput[] | LabeventSubscriptionWhereInput;
}

export type Inputevents_mvWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Inputevents_cvSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Inputevents_cvWhereInput;
  AND?:
    | Inputevents_cvSubscriptionWhereInput[]
    | Inputevents_cvSubscriptionWhereInput;
  OR?:
    | Inputevents_cvSubscriptionWhereInput[]
    | Inputevents_cvSubscriptionWhereInput;
  NOT?:
    | Inputevents_cvSubscriptionWhereInput[]
    | Inputevents_cvSubscriptionWhereInput;
}

export interface CalloutUpdateManyMutationInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface DrgcodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DrgcodeWhereInput;
  AND?: DrgcodeSubscriptionWhereInput[] | DrgcodeSubscriptionWhereInput;
  OR?: DrgcodeSubscriptionWhereInput[] | DrgcodeSubscriptionWhereInput;
  NOT?: DrgcodeSubscriptionWhereInput[] | DrgcodeSubscriptionWhereInput;
}

export interface CalloutUpdateInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface Diagnoses_icdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Diagnoses_icdWhereInput;
  AND?:
    | Diagnoses_icdSubscriptionWhereInput[]
    | Diagnoses_icdSubscriptionWhereInput;
  OR?:
    | Diagnoses_icdSubscriptionWhereInput[]
    | Diagnoses_icdSubscriptionWhereInput;
  NOT?:
    | Diagnoses_icdSubscriptionWhereInput[]
    | Diagnoses_icdSubscriptionWhereInput;
}

export interface AdmissionUpdateManyMutationInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  deathtime?: DateTimeInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  insurance?: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface D_labitemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: D_labitemWhereInput;
  AND?: D_labitemSubscriptionWhereInput[] | D_labitemSubscriptionWhereInput;
  OR?: D_labitemSubscriptionWhereInput[] | D_labitemSubscriptionWhereInput;
  NOT?: D_labitemSubscriptionWhereInput[] | D_labitemSubscriptionWhereInput;
}

export type LabeventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface D_itemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: D_itemWhereInput;
  AND?: D_itemSubscriptionWhereInput[] | D_itemSubscriptionWhereInput;
  OR?: D_itemSubscriptionWhereInput[] | D_itemSubscriptionWhereInput;
  NOT?: D_itemSubscriptionWhereInput[] | D_itemSubscriptionWhereInput;
}

export interface ServiceUpdateManyDataInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface D_icd_procedureSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: D_icd_procedureWhereInput;
  AND?:
    | D_icd_procedureSubscriptionWhereInput[]
    | D_icd_procedureSubscriptionWhereInput;
  OR?:
    | D_icd_procedureSubscriptionWhereInput[]
    | D_icd_procedureSubscriptionWhereInput;
  NOT?:
    | D_icd_procedureSubscriptionWhereInput[]
    | D_icd_procedureSubscriptionWhereInput;
}

export interface ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput;
  data: ServiceUpdateManyDataInput;
}

export interface D_cptSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: D_cptWhereInput;
  AND?: D_cptSubscriptionWhereInput[] | D_cptSubscriptionWhereInput;
  OR?: D_cptSubscriptionWhereInput[] | D_cptSubscriptionWhereInput;
  NOT?: D_cptSubscriptionWhereInput[] | D_cptSubscriptionWhereInput;
}

export interface ServiceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  curr_service?: String;
  curr_service_not?: String;
  curr_service_in?: String[] | String;
  curr_service_not_in?: String[] | String;
  curr_service_lt?: String;
  curr_service_lte?: String;
  curr_service_gt?: String;
  curr_service_gte?: String;
  curr_service_contains?: String;
  curr_service_not_contains?: String;
  curr_service_starts_with?: String;
  curr_service_not_starts_with?: String;
  curr_service_ends_with?: String;
  curr_service_not_ends_with?: String;
  prev_service?: String;
  prev_service_not?: String;
  prev_service_in?: String[] | String;
  prev_service_not_in?: String[] | String;
  prev_service_lt?: String;
  prev_service_lte?: String;
  prev_service_gt?: String;
  prev_service_gte?: String;
  prev_service_contains?: String;
  prev_service_not_contains?: String;
  prev_service_starts_with?: String;
  prev_service_not_starts_with?: String;
  prev_service_ends_with?: String;
  prev_service_not_ends_with?: String;
  transfertime?: DateTimeInput;
  transfertime_not?: DateTimeInput;
  transfertime_in?: DateTimeInput[] | DateTimeInput;
  transfertime_not_in?: DateTimeInput[] | DateTimeInput;
  transfertime_lt?: DateTimeInput;
  transfertime_lte?: DateTimeInput;
  transfertime_gt?: DateTimeInput;
  transfertime_gte?: DateTimeInput;
  AND?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  OR?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  NOT?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
}

export type CharteventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type MicrobiologyeventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Chartevents_8SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_8WhereInput;
  AND?:
    | Chartevents_8SubscriptionWhereInput[]
    | Chartevents_8SubscriptionWhereInput;
  OR?:
    | Chartevents_8SubscriptionWhereInput[]
    | Chartevents_8SubscriptionWhereInput;
  NOT?:
    | Chartevents_8SubscriptionWhereInput[]
    | Chartevents_8SubscriptionWhereInput;
}

export interface ServiceUpsertWithWhereUniqueNestedInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateDataInput;
  create: ServiceCreateInput;
}

export interface Chartevents_1WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_1WhereInput[] | Chartevents_1WhereInput;
  OR?: Chartevents_1WhereInput[] | Chartevents_1WhereInput;
  NOT?: Chartevents_1WhereInput[] | Chartevents_1WhereInput;
}

export interface ServiceUpdateDataInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface Chartevents_6SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_6WhereInput;
  AND?:
    | Chartevents_6SubscriptionWhereInput[]
    | Chartevents_6SubscriptionWhereInput;
  OR?:
    | Chartevents_6SubscriptionWhereInput[]
    | Chartevents_6SubscriptionWhereInput;
  NOT?:
    | Chartevents_6SubscriptionWhereInput[]
    | Chartevents_6SubscriptionWhereInput;
}

export interface ServiceUpdateWithWhereUniqueNestedInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateDataInput;
}

export interface Chartevents_4SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_4WhereInput;
  AND?:
    | Chartevents_4SubscriptionWhereInput[]
    | Chartevents_4SubscriptionWhereInput;
  OR?:
    | Chartevents_4SubscriptionWhereInput[]
    | Chartevents_4SubscriptionWhereInput;
  NOT?:
    | Chartevents_4SubscriptionWhereInput[]
    | Chartevents_4SubscriptionWhereInput;
}

export type NoteeventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Chartevents_10WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_10WhereInput[] | Chartevents_10WhereInput;
  OR?: Chartevents_10WhereInput[] | Chartevents_10WhereInput;
  NOT?: Chartevents_10WhereInput[] | Chartevents_10WhereInput;
}

export interface ServiceUpdateManyInput {
  create?: ServiceCreateInput[] | ServiceCreateInput;
  update?:
    | ServiceUpdateWithWhereUniqueNestedInput[]
    | ServiceUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ServiceUpsertWithWhereUniqueNestedInput[]
    | ServiceUpsertWithWhereUniqueNestedInput;
  delete?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  set?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  disconnect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  deleteMany?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  updateMany?:
    | ServiceUpdateManyWithWhereNestedInput[]
    | ServiceUpdateManyWithWhereNestedInput;
}

export interface Chartevents_2SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_2WhereInput;
  AND?:
    | Chartevents_2SubscriptionWhereInput[]
    | Chartevents_2SubscriptionWhereInput;
  OR?:
    | Chartevents_2SubscriptionWhereInput[]
    | Chartevents_2SubscriptionWhereInput;
  NOT?:
    | Chartevents_2SubscriptionWhereInput[]
    | Chartevents_2SubscriptionWhereInput;
}

export interface Procedures_icdUpdateManyDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface Chartevents_16SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_16WhereInput;
  AND?:
    | Chartevents_16SubscriptionWhereInput[]
    | Chartevents_16SubscriptionWhereInput;
  OR?:
    | Chartevents_16SubscriptionWhereInput[]
    | Chartevents_16SubscriptionWhereInput;
  NOT?:
    | Chartevents_16SubscriptionWhereInput[]
    | Chartevents_16SubscriptionWhereInput;
}

export interface Procedures_icdUpdateManyWithWhereNestedInput {
  where: Procedures_icdScalarWhereInput;
  data: Procedures_icdUpdateManyDataInput;
}

export interface Chartevents_11WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_11WhereInput[] | Chartevents_11WhereInput;
  OR?: Chartevents_11WhereInput[] | Chartevents_11WhereInput;
  NOT?: Chartevents_11WhereInput[] | Chartevents_11WhereInput;
}

export type OutputeventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Chartevents_14SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_14WhereInput;
  AND?:
    | Chartevents_14SubscriptionWhereInput[]
    | Chartevents_14SubscriptionWhereInput;
  OR?:
    | Chartevents_14SubscriptionWhereInput[]
    | Chartevents_14SubscriptionWhereInput;
  NOT?:
    | Chartevents_14SubscriptionWhereInput[]
    | Chartevents_14SubscriptionWhereInput;
}

export interface Procedures_icdScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: Procedures_icdScalarWhereInput[] | Procedures_icdScalarWhereInput;
  OR?: Procedures_icdScalarWhereInput[] | Procedures_icdScalarWhereInput;
  NOT?: Procedures_icdScalarWhereInput[] | Procedures_icdScalarWhereInput;
}

export interface Chartevents_12SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_12WhereInput;
  AND?:
    | Chartevents_12SubscriptionWhereInput[]
    | Chartevents_12SubscriptionWhereInput;
  OR?:
    | Chartevents_12SubscriptionWhereInput[]
    | Chartevents_12SubscriptionWhereInput;
  NOT?:
    | Chartevents_12SubscriptionWhereInput[]
    | Chartevents_12SubscriptionWhereInput;
}

export interface Procedures_icdUpsertWithWhereUniqueNestedInput {
  where: Procedures_icdWhereUniqueInput;
  update: Procedures_icdUpdateDataInput;
  create: Procedures_icdCreateInput;
}

export interface Chartevents_12WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_12WhereInput[] | Chartevents_12WhereInput;
  OR?: Chartevents_12WhereInput[] | Chartevents_12WhereInput;
  NOT?: Chartevents_12WhereInput[] | Chartevents_12WhereInput;
}

export interface Procedures_icdUpdateDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface Chartevents_10SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_10WhereInput;
  AND?:
    | Chartevents_10SubscriptionWhereInput[]
    | Chartevents_10SubscriptionWhereInput;
  OR?:
    | Chartevents_10SubscriptionWhereInput[]
    | Chartevents_10SubscriptionWhereInput;
  NOT?:
    | Chartevents_10SubscriptionWhereInput[]
    | Chartevents_10SubscriptionWhereInput;
}

export type PatientWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  subject_id?: Int;
}>;

export interface CharteventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CharteventWhereInput;
  AND?: CharteventSubscriptionWhereInput[] | CharteventSubscriptionWhereInput;
  OR?: CharteventSubscriptionWhereInput[] | CharteventSubscriptionWhereInput;
  NOT?: CharteventSubscriptionWhereInput[] | CharteventSubscriptionWhereInput;
}

export interface Procedures_icdUpdateWithWhereUniqueNestedInput {
  where: Procedures_icdWhereUniqueInput;
  data: Procedures_icdUpdateDataInput;
}

export interface Chartevents_13WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_13WhereInput[] | Chartevents_13WhereInput;
  OR?: Chartevents_13WhereInput[] | Chartevents_13WhereInput;
  NOT?: Chartevents_13WhereInput[] | Chartevents_13WhereInput;
}

export interface PatientWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  admissions_every?: AdmissionWhereInput;
  admissions_some?: AdmissionWhereInput;
  admissions_none?: AdmissionWhereInput;
  callout_every?: CalloutWhereInput;
  callout_some?: CalloutWhereInput;
  callout_none?: CalloutWhereInput;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  cptevents_every?: CpteventWhereInput;
  cptevents_some?: CpteventWhereInput;
  cptevents_none?: CpteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  diagnoses_icd_every?: Diagnoses_icdWhereInput;
  diagnoses_icd_some?: Diagnoses_icdWhereInput;
  diagnoses_icd_none?: Diagnoses_icdWhereInput;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  dod?: DateTimeInput;
  dod_not?: DateTimeInput;
  dod_in?: DateTimeInput[] | DateTimeInput;
  dod_not_in?: DateTimeInput[] | DateTimeInput;
  dod_lt?: DateTimeInput;
  dod_lte?: DateTimeInput;
  dod_gt?: DateTimeInput;
  dod_gte?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_hosp_not?: DateTimeInput;
  dod_hosp_in?: DateTimeInput[] | DateTimeInput;
  dod_hosp_not_in?: DateTimeInput[] | DateTimeInput;
  dod_hosp_lt?: DateTimeInput;
  dod_hosp_lte?: DateTimeInput;
  dod_hosp_gt?: DateTimeInput;
  dod_hosp_gte?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  dod_ssn_not?: DateTimeInput;
  dod_ssn_in?: DateTimeInput[] | DateTimeInput;
  dod_ssn_not_in?: DateTimeInput[] | DateTimeInput;
  dod_ssn_lt?: DateTimeInput;
  dod_ssn_lte?: DateTimeInput;
  dod_ssn_gt?: DateTimeInput;
  dod_ssn_gte?: DateTimeInput;
  drgcodes_every?: DrgcodeWhereInput;
  drgcodes_some?: DrgcodeWhereInput;
  drgcodes_none?: DrgcodeWhereInput;
  expire_flag?: Int;
  expire_flag_not?: Int;
  expire_flag_in?: Int[] | Int;
  expire_flag_not_in?: Int[] | Int;
  expire_flag_lt?: Int;
  expire_flag_lte?: Int;
  expire_flag_gt?: Int;
  expire_flag_gte?: Int;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  icustays_every?: IcustayWhereInput;
  icustays_some?: IcustayWhereInput;
  icustays_none?: IcustayWhereInput;
  inputevents_cv_every?: Inputevents_cvWhereInput;
  inputevents_cv_some?: Inputevents_cvWhereInput;
  inputevents_cv_none?: Inputevents_cvWhereInput;
  inputevents_mv_every?: Inputevents_mvWhereInput;
  inputevents_mv_some?: Inputevents_mvWhereInput;
  inputevents_mv_none?: Inputevents_mvWhereInput;
  labevents_every?: LabeventWhereInput;
  labevents_some?: LabeventWhereInput;
  labevents_none?: LabeventWhereInput;
  microbiologyevents_every?: MicrobiologyeventWhereInput;
  microbiologyevents_some?: MicrobiologyeventWhereInput;
  microbiologyevents_none?: MicrobiologyeventWhereInput;
  noteevents_every?: NoteeventWhereInput;
  noteevents_some?: NoteeventWhereInput;
  noteevents_none?: NoteeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  prescriptions_every?: PrescriptionWhereInput;
  prescriptions_some?: PrescriptionWhereInput;
  prescriptions_none?: PrescriptionWhereInput;
  procedureevents_mv_every?: Procedureevents_mvWhereInput;
  procedureevents_mv_some?: Procedureevents_mvWhereInput;
  procedureevents_mv_none?: Procedureevents_mvWhereInput;
  procedures_icd_every?: Procedures_icdWhereInput;
  procedures_icd_some?: Procedures_icdWhereInput;
  procedures_icd_none?: Procedures_icdWhereInput;
  services_every?: ServiceWhereInput;
  services_some?: ServiceWhereInput;
  services_none?: ServiceWhereInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  transfers_every?: TransferWhereInput;
  transfers_some?: TransferWhereInput;
  transfers_none?: TransferWhereInput;
  AND?: PatientWhereInput[] | PatientWhereInput;
  OR?: PatientWhereInput[] | PatientWhereInput;
  NOT?: PatientWhereInput[] | PatientWhereInput;
}

export interface CalloutSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CalloutWhereInput;
  AND?: CalloutSubscriptionWhereInput[] | CalloutSubscriptionWhereInput;
  OR?: CalloutSubscriptionWhereInput[] | CalloutSubscriptionWhereInput;
  NOT?: CalloutSubscriptionWhereInput[] | CalloutSubscriptionWhereInput;
}

export interface Procedures_icdUpdateManyInput {
  create?: Procedures_icdCreateInput[] | Procedures_icdCreateInput;
  update?:
    | Procedures_icdUpdateWithWhereUniqueNestedInput[]
    | Procedures_icdUpdateWithWhereUniqueNestedInput;
  upsert?:
    | Procedures_icdUpsertWithWhereUniqueNestedInput[]
    | Procedures_icdUpsertWithWhereUniqueNestedInput;
  delete?: Procedures_icdWhereUniqueInput[] | Procedures_icdWhereUniqueInput;
  connect?: Procedures_icdWhereUniqueInput[] | Procedures_icdWhereUniqueInput;
  set?: Procedures_icdWhereUniqueInput[] | Procedures_icdWhereUniqueInput;
  disconnect?:
    | Procedures_icdWhereUniqueInput[]
    | Procedures_icdWhereUniqueInput;
  deleteMany?:
    | Procedures_icdScalarWhereInput[]
    | Procedures_icdScalarWhereInput;
  updateMany?:
    | Procedures_icdUpdateManyWithWhereNestedInput[]
    | Procedures_icdUpdateManyWithWhereNestedInput;
}

export interface TransferUpdateManyMutationInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface NoteeventUpdateManyDataInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface Chartevents_14WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_14WhereInput[] | Chartevents_14WhereInput;
  OR?: Chartevents_14WhereInput[] | Chartevents_14WhereInput;
  NOT?: Chartevents_14WhereInput[] | Chartevents_14WhereInput;
}

export interface NoteeventUpdateManyWithWhereNestedInput {
  where: NoteeventScalarWhereInput;
  data: NoteeventUpdateManyDataInput;
}

export interface ServiceUpdateManyMutationInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface NoteeventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  iserror?: String;
  iserror_not?: String;
  iserror_in?: String[] | String;
  iserror_not_in?: String[] | String;
  iserror_lt?: String;
  iserror_lte?: String;
  iserror_gt?: String;
  iserror_gte?: String;
  iserror_contains?: String;
  iserror_not_contains?: String;
  iserror_starts_with?: String;
  iserror_not_starts_with?: String;
  iserror_ends_with?: String;
  iserror_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
  OR?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
  NOT?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
}

export interface Procedures_icdUpdateManyMutationInput {
  icd9_code?: String;
  seq_num?: Int;
}

export type PrescriptionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Chartevents_15WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_15WhereInput[] | Chartevents_15WhereInput;
  OR?: Chartevents_15WhereInput[] | Chartevents_15WhereInput;
  NOT?: Chartevents_15WhereInput[] | Chartevents_15WhereInput;
}

export interface NoteeventUpsertWithWhereUniqueNestedInput {
  where: NoteeventWhereUniqueInput;
  update: NoteeventUpdateDataInput;
  create: NoteeventCreateInput;
}

export interface Procedureevents_mvUpdateManyMutationInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface NoteeventUpdateDataInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface PrescriptionUpdateManyMutationInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface NoteeventUpdateWithWhereUniqueNestedInput {
  where: NoteeventWhereUniqueInput;
  data: NoteeventUpdateDataInput;
}

export interface Chartevents_16WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_16WhereInput[] | Chartevents_16WhereInput;
  OR?: Chartevents_16WhereInput[] | Chartevents_16WhereInput;
  NOT?: Chartevents_16WhereInput[] | Chartevents_16WhereInput;
}

export type Procedureevents_mvWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AdmissionUpdateManyDataInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  deathtime?: DateTimeInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  insurance?: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface NoteeventUpdateManyInput {
  create?: NoteeventCreateInput[] | NoteeventCreateInput;
  update?:
    | NoteeventUpdateWithWhereUniqueNestedInput[]
    | NoteeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | NoteeventUpsertWithWhereUniqueNestedInput[]
    | NoteeventUpsertWithWhereUniqueNestedInput;
  delete?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  connect?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  set?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  disconnect?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  deleteMany?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
  updateMany?:
    | NoteeventUpdateManyWithWhereNestedInput[]
    | NoteeventUpdateManyWithWhereNestedInput;
}

export interface AdmissionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  admission_location?: String;
  admission_location_not?: String;
  admission_location_in?: String[] | String;
  admission_location_not_in?: String[] | String;
  admission_location_lt?: String;
  admission_location_lte?: String;
  admission_location_gt?: String;
  admission_location_gte?: String;
  admission_location_contains?: String;
  admission_location_not_contains?: String;
  admission_location_starts_with?: String;
  admission_location_not_starts_with?: String;
  admission_location_ends_with?: String;
  admission_location_not_ends_with?: String;
  admission_type?: String;
  admission_type_not?: String;
  admission_type_in?: String[] | String;
  admission_type_not_in?: String[] | String;
  admission_type_lt?: String;
  admission_type_lte?: String;
  admission_type_gt?: String;
  admission_type_gte?: String;
  admission_type_contains?: String;
  admission_type_not_contains?: String;
  admission_type_starts_with?: String;
  admission_type_not_starts_with?: String;
  admission_type_ends_with?: String;
  admission_type_not_ends_with?: String;
  admittime?: DateTimeInput;
  admittime_not?: DateTimeInput;
  admittime_in?: DateTimeInput[] | DateTimeInput;
  admittime_not_in?: DateTimeInput[] | DateTimeInput;
  admittime_lt?: DateTimeInput;
  admittime_lte?: DateTimeInput;
  admittime_gt?: DateTimeInput;
  admittime_gte?: DateTimeInput;
  deathtime?: DateTimeInput;
  deathtime_not?: DateTimeInput;
  deathtime_in?: DateTimeInput[] | DateTimeInput;
  deathtime_not_in?: DateTimeInput[] | DateTimeInput;
  deathtime_lt?: DateTimeInput;
  deathtime_lte?: DateTimeInput;
  deathtime_gt?: DateTimeInput;
  deathtime_gte?: DateTimeInput;
  diagnosis?: String;
  diagnosis_not?: String;
  diagnosis_in?: String[] | String;
  diagnosis_not_in?: String[] | String;
  diagnosis_lt?: String;
  diagnosis_lte?: String;
  diagnosis_gt?: String;
  diagnosis_gte?: String;
  diagnosis_contains?: String;
  diagnosis_not_contains?: String;
  diagnosis_starts_with?: String;
  diagnosis_not_starts_with?: String;
  diagnosis_ends_with?: String;
  diagnosis_not_ends_with?: String;
  discharge_location?: String;
  discharge_location_not?: String;
  discharge_location_in?: String[] | String;
  discharge_location_not_in?: String[] | String;
  discharge_location_lt?: String;
  discharge_location_lte?: String;
  discharge_location_gt?: String;
  discharge_location_gte?: String;
  discharge_location_contains?: String;
  discharge_location_not_contains?: String;
  discharge_location_starts_with?: String;
  discharge_location_not_starts_with?: String;
  discharge_location_ends_with?: String;
  discharge_location_not_ends_with?: String;
  dischtime?: DateTimeInput;
  dischtime_not?: DateTimeInput;
  dischtime_in?: DateTimeInput[] | DateTimeInput;
  dischtime_not_in?: DateTimeInput[] | DateTimeInput;
  dischtime_lt?: DateTimeInput;
  dischtime_lte?: DateTimeInput;
  dischtime_gt?: DateTimeInput;
  dischtime_gte?: DateTimeInput;
  edouttime?: DateTimeInput;
  edouttime_not?: DateTimeInput;
  edouttime_in?: DateTimeInput[] | DateTimeInput;
  edouttime_not_in?: DateTimeInput[] | DateTimeInput;
  edouttime_lt?: DateTimeInput;
  edouttime_lte?: DateTimeInput;
  edouttime_gt?: DateTimeInput;
  edouttime_gte?: DateTimeInput;
  edregtime?: DateTimeInput;
  edregtime_not?: DateTimeInput;
  edregtime_in?: DateTimeInput[] | DateTimeInput;
  edregtime_not_in?: DateTimeInput[] | DateTimeInput;
  edregtime_lt?: DateTimeInput;
  edregtime_lte?: DateTimeInput;
  edregtime_gt?: DateTimeInput;
  edregtime_gte?: DateTimeInput;
  ethnicity?: String;
  ethnicity_not?: String;
  ethnicity_in?: String[] | String;
  ethnicity_not_in?: String[] | String;
  ethnicity_lt?: String;
  ethnicity_lte?: String;
  ethnicity_gt?: String;
  ethnicity_gte?: String;
  ethnicity_contains?: String;
  ethnicity_not_contains?: String;
  ethnicity_starts_with?: String;
  ethnicity_not_starts_with?: String;
  ethnicity_ends_with?: String;
  ethnicity_not_ends_with?: String;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  has_chartevents_data?: Int;
  has_chartevents_data_not?: Int;
  has_chartevents_data_in?: Int[] | Int;
  has_chartevents_data_not_in?: Int[] | Int;
  has_chartevents_data_lt?: Int;
  has_chartevents_data_lte?: Int;
  has_chartevents_data_gt?: Int;
  has_chartevents_data_gte?: Int;
  hospital_expire_flag?: Int;
  hospital_expire_flag_not?: Int;
  hospital_expire_flag_in?: Int[] | Int;
  hospital_expire_flag_not_in?: Int[] | Int;
  hospital_expire_flag_lt?: Int;
  hospital_expire_flag_lte?: Int;
  hospital_expire_flag_gt?: Int;
  hospital_expire_flag_gte?: Int;
  insurance?: String;
  insurance_not?: String;
  insurance_in?: String[] | String;
  insurance_not_in?: String[] | String;
  insurance_lt?: String;
  insurance_lte?: String;
  insurance_gt?: String;
  insurance_gte?: String;
  insurance_contains?: String;
  insurance_not_contains?: String;
  insurance_starts_with?: String;
  insurance_not_starts_with?: String;
  insurance_ends_with?: String;
  insurance_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  marital_status?: String;
  marital_status_not?: String;
  marital_status_in?: String[] | String;
  marital_status_not_in?: String[] | String;
  marital_status_lt?: String;
  marital_status_lte?: String;
  marital_status_gt?: String;
  marital_status_gte?: String;
  marital_status_contains?: String;
  marital_status_not_contains?: String;
  marital_status_starts_with?: String;
  marital_status_not_starts_with?: String;
  marital_status_ends_with?: String;
  marital_status_not_ends_with?: String;
  religion?: String;
  religion_not?: String;
  religion_in?: String[] | String;
  religion_not_in?: String[] | String;
  religion_lt?: String;
  religion_lte?: String;
  religion_gt?: String;
  religion_gte?: String;
  religion_contains?: String;
  religion_not_contains?: String;
  religion_starts_with?: String;
  religion_not_starts_with?: String;
  religion_ends_with?: String;
  religion_not_ends_with?: String;
  AND?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
  OR?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
  NOT?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
}

export interface MicrobiologyeventUpdateManyDataInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface Chartevents_17WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_17WhereInput[] | Chartevents_17WhereInput;
  OR?: Chartevents_17WhereInput[] | Chartevents_17WhereInput;
  NOT?: Chartevents_17WhereInput[] | Chartevents_17WhereInput;
}

export interface MicrobiologyeventUpdateManyWithWhereNestedInput {
  where: MicrobiologyeventScalarWhereInput;
  data: MicrobiologyeventUpdateManyDataInput;
}

export interface AdmissionUpdateDataInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  callout?: CalloutUpdateManyInput;
  chartevents?: CharteventUpdateManyInput;
  cptevents?: CpteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  deathtime?: DateTimeInput;
  diagnoses_icd?: Diagnoses_icdUpdateManyInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  drgcodes?: DrgcodeUpdateManyInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  icustays?: IcustayUpdateManyInput;
  inputevents_cv?: Inputevents_cvUpdateManyInput;
  inputevents_mv?: Inputevents_mvUpdateManyInput;
  insurance?: String;
  labevents?: LabeventUpdateManyInput;
  language?: String;
  marital_status?: String;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: Procedureevents_mvUpdateManyInput;
  procedures_icd?: Procedures_icdUpdateManyInput;
  religion?: String;
  services?: ServiceUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export type Procedures_icdWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AdmissionUpdateManyInput {
  create?: AdmissionCreateInput[] | AdmissionCreateInput;
  update?:
    | AdmissionUpdateWithWhereUniqueNestedInput[]
    | AdmissionUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AdmissionUpsertWithWhereUniqueNestedInput[]
    | AdmissionUpsertWithWhereUniqueNestedInput;
  delete?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  connect?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  set?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  disconnect?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  deleteMany?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
  updateMany?:
    | AdmissionUpdateManyWithWhereNestedInput[]
    | AdmissionUpdateManyWithWhereNestedInput;
}

export interface MicrobiologyeventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  ab_name?: String;
  ab_name_not?: String;
  ab_name_in?: String[] | String;
  ab_name_not_in?: String[] | String;
  ab_name_lt?: String;
  ab_name_lte?: String;
  ab_name_gt?: String;
  ab_name_gte?: String;
  ab_name_contains?: String;
  ab_name_not_contains?: String;
  ab_name_starts_with?: String;
  ab_name_not_starts_with?: String;
  ab_name_ends_with?: String;
  ab_name_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  dilution_comparison?: String;
  dilution_comparison_not?: String;
  dilution_comparison_in?: String[] | String;
  dilution_comparison_not_in?: String[] | String;
  dilution_comparison_lt?: String;
  dilution_comparison_lte?: String;
  dilution_comparison_gt?: String;
  dilution_comparison_gte?: String;
  dilution_comparison_contains?: String;
  dilution_comparison_not_contains?: String;
  dilution_comparison_starts_with?: String;
  dilution_comparison_not_starts_with?: String;
  dilution_comparison_ends_with?: String;
  dilution_comparison_not_ends_with?: String;
  dilution_text?: String;
  dilution_text_not?: String;
  dilution_text_in?: String[] | String;
  dilution_text_not_in?: String[] | String;
  dilution_text_lt?: String;
  dilution_text_lte?: String;
  dilution_text_gt?: String;
  dilution_text_gte?: String;
  dilution_text_contains?: String;
  dilution_text_not_contains?: String;
  dilution_text_starts_with?: String;
  dilution_text_not_starts_with?: String;
  dilution_text_ends_with?: String;
  dilution_text_not_ends_with?: String;
  dilution_value?: Float;
  dilution_value_not?: Float;
  dilution_value_in?: Float[] | Float;
  dilution_value_not_in?: Float[] | Float;
  dilution_value_lt?: Float;
  dilution_value_lte?: Float;
  dilution_value_gt?: Float;
  dilution_value_gte?: Float;
  interpretation?: String;
  interpretation_not?: String;
  interpretation_in?: String[] | String;
  interpretation_not_in?: String[] | String;
  interpretation_lt?: String;
  interpretation_lte?: String;
  interpretation_gt?: String;
  interpretation_gte?: String;
  interpretation_contains?: String;
  interpretation_not_contains?: String;
  interpretation_starts_with?: String;
  interpretation_not_starts_with?: String;
  interpretation_ends_with?: String;
  interpretation_not_ends_with?: String;
  isolate_num?: Int;
  isolate_num_not?: Int;
  isolate_num_in?: Int[] | Int;
  isolate_num_not_in?: Int[] | Int;
  isolate_num_lt?: Int;
  isolate_num_lte?: Int;
  isolate_num_gt?: Int;
  isolate_num_gte?: Int;
  org_name?: String;
  org_name_not?: String;
  org_name_in?: String[] | String;
  org_name_not_in?: String[] | String;
  org_name_lt?: String;
  org_name_lte?: String;
  org_name_gt?: String;
  org_name_gte?: String;
  org_name_contains?: String;
  org_name_not_contains?: String;
  org_name_starts_with?: String;
  org_name_not_starts_with?: String;
  org_name_ends_with?: String;
  org_name_not_ends_with?: String;
  spec_type_desc?: String;
  spec_type_desc_not?: String;
  spec_type_desc_in?: String[] | String;
  spec_type_desc_not_in?: String[] | String;
  spec_type_desc_lt?: String;
  spec_type_desc_lte?: String;
  spec_type_desc_gt?: String;
  spec_type_desc_gte?: String;
  spec_type_desc_contains?: String;
  spec_type_desc_not_contains?: String;
  spec_type_desc_starts_with?: String;
  spec_type_desc_not_starts_with?: String;
  spec_type_desc_ends_with?: String;
  spec_type_desc_not_ends_with?: String;
  AND?: MicrobiologyeventScalarWhereInput[] | MicrobiologyeventScalarWhereInput;
  OR?: MicrobiologyeventScalarWhereInput[] | MicrobiologyeventScalarWhereInput;
  NOT?: MicrobiologyeventScalarWhereInput[] | MicrobiologyeventScalarWhereInput;
}

export interface Chartevents_2WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_2WhereInput[] | Chartevents_2WhereInput;
  OR?: Chartevents_2WhereInput[] | Chartevents_2WhereInput;
  NOT?: Chartevents_2WhereInput[] | Chartevents_2WhereInput;
}

export interface MicrobiologyeventUpsertWithWhereUniqueNestedInput {
  where: MicrobiologyeventWhereUniqueInput;
  update: MicrobiologyeventUpdateDataInput;
  create: MicrobiologyeventCreateInput;
}

export interface PatientCreateInput {
  admissions?: AdmissionCreateManyInput;
  callout?: CalloutCreateManyInput;
  chartevents?: CharteventCreateManyInput;
  cptevents?: CpteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  diagnoses_icd?: Diagnoses_icdCreateManyInput;
  dob: DateTimeInput;
  dod?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  drgcodes?: DrgcodeCreateManyInput;
  expire_flag: Int;
  gender: String;
  icustays?: IcustayCreateManyInput;
  inputevents_cv?: Inputevents_cvCreateManyInput;
  inputevents_mv?: Inputevents_mvCreateManyInput;
  labevents?: LabeventCreateManyInput;
  microbiologyevents?: MicrobiologyeventCreateManyInput;
  noteevents?: NoteeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  prescriptions?: PrescriptionCreateManyInput;
  procedureevents_mv?: Procedureevents_mvCreateManyInput;
  procedures_icd?: Procedures_icdCreateManyInput;
  services?: ServiceCreateManyInput;
  subject_id: Int;
  transfers?: TransferCreateManyInput;
}

export interface MicrobiologyeventUpdateDataInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface OutputeventUpdateInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Chartevents_3WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_3WhereInput[] | Chartevents_3WhereInput;
  OR?: Chartevents_3WhereInput[] | Chartevents_3WhereInput;
  NOT?: Chartevents_3WhereInput[] | Chartevents_3WhereInput;
}

export interface MicrobiologyeventUpdateWithWhereUniqueNestedInput {
  where: MicrobiologyeventWhereUniqueInput;
  data: MicrobiologyeventUpdateDataInput;
}

export interface NoteeventUpdateInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface MicrobiologyeventUpdateManyInput {
  create?: MicrobiologyeventCreateInput[] | MicrobiologyeventCreateInput;
  update?:
    | MicrobiologyeventUpdateWithWhereUniqueNestedInput[]
    | MicrobiologyeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | MicrobiologyeventUpsertWithWhereUniqueNestedInput[]
    | MicrobiologyeventUpsertWithWhereUniqueNestedInput;
  delete?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
  connect?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
  set?: MicrobiologyeventWhereUniqueInput[] | MicrobiologyeventWhereUniqueInput;
  disconnect?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
  deleteMany?:
    | MicrobiologyeventScalarWhereInput[]
    | MicrobiologyeventScalarWhereInput;
  updateMany?:
    | MicrobiologyeventUpdateManyWithWhereNestedInput[]
    | MicrobiologyeventUpdateManyWithWhereNestedInput;
}

export interface MicrobiologyeventUpdateInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface LabeventUpdateManyDataInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface Chartevents_4WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_4WhereInput[] | Chartevents_4WhereInput;
  OR?: Chartevents_4WhereInput[] | Chartevents_4WhereInput;
  NOT?: Chartevents_4WhereInput[] | Chartevents_4WhereInput;
}

export type TransferWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Inputevents_mvUpdateManyMutationInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface LabeventUpdateManyWithWhereNestedInput {
  where: LabeventScalarWhereInput;
  data: LabeventUpdateManyDataInput;
}

export interface Inputevents_cvUpdateManyMutationInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface LabeventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  flag?: String;
  flag_not?: String;
  flag_in?: String[] | String;
  flag_not_in?: String[] | String;
  flag_lt?: String;
  flag_lte?: String;
  flag_gt?: String;
  flag_gte?: String;
  flag_contains?: String;
  flag_not_contains?: String;
  flag_starts_with?: String;
  flag_not_starts_with?: String;
  flag_ends_with?: String;
  flag_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
  OR?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
  NOT?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
}

export interface Chartevents_5WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_5WhereInput[] | Chartevents_5WhereInput;
  OR?: Chartevents_5WhereInput[] | Chartevents_5WhereInput;
  NOT?: Chartevents_5WhereInput[] | Chartevents_5WhereInput;
}

export interface LabeventUpsertWithWhereUniqueNestedInput {
  where: LabeventWhereUniqueInput;
  update: LabeventUpdateDataInput;
  create: LabeventCreateInput;
}

export interface IcustayUpdateManyMutationInput {
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outtime?: DateTimeInput;
}

export interface DrgcodeUpdateManyMutationInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface Chartevents_6WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_6WhereInput[] | Chartevents_6WhereInput;
  OR?: Chartevents_6WhereInput[] | Chartevents_6WhereInput;
  NOT?: Chartevents_6WhereInput[] | Chartevents_6WhereInput;
}

export interface AdmissionCreateInput {
  admission_location: String;
  admission_type: String;
  admittime: DateTimeInput;
  callout?: CalloutCreateManyInput;
  chartevents?: CharteventCreateManyInput;
  cptevents?: CpteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  deathtime?: DateTimeInput;
  diagnoses_icd?: Diagnoses_icdCreateManyInput;
  diagnosis?: String;
  discharge_location: String;
  dischtime: DateTimeInput;
  drgcodes?: DrgcodeCreateManyInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity: String;
  hadm_id: Int;
  has_chartevents_data: Int;
  hospital_expire_flag?: Int;
  icustays?: IcustayCreateManyInput;
  inputevents_cv?: Inputevents_cvCreateManyInput;
  inputevents_mv?: Inputevents_mvCreateManyInput;
  insurance: String;
  labevents?: LabeventCreateManyInput;
  language?: String;
  marital_status?: String;
  microbiologyevents?: MicrobiologyeventCreateManyInput;
  noteevents?: NoteeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  prescriptions?: PrescriptionCreateManyInput;
  procedureevents_mv?: Procedureevents_mvCreateManyInput;
  procedures_icd?: Procedures_icdCreateManyInput;
  religion?: String;
  services?: ServiceCreateManyInput;
  transfers?: TransferCreateManyInput;
}

export interface Diagnoses_icdUpdateInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface CalloutCreateManyInput {
  create?: CalloutCreateInput[] | CalloutCreateInput;
  connect?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
}

export interface DatetimeeventUpdateInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface CalloutCreateInput {
  acknowledge_status: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome: String;
  callout_service: String;
  callout_status: String;
  callout_wardid?: Int;
  createtime: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime: DateTimeInput;
  request_cdiff: Int;
  request_mrsa: Int;
  request_resp: Int;
  request_tele: Int;
  request_vre: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime: DateTimeInput;
}

export interface Chartevents_7WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_7WhereInput[] | Chartevents_7WhereInput;
  OR?: Chartevents_7WhereInput[] | Chartevents_7WhereInput;
  NOT?: Chartevents_7WhereInput[] | Chartevents_7WhereInput;
}

export interface CharteventCreateManyInput {
  create?: CharteventCreateInput[] | CharteventCreateInput;
  connect?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
}

export interface D_labitemUpdateInput {
  category?: String;
  fluid?: String;
  itemid?: Int;
  label?: String;
  labevents?: LabeventUpdateManyInput;
  loinc_code?: String;
}

export interface CharteventCreateInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface D_itemUpdateManyMutationInput {
  abbreviation?: String;
  category?: String;
  conceptid?: Int;
  dbsource?: String;
  itemid?: Int;
  label?: String;
  linksto?: String;
  param_type?: String;
  unitname?: String;
}

export interface CpteventCreateManyInput {
  create?: CpteventCreateInput[] | CpteventCreateInput;
  connect?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
}

export interface Chartevents_8WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_8WhereInput[] | Chartevents_8WhereInput;
  OR?: Chartevents_8WhereInput[] | Chartevents_8WhereInput;
  NOT?: Chartevents_8WhereInput[] | Chartevents_8WhereInput;
}

export interface CpteventCreateInput {
  chartdate?: DateTimeInput;
  costcenter: String;
  cpt_cd: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface D_icd_procedureUpdateManyMutationInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface DatetimeeventCreateManyInput {
  create?: DatetimeeventCreateInput[] | DatetimeeventCreateInput;
  connect?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
}

export interface D_icd_procedureCreateInput {
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface DatetimeeventCreateInput {
  charttime: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime: DateTimeInput;
  value?: DateTimeInput;
  valueuom: String;
  warning?: Int;
}

export interface Chartevents_9WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents_9WhereInput[] | Chartevents_9WhereInput;
  OR?: Chartevents_9WhereInput[] | Chartevents_9WhereInput;
  NOT?: Chartevents_9WhereInput[] | Chartevents_9WhereInput;
}

export interface Diagnoses_icdCreateManyInput {
  create?: Diagnoses_icdCreateInput[] | Diagnoses_icdCreateInput;
  connect?: Diagnoses_icdWhereUniqueInput[] | Diagnoses_icdWhereUniqueInput;
}

export interface D_icd_diagnosisCreateInput {
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface Diagnoses_icdCreateInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface D_cptUpdateInput {
  category?: Int;
  codesuffix?: String;
  maxcodeinsubsection?: Int;
  mincodeinsubsection?: Int;
  sectionheader?: String;
  sectionrange?: String;
  subsectionheader?: String;
  subsectionrange?: String;
}

export interface DrgcodeCreateManyInput {
  create?: DrgcodeCreateInput[] | DrgcodeCreateInput;
  connect?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
}

export type CpteventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DrgcodeCreateInput {
  description?: String;
  drg_code: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type: String;
}

export interface CpteventUpdateInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface IcustayCreateManyInput {
  create?: IcustayCreateInput[] | IcustayCreateInput;
  connect?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
}

export type D_cptWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  subsectionrange?: String;
}>;

export interface IcustayCreateInput {
  chartevents?: CharteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  dbsource: String;
  first_careunit: String;
  first_wardid: Int;
  icustay_id: Int;
  inputevents_cv?: Inputevents_cvCreateManyInput;
  inputevents_mv?: Inputevents_mvCreateManyInput;
  intime: DateTimeInput;
  last_careunit: String;
  last_wardid: Int;
  los?: Float;
  outputevents?: OutputeventCreateManyInput;
  outtime?: DateTimeInput;
  prescriptions?: PrescriptionCreateManyInput;
  procedureevents_mv?: Procedureevents_mvCreateManyInput;
  transfers?: TransferCreateManyInput;
}

export interface D_cptWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  category?: Int;
  category_not?: Int;
  category_in?: Int[] | Int;
  category_not_in?: Int[] | Int;
  category_lt?: Int;
  category_lte?: Int;
  category_gt?: Int;
  category_gte?: Int;
  codesuffix?: String;
  codesuffix_not?: String;
  codesuffix_in?: String[] | String;
  codesuffix_not_in?: String[] | String;
  codesuffix_lt?: String;
  codesuffix_lte?: String;
  codesuffix_gt?: String;
  codesuffix_gte?: String;
  codesuffix_contains?: String;
  codesuffix_not_contains?: String;
  codesuffix_starts_with?: String;
  codesuffix_not_starts_with?: String;
  codesuffix_ends_with?: String;
  codesuffix_not_ends_with?: String;
  maxcodeinsubsection?: Int;
  maxcodeinsubsection_not?: Int;
  maxcodeinsubsection_in?: Int[] | Int;
  maxcodeinsubsection_not_in?: Int[] | Int;
  maxcodeinsubsection_lt?: Int;
  maxcodeinsubsection_lte?: Int;
  maxcodeinsubsection_gt?: Int;
  maxcodeinsubsection_gte?: Int;
  mincodeinsubsection?: Int;
  mincodeinsubsection_not?: Int;
  mincodeinsubsection_in?: Int[] | Int;
  mincodeinsubsection_not_in?: Int[] | Int;
  mincodeinsubsection_lt?: Int;
  mincodeinsubsection_lte?: Int;
  mincodeinsubsection_gt?: Int;
  mincodeinsubsection_gte?: Int;
  sectionheader?: String;
  sectionheader_not?: String;
  sectionheader_in?: String[] | String;
  sectionheader_not_in?: String[] | String;
  sectionheader_lt?: String;
  sectionheader_lte?: String;
  sectionheader_gt?: String;
  sectionheader_gte?: String;
  sectionheader_contains?: String;
  sectionheader_not_contains?: String;
  sectionheader_starts_with?: String;
  sectionheader_not_starts_with?: String;
  sectionheader_ends_with?: String;
  sectionheader_not_ends_with?: String;
  sectionrange?: String;
  sectionrange_not?: String;
  sectionrange_in?: String[] | String;
  sectionrange_not_in?: String[] | String;
  sectionrange_lt?: String;
  sectionrange_lte?: String;
  sectionrange_gt?: String;
  sectionrange_gte?: String;
  sectionrange_contains?: String;
  sectionrange_not_contains?: String;
  sectionrange_starts_with?: String;
  sectionrange_not_starts_with?: String;
  sectionrange_ends_with?: String;
  sectionrange_not_ends_with?: String;
  subsectionheader?: String;
  subsectionheader_not?: String;
  subsectionheader_in?: String[] | String;
  subsectionheader_not_in?: String[] | String;
  subsectionheader_lt?: String;
  subsectionheader_lte?: String;
  subsectionheader_gt?: String;
  subsectionheader_gte?: String;
  subsectionheader_contains?: String;
  subsectionheader_not_contains?: String;
  subsectionheader_starts_with?: String;
  subsectionheader_not_starts_with?: String;
  subsectionheader_ends_with?: String;
  subsectionheader_not_ends_with?: String;
  subsectionrange?: String;
  subsectionrange_not?: String;
  subsectionrange_in?: String[] | String;
  subsectionrange_not_in?: String[] | String;
  subsectionrange_lt?: String;
  subsectionrange_lte?: String;
  subsectionrange_gt?: String;
  subsectionrange_gte?: String;
  subsectionrange_contains?: String;
  subsectionrange_not_contains?: String;
  subsectionrange_starts_with?: String;
  subsectionrange_not_starts_with?: String;
  subsectionrange_ends_with?: String;
  subsectionrange_not_ends_with?: String;
  AND?: D_cptWhereInput[] | D_cptWhereInput;
  OR?: D_cptWhereInput[] | D_cptWhereInput;
  NOT?: D_cptWhereInput[] | D_cptWhereInput;
}

export interface Inputevents_cvCreateManyInput {
  create?: Inputevents_cvCreateInput[] | Inputevents_cvCreateInput;
  connect?: Inputevents_cvWhereUniqueInput[] | Inputevents_cvWhereUniqueInput;
}

export interface Chartevents_8UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Inputevents_cvCreateInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface Chartevents_7UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Inputevents_mvCreateManyInput {
  create?: Inputevents_mvCreateInput[] | Inputevents_mvCreateInput;
  connect?: Inputevents_mvWhereUniqueInput[] | Inputevents_mvWhereUniqueInput;
}

export interface Chartevents_7CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Inputevents_mvCreateInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface Chartevents_6UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventCreateManyInput {
  create?: OutputeventCreateInput[] | OutputeventCreateInput;
  connect?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
}

export interface Chartevents_5UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventCreateInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export type D_icd_procedureWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  icd9_code?: String;
}>;

export interface PrescriptionCreateManyInput {
  create?: PrescriptionCreateInput[] | PrescriptionCreateInput;
  connect?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
}

export interface D_icd_procedureWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  long_title?: String;
  long_title_not?: String;
  long_title_in?: String[] | String;
  long_title_not_in?: String[] | String;
  long_title_lt?: String;
  long_title_lte?: String;
  long_title_gt?: String;
  long_title_gte?: String;
  long_title_contains?: String;
  long_title_not_contains?: String;
  long_title_starts_with?: String;
  long_title_not_starts_with?: String;
  long_title_ends_with?: String;
  long_title_not_ends_with?: String;
  short_title?: String;
  short_title_not?: String;
  short_title_in?: String[] | String;
  short_title_not_in?: String[] | String;
  short_title_lt?: String;
  short_title_lte?: String;
  short_title_gt?: String;
  short_title_gte?: String;
  short_title_contains?: String;
  short_title_not_contains?: String;
  short_title_starts_with?: String;
  short_title_not_starts_with?: String;
  short_title_ends_with?: String;
  short_title_not_ends_with?: String;
  AND?: D_icd_procedureWhereInput[] | D_icd_procedureWhereInput;
  OR?: D_icd_procedureWhereInput[] | D_icd_procedureWhereInput;
  NOT?: D_icd_procedureWhereInput[] | D_icd_procedureWhereInput;
}

export interface PrescriptionCreateInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface Chartevents_4CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedureevents_mvCreateManyInput {
  create?: Procedureevents_mvCreateInput[] | Procedureevents_mvCreateInput;
  connect?:
    | Procedureevents_mvWhereUniqueInput[]
    | Procedureevents_mvWhereUniqueInput;
}

export interface Chartevents_3CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedureevents_mvCreateInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface Chartevents_2UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface TransferCreateManyInput {
  create?: TransferCreateInput[] | TransferCreateInput;
  connect?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
}

export interface Chartevents_2CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface TransferCreateInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface Chartevents_17CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface LabeventCreateManyInput {
  create?: LabeventCreateInput[] | LabeventCreateInput;
  connect?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
}

export type D_labitemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  itemid?: Int;
}>;

export interface LabeventCreateInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface D_labitemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  fluid?: String;
  fluid_not?: String;
  fluid_in?: String[] | String;
  fluid_not_in?: String[] | String;
  fluid_lt?: String;
  fluid_lte?: String;
  fluid_gt?: String;
  fluid_gte?: String;
  fluid_contains?: String;
  fluid_not_contains?: String;
  fluid_starts_with?: String;
  fluid_not_starts_with?: String;
  fluid_ends_with?: String;
  fluid_not_ends_with?: String;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  labevents_every?: LabeventWhereInput;
  labevents_some?: LabeventWhereInput;
  labevents_none?: LabeventWhereInput;
  loinc_code?: String;
  loinc_code_not?: String;
  loinc_code_in?: String[] | String;
  loinc_code_not_in?: String[] | String;
  loinc_code_lt?: String;
  loinc_code_lte?: String;
  loinc_code_gt?: String;
  loinc_code_gte?: String;
  loinc_code_contains?: String;
  loinc_code_not_contains?: String;
  loinc_code_starts_with?: String;
  loinc_code_not_starts_with?: String;
  loinc_code_ends_with?: String;
  loinc_code_not_ends_with?: String;
  AND?: D_labitemWhereInput[] | D_labitemWhereInput;
  OR?: D_labitemWhereInput[] | D_labitemWhereInput;
  NOT?: D_labitemWhereInput[] | D_labitemWhereInput;
}

export interface MicrobiologyeventCreateManyInput {
  create?: MicrobiologyeventCreateInput[] | MicrobiologyeventCreateInput;
  connect?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
}

export interface Chartevents_15CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface MicrobiologyeventCreateInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface Chartevents_14CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface NoteeventCreateManyInput {
  create?: NoteeventCreateInput[] | NoteeventCreateInput;
  connect?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
}

export interface Chartevents_13UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface NoteeventCreateInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface Chartevents_12UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedures_icdCreateManyInput {
  create?: Procedures_icdCreateInput[] | Procedures_icdCreateInput;
  connect?: Procedures_icdWhereUniqueInput[] | Procedures_icdWhereUniqueInput;
}

export interface Chartevents_12CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedures_icdCreateInput {
  icd9_code: String;
  seq_num: Int;
}

export interface Chartevents_11CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ServiceCreateManyInput {
  create?: ServiceCreateInput[] | ServiceCreateInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
}

export interface Chartevents_10UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ServiceCreateInput {
  curr_service?: String;
  prev_service?: String;
  transfertime: DateTimeInput;
}

export interface TransferSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TransferWhereInput;
  AND?: TransferSubscriptionWhereInput[] | TransferSubscriptionWhereInput;
  OR?: TransferSubscriptionWhereInput[] | TransferSubscriptionWhereInput;
  NOT?: TransferSubscriptionWhereInput[] | TransferSubscriptionWhereInput;
}

export interface AdmissionUpdateInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  callout?: CalloutUpdateManyInput;
  chartevents?: CharteventUpdateManyInput;
  cptevents?: CpteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  deathtime?: DateTimeInput;
  diagnoses_icd?: Diagnoses_icdUpdateManyInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  drgcodes?: DrgcodeUpdateManyInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  icustays?: IcustayUpdateManyInput;
  inputevents_cv?: Inputevents_cvUpdateManyInput;
  inputevents_mv?: Inputevents_mvUpdateManyInput;
  insurance?: String;
  labevents?: LabeventUpdateManyInput;
  language?: String;
  marital_status?: String;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: Procedureevents_mvUpdateManyInput;
  procedures_icd?: Procedures_icdUpdateManyInput;
  religion?: String;
  services?: ServiceUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export interface Procedureevents_mvSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Procedureevents_mvWhereInput;
  AND?:
    | Procedureevents_mvSubscriptionWhereInput[]
    | Procedureevents_mvSubscriptionWhereInput;
  OR?:
    | Procedureevents_mvSubscriptionWhereInput[]
    | Procedureevents_mvSubscriptionWhereInput;
  NOT?:
    | Procedureevents_mvSubscriptionWhereInput[]
    | Procedureevents_mvSubscriptionWhereInput;
}

export interface CalloutUpdateManyInput {
  create?: CalloutCreateInput[] | CalloutCreateInput;
  update?:
    | CalloutUpdateWithWhereUniqueNestedInput[]
    | CalloutUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CalloutUpsertWithWhereUniqueNestedInput[]
    | CalloutUpsertWithWhereUniqueNestedInput;
  delete?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  connect?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  set?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  disconnect?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  deleteMany?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
  updateMany?:
    | CalloutUpdateManyWithWhereNestedInput[]
    | CalloutUpdateManyWithWhereNestedInput;
}

export interface ServiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  curr_service?: String;
  curr_service_not?: String;
  curr_service_in?: String[] | String;
  curr_service_not_in?: String[] | String;
  curr_service_lt?: String;
  curr_service_lte?: String;
  curr_service_gt?: String;
  curr_service_gte?: String;
  curr_service_contains?: String;
  curr_service_not_contains?: String;
  curr_service_starts_with?: String;
  curr_service_not_starts_with?: String;
  curr_service_ends_with?: String;
  curr_service_not_ends_with?: String;
  prev_service?: String;
  prev_service_not?: String;
  prev_service_in?: String[] | String;
  prev_service_not_in?: String[] | String;
  prev_service_lt?: String;
  prev_service_lte?: String;
  prev_service_gt?: String;
  prev_service_gte?: String;
  prev_service_contains?: String;
  prev_service_not_contains?: String;
  prev_service_starts_with?: String;
  prev_service_not_starts_with?: String;
  prev_service_ends_with?: String;
  prev_service_not_ends_with?: String;
  transfertime?: DateTimeInput;
  transfertime_not?: DateTimeInput;
  transfertime_in?: DateTimeInput[] | DateTimeInput;
  transfertime_not_in?: DateTimeInput[] | DateTimeInput;
  transfertime_lt?: DateTimeInput;
  transfertime_lte?: DateTimeInput;
  transfertime_gt?: DateTimeInput;
  transfertime_gte?: DateTimeInput;
  AND?: ServiceWhereInput[] | ServiceWhereInput;
  OR?: ServiceWhereInput[] | ServiceWhereInput;
  NOT?: ServiceWhereInput[] | ServiceWhereInput;
}

export interface CalloutUpdateWithWhereUniqueNestedInput {
  where: CalloutWhereUniqueInput;
  data: CalloutUpdateDataInput;
}

export interface MicrobiologyeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MicrobiologyeventWhereInput;
  AND?:
    | MicrobiologyeventSubscriptionWhereInput[]
    | MicrobiologyeventSubscriptionWhereInput;
  OR?:
    | MicrobiologyeventSubscriptionWhereInput[]
    | MicrobiologyeventSubscriptionWhereInput;
  NOT?:
    | MicrobiologyeventSubscriptionWhereInput[]
    | MicrobiologyeventSubscriptionWhereInput;
}

export interface CalloutUpdateDataInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface IcustaySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IcustayWhereInput;
  AND?: IcustaySubscriptionWhereInput[] | IcustaySubscriptionWhereInput;
  OR?: IcustaySubscriptionWhereInput[] | IcustaySubscriptionWhereInput;
  NOT?: IcustaySubscriptionWhereInput[] | IcustaySubscriptionWhereInput;
}

export interface CalloutUpsertWithWhereUniqueNestedInput {
  where: CalloutWhereUniqueInput;
  update: CalloutUpdateDataInput;
  create: CalloutCreateInput;
}

export interface DatetimeeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DatetimeeventWhereInput;
  AND?:
    | DatetimeeventSubscriptionWhereInput[]
    | DatetimeeventSubscriptionWhereInput;
  OR?:
    | DatetimeeventSubscriptionWhereInput[]
    | DatetimeeventSubscriptionWhereInput;
  NOT?:
    | DatetimeeventSubscriptionWhereInput[]
    | DatetimeeventSubscriptionWhereInput;
}

export interface CalloutScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  acknowledge_status?: String;
  acknowledge_status_not?: String;
  acknowledge_status_in?: String[] | String;
  acknowledge_status_not_in?: String[] | String;
  acknowledge_status_lt?: String;
  acknowledge_status_lte?: String;
  acknowledge_status_gt?: String;
  acknowledge_status_gte?: String;
  acknowledge_status_contains?: String;
  acknowledge_status_not_contains?: String;
  acknowledge_status_starts_with?: String;
  acknowledge_status_not_starts_with?: String;
  acknowledge_status_ends_with?: String;
  acknowledge_status_not_ends_with?: String;
  acknowledgetime?: DateTimeInput;
  acknowledgetime_not?: DateTimeInput;
  acknowledgetime_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_not_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_lt?: DateTimeInput;
  acknowledgetime_lte?: DateTimeInput;
  acknowledgetime_gt?: DateTimeInput;
  acknowledgetime_gte?: DateTimeInput;
  callout_outcome?: String;
  callout_outcome_not?: String;
  callout_outcome_in?: String[] | String;
  callout_outcome_not_in?: String[] | String;
  callout_outcome_lt?: String;
  callout_outcome_lte?: String;
  callout_outcome_gt?: String;
  callout_outcome_gte?: String;
  callout_outcome_contains?: String;
  callout_outcome_not_contains?: String;
  callout_outcome_starts_with?: String;
  callout_outcome_not_starts_with?: String;
  callout_outcome_ends_with?: String;
  callout_outcome_not_ends_with?: String;
  callout_service?: String;
  callout_service_not?: String;
  callout_service_in?: String[] | String;
  callout_service_not_in?: String[] | String;
  callout_service_lt?: String;
  callout_service_lte?: String;
  callout_service_gt?: String;
  callout_service_gte?: String;
  callout_service_contains?: String;
  callout_service_not_contains?: String;
  callout_service_starts_with?: String;
  callout_service_not_starts_with?: String;
  callout_service_ends_with?: String;
  callout_service_not_ends_with?: String;
  callout_status?: String;
  callout_status_not?: String;
  callout_status_in?: String[] | String;
  callout_status_not_in?: String[] | String;
  callout_status_lt?: String;
  callout_status_lte?: String;
  callout_status_gt?: String;
  callout_status_gte?: String;
  callout_status_contains?: String;
  callout_status_not_contains?: String;
  callout_status_starts_with?: String;
  callout_status_not_starts_with?: String;
  callout_status_ends_with?: String;
  callout_status_not_ends_with?: String;
  callout_wardid?: Int;
  callout_wardid_not?: Int;
  callout_wardid_in?: Int[] | Int;
  callout_wardid_not_in?: Int[] | Int;
  callout_wardid_lt?: Int;
  callout_wardid_lte?: Int;
  callout_wardid_gt?: Int;
  callout_wardid_gte?: Int;
  createtime?: DateTimeInput;
  createtime_not?: DateTimeInput;
  createtime_in?: DateTimeInput[] | DateTimeInput;
  createtime_not_in?: DateTimeInput[] | DateTimeInput;
  createtime_lt?: DateTimeInput;
  createtime_lte?: DateTimeInput;
  createtime_gt?: DateTimeInput;
  createtime_gte?: DateTimeInput;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  currentreservationtime?: DateTimeInput;
  currentreservationtime_not?: DateTimeInput;
  currentreservationtime_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_lt?: DateTimeInput;
  currentreservationtime_lte?: DateTimeInput;
  currentreservationtime_gt?: DateTimeInput;
  currentreservationtime_gte?: DateTimeInput;
  discharge_wardid?: Int;
  discharge_wardid_not?: Int;
  discharge_wardid_in?: Int[] | Int;
  discharge_wardid_not_in?: Int[] | Int;
  discharge_wardid_lt?: Int;
  discharge_wardid_lte?: Int;
  discharge_wardid_gt?: Int;
  discharge_wardid_gte?: Int;
  firstreservationtime?: DateTimeInput;
  firstreservationtime_not?: DateTimeInput;
  firstreservationtime_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_lt?: DateTimeInput;
  firstreservationtime_lte?: DateTimeInput;
  firstreservationtime_gt?: DateTimeInput;
  firstreservationtime_gte?: DateTimeInput;
  outcometime?: DateTimeInput;
  outcometime_not?: DateTimeInput;
  outcometime_in?: DateTimeInput[] | DateTimeInput;
  outcometime_not_in?: DateTimeInput[] | DateTimeInput;
  outcometime_lt?: DateTimeInput;
  outcometime_lte?: DateTimeInput;
  outcometime_gt?: DateTimeInput;
  outcometime_gte?: DateTimeInput;
  request_cdiff?: Int;
  request_cdiff_not?: Int;
  request_cdiff_in?: Int[] | Int;
  request_cdiff_not_in?: Int[] | Int;
  request_cdiff_lt?: Int;
  request_cdiff_lte?: Int;
  request_cdiff_gt?: Int;
  request_cdiff_gte?: Int;
  request_mrsa?: Int;
  request_mrsa_not?: Int;
  request_mrsa_in?: Int[] | Int;
  request_mrsa_not_in?: Int[] | Int;
  request_mrsa_lt?: Int;
  request_mrsa_lte?: Int;
  request_mrsa_gt?: Int;
  request_mrsa_gte?: Int;
  request_resp?: Int;
  request_resp_not?: Int;
  request_resp_in?: Int[] | Int;
  request_resp_not_in?: Int[] | Int;
  request_resp_lt?: Int;
  request_resp_lte?: Int;
  request_resp_gt?: Int;
  request_resp_gte?: Int;
  request_tele?: Int;
  request_tele_not?: Int;
  request_tele_in?: Int[] | Int;
  request_tele_not_in?: Int[] | Int;
  request_tele_lt?: Int;
  request_tele_lte?: Int;
  request_tele_gt?: Int;
  request_tele_gte?: Int;
  request_vre?: Int;
  request_vre_not?: Int;
  request_vre_in?: Int[] | Int;
  request_vre_not_in?: Int[] | Int;
  request_vre_lt?: Int;
  request_vre_lte?: Int;
  request_vre_gt?: Int;
  request_vre_gte?: Int;
  submit_careunit?: String;
  submit_careunit_not?: String;
  submit_careunit_in?: String[] | String;
  submit_careunit_not_in?: String[] | String;
  submit_careunit_lt?: String;
  submit_careunit_lte?: String;
  submit_careunit_gt?: String;
  submit_careunit_gte?: String;
  submit_careunit_contains?: String;
  submit_careunit_not_contains?: String;
  submit_careunit_starts_with?: String;
  submit_careunit_not_starts_with?: String;
  submit_careunit_ends_with?: String;
  submit_careunit_not_ends_with?: String;
  submit_wardid?: Int;
  submit_wardid_not?: Int;
  submit_wardid_in?: Int[] | Int;
  submit_wardid_not_in?: Int[] | Int;
  submit_wardid_lt?: Int;
  submit_wardid_lte?: Int;
  submit_wardid_gt?: Int;
  submit_wardid_gte?: Int;
  updatetime?: DateTimeInput;
  updatetime_not?: DateTimeInput;
  updatetime_in?: DateTimeInput[] | DateTimeInput;
  updatetime_not_in?: DateTimeInput[] | DateTimeInput;
  updatetime_lt?: DateTimeInput;
  updatetime_lte?: DateTimeInput;
  updatetime_gt?: DateTimeInput;
  updatetime_gte?: DateTimeInput;
  AND?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
  OR?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
  NOT?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
}

export interface CaregiverWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  inputevents_cv_every?: Inputevents_cvWhereInput;
  inputevents_cv_some?: Inputevents_cvWhereInput;
  inputevents_cv_none?: Inputevents_cvWhereInput;
  inputevents_mv_every?: Inputevents_mvWhereInput;
  inputevents_mv_some?: Inputevents_mvWhereInput;
  inputevents_mv_none?: Inputevents_mvWhereInput;
  noteevents_every?: NoteeventWhereInput;
  noteevents_some?: NoteeventWhereInput;
  noteevents_none?: NoteeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  procedureevents_mv_every?: Procedureevents_mvWhereInput;
  procedureevents_mv_some?: Procedureevents_mvWhereInput;
  procedureevents_mv_none?: Procedureevents_mvWhereInput;
  AND?: CaregiverWhereInput[] | CaregiverWhereInput;
  OR?: CaregiverWhereInput[] | CaregiverWhereInput;
  NOT?: CaregiverWhereInput[] | CaregiverWhereInput;
}

export interface CalloutUpdateManyWithWhereNestedInput {
  where: CalloutScalarWhereInput;
  data: CalloutUpdateManyDataInput;
}

export interface CpteventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CpteventWhereInput;
  AND?: CpteventSubscriptionWhereInput[] | CpteventSubscriptionWhereInput;
  OR?: CpteventSubscriptionWhereInput[] | CpteventSubscriptionWhereInput;
  NOT?: CpteventSubscriptionWhereInput[] | CpteventSubscriptionWhereInput;
}

export interface CalloutUpdateManyDataInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface Chartevents_7SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_7WhereInput;
  AND?:
    | Chartevents_7SubscriptionWhereInput[]
    | Chartevents_7SubscriptionWhereInput;
  OR?:
    | Chartevents_7SubscriptionWhereInput[]
    | Chartevents_7SubscriptionWhereInput;
  NOT?:
    | Chartevents_7SubscriptionWhereInput[]
    | Chartevents_7SubscriptionWhereInput;
}

export interface CharteventUpdateManyInput {
  create?: CharteventCreateInput[] | CharteventCreateInput;
  update?:
    | CharteventUpdateWithWhereUniqueNestedInput[]
    | CharteventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CharteventUpsertWithWhereUniqueNestedInput[]
    | CharteventUpsertWithWhereUniqueNestedInput;
  delete?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  connect?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  set?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  disconnect?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  deleteMany?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
  updateMany?:
    | CharteventUpdateManyWithWhereNestedInput[]
    | CharteventUpdateManyWithWhereNestedInput;
}

export interface Chartevents_5SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_5WhereInput;
  AND?:
    | Chartevents_5SubscriptionWhereInput[]
    | Chartevents_5SubscriptionWhereInput;
  OR?:
    | Chartevents_5SubscriptionWhereInput[]
    | Chartevents_5SubscriptionWhereInput;
  NOT?:
    | Chartevents_5SubscriptionWhereInput[]
    | Chartevents_5SubscriptionWhereInput;
}

export interface CharteventUpdateWithWhereUniqueNestedInput {
  where: CharteventWhereUniqueInput;
  data: CharteventUpdateDataInput;
}

export interface Procedureevents_mvWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  locationcategory?: String;
  locationcategory_not?: String;
  locationcategory_in?: String[] | String;
  locationcategory_not_in?: String[] | String;
  locationcategory_lt?: String;
  locationcategory_lte?: String;
  locationcategory_gt?: String;
  locationcategory_gte?: String;
  locationcategory_contains?: String;
  locationcategory_not_contains?: String;
  locationcategory_starts_with?: String;
  locationcategory_not_starts_with?: String;
  locationcategory_ends_with?: String;
  locationcategory_not_ends_with?: String;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: Procedureevents_mvWhereInput[] | Procedureevents_mvWhereInput;
  OR?: Procedureevents_mvWhereInput[] | Procedureevents_mvWhereInput;
  NOT?: Procedureevents_mvWhereInput[] | Procedureevents_mvWhereInput;
}

export interface CharteventUpdateDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_15SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_15WhereInput;
  AND?:
    | Chartevents_15SubscriptionWhereInput[]
    | Chartevents_15SubscriptionWhereInput;
  OR?:
    | Chartevents_15SubscriptionWhereInput[]
    | Chartevents_15SubscriptionWhereInput;
  NOT?:
    | Chartevents_15SubscriptionWhereInput[]
    | Chartevents_15SubscriptionWhereInput;
}

export interface CharteventUpsertWithWhereUniqueNestedInput {
  where: CharteventWhereUniqueInput;
  update: CharteventUpdateDataInput;
  create: CharteventCreateInput;
}

export interface Chartevents_13SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_13WhereInput;
  AND?:
    | Chartevents_13SubscriptionWhereInput[]
    | Chartevents_13SubscriptionWhereInput;
  OR?:
    | Chartevents_13SubscriptionWhereInput[]
    | Chartevents_13SubscriptionWhereInput;
  NOT?:
    | Chartevents_13SubscriptionWhereInput[]
    | Chartevents_13SubscriptionWhereInput;
}

export interface CharteventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
  OR?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
  NOT?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
}

export interface OutputeventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  iserror?: Int;
  iserror_not?: Int;
  iserror_in?: Int[] | Int;
  iserror_not_in?: Int[] | Int;
  iserror_lt?: Int;
  iserror_lte?: Int;
  iserror_gt?: Int;
  iserror_gte?: Int;
  newbottle?: String;
  newbottle_not?: String;
  newbottle_in?: String[] | String;
  newbottle_not_in?: String[] | String;
  newbottle_lt?: String;
  newbottle_lte?: String;
  newbottle_gt?: String;
  newbottle_gte?: String;
  newbottle_contains?: String;
  newbottle_not_contains?: String;
  newbottle_starts_with?: String;
  newbottle_not_starts_with?: String;
  newbottle_ends_with?: String;
  newbottle_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: OutputeventWhereInput[] | OutputeventWhereInput;
  OR?: OutputeventWhereInput[] | OutputeventWhereInput;
  NOT?: OutputeventWhereInput[] | OutputeventWhereInput;
}

export interface CharteventUpdateManyWithWhereNestedInput {
  where: CharteventScalarWhereInput;
  data: CharteventUpdateManyDataInput;
}

export interface CaregiverSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CaregiverWhereInput;
  AND?: CaregiverSubscriptionWhereInput[] | CaregiverSubscriptionWhereInput;
  OR?: CaregiverSubscriptionWhereInput[] | CaregiverSubscriptionWhereInput;
  NOT?: CaregiverSubscriptionWhereInput[] | CaregiverSubscriptionWhereInput;
}

export interface CharteventUpdateManyDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface AdmissionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AdmissionWhereInput;
  AND?: AdmissionSubscriptionWhereInput[] | AdmissionSubscriptionWhereInput;
  OR?: AdmissionSubscriptionWhereInput[] | AdmissionSubscriptionWhereInput;
  NOT?: AdmissionSubscriptionWhereInput[] | AdmissionSubscriptionWhereInput;
}

export interface LabeventUpdateDataInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface Inputevents_cvWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  newbottle?: Int;
  newbottle_not?: Int;
  newbottle_in?: Int[] | Int;
  newbottle_not_in?: Int[] | Int;
  newbottle_lt?: Int;
  newbottle_lte?: Int;
  newbottle_gt?: Int;
  newbottle_gte?: Int;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalamountuom?: String;
  originalamountuom_not?: String;
  originalamountuom_in?: String[] | String;
  originalamountuom_not_in?: String[] | String;
  originalamountuom_lt?: String;
  originalamountuom_lte?: String;
  originalamountuom_gt?: String;
  originalamountuom_gte?: String;
  originalamountuom_contains?: String;
  originalamountuom_not_contains?: String;
  originalamountuom_starts_with?: String;
  originalamountuom_not_starts_with?: String;
  originalamountuom_ends_with?: String;
  originalamountuom_not_ends_with?: String;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  originalrateuom?: String;
  originalrateuom_not?: String;
  originalrateuom_in?: String[] | String;
  originalrateuom_not_in?: String[] | String;
  originalrateuom_lt?: String;
  originalrateuom_lte?: String;
  originalrateuom_gt?: String;
  originalrateuom_gte?: String;
  originalrateuom_contains?: String;
  originalrateuom_not_contains?: String;
  originalrateuom_starts_with?: String;
  originalrateuom_not_starts_with?: String;
  originalrateuom_ends_with?: String;
  originalrateuom_not_ends_with?: String;
  originalroute?: String;
  originalroute_not?: String;
  originalroute_in?: String[] | String;
  originalroute_not_in?: String[] | String;
  originalroute_lt?: String;
  originalroute_lte?: String;
  originalroute_gt?: String;
  originalroute_gte?: String;
  originalroute_contains?: String;
  originalroute_not_contains?: String;
  originalroute_starts_with?: String;
  originalroute_not_starts_with?: String;
  originalroute_ends_with?: String;
  originalroute_not_ends_with?: String;
  originalsite?: String;
  originalsite_not?: String;
  originalsite_in?: String[] | String;
  originalsite_not_in?: String[] | String;
  originalsite_lt?: String;
  originalsite_lte?: String;
  originalsite_gt?: String;
  originalsite_gte?: String;
  originalsite_contains?: String;
  originalsite_not_contains?: String;
  originalsite_starts_with?: String;
  originalsite_not_starts_with?: String;
  originalsite_ends_with?: String;
  originalsite_not_ends_with?: String;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  AND?: Inputevents_cvWhereInput[] | Inputevents_cvWhereInput;
  OR?: Inputevents_cvWhereInput[] | Inputevents_cvWhereInput;
  NOT?: Inputevents_cvWhereInput[] | Inputevents_cvWhereInput;
}

export interface CpteventUpdateWithWhereUniqueNestedInput {
  where: CpteventWhereUniqueInput;
  data: CpteventUpdateDataInput;
}

export interface Procedures_icdUpdateInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface CpteventUpdateDataInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface Procedureevents_mvUpdateInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface CpteventUpsertWithWhereUniqueNestedInput {
  where: CpteventWhereUniqueInput;
  update: CpteventUpdateDataInput;
  create: CpteventCreateInput;
}

export interface PatientUpdateManyMutationInput {
  dob?: DateTimeInput;
  dod?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  expire_flag?: Int;
  gender?: String;
  subject_id?: Int;
}

export interface CpteventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  costcenter?: String;
  costcenter_not?: String;
  costcenter_in?: String[] | String;
  costcenter_not_in?: String[] | String;
  costcenter_lt?: String;
  costcenter_lte?: String;
  costcenter_gt?: String;
  costcenter_gte?: String;
  costcenter_contains?: String;
  costcenter_not_contains?: String;
  costcenter_starts_with?: String;
  costcenter_not_starts_with?: String;
  costcenter_ends_with?: String;
  costcenter_not_ends_with?: String;
  cpt_cd?: String;
  cpt_cd_not?: String;
  cpt_cd_in?: String[] | String;
  cpt_cd_not_in?: String[] | String;
  cpt_cd_lt?: String;
  cpt_cd_lte?: String;
  cpt_cd_gt?: String;
  cpt_cd_gte?: String;
  cpt_cd_contains?: String;
  cpt_cd_not_contains?: String;
  cpt_cd_starts_with?: String;
  cpt_cd_not_starts_with?: String;
  cpt_cd_ends_with?: String;
  cpt_cd_not_ends_with?: String;
  cpt_number?: Int;
  cpt_number_not?: Int;
  cpt_number_in?: Int[] | Int;
  cpt_number_not_in?: Int[] | Int;
  cpt_number_lt?: Int;
  cpt_number_lte?: Int;
  cpt_number_gt?: Int;
  cpt_number_gte?: Int;
  cpt_suffix?: String;
  cpt_suffix_not?: String;
  cpt_suffix_in?: String[] | String;
  cpt_suffix_not_in?: String[] | String;
  cpt_suffix_lt?: String;
  cpt_suffix_lte?: String;
  cpt_suffix_gt?: String;
  cpt_suffix_gte?: String;
  cpt_suffix_contains?: String;
  cpt_suffix_not_contains?: String;
  cpt_suffix_starts_with?: String;
  cpt_suffix_not_starts_with?: String;
  cpt_suffix_ends_with?: String;
  cpt_suffix_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  sectionheader?: String;
  sectionheader_not?: String;
  sectionheader_in?: String[] | String;
  sectionheader_not_in?: String[] | String;
  sectionheader_lt?: String;
  sectionheader_lte?: String;
  sectionheader_gt?: String;
  sectionheader_gte?: String;
  sectionheader_contains?: String;
  sectionheader_not_contains?: String;
  sectionheader_starts_with?: String;
  sectionheader_not_starts_with?: String;
  sectionheader_ends_with?: String;
  sectionheader_not_ends_with?: String;
  subsectionheader?: String;
  subsectionheader_not?: String;
  subsectionheader_in?: String[] | String;
  subsectionheader_not_in?: String[] | String;
  subsectionheader_lt?: String;
  subsectionheader_lte?: String;
  subsectionheader_gt?: String;
  subsectionheader_gte?: String;
  subsectionheader_contains?: String;
  subsectionheader_not_contains?: String;
  subsectionheader_starts_with?: String;
  subsectionheader_not_starts_with?: String;
  subsectionheader_ends_with?: String;
  subsectionheader_not_ends_with?: String;
  ticket_id_seq?: Int;
  ticket_id_seq_not?: Int;
  ticket_id_seq_in?: Int[] | Int;
  ticket_id_seq_not_in?: Int[] | Int;
  ticket_id_seq_lt?: Int;
  ticket_id_seq_lte?: Int;
  ticket_id_seq_gt?: Int;
  ticket_id_seq_gte?: Int;
  AND?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
  OR?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
  NOT?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
}

export interface AdmissionUpsertWithWhereUniqueNestedInput {
  where: AdmissionWhereUniqueInput;
  update: AdmissionUpdateDataInput;
  create: AdmissionCreateInput;
}

export interface CpteventUpdateManyWithWhereNestedInput {
  where: CpteventScalarWhereInput;
  data: CpteventUpdateManyDataInput;
}

export interface AdmissionUpdateWithWhereUniqueNestedInput {
  where: AdmissionWhereUniqueInput;
  data: AdmissionUpdateDataInput;
}

export interface CpteventUpdateManyDataInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface AdmissionCreateManyInput {
  create?: AdmissionCreateInput[] | AdmissionCreateInput;
  connect?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
}

export interface DatetimeeventUpdateManyInput {
  create?: DatetimeeventCreateInput[] | DatetimeeventCreateInput;
  update?:
    | DatetimeeventUpdateWithWhereUniqueNestedInput[]
    | DatetimeeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DatetimeeventUpsertWithWhereUniqueNestedInput[]
    | DatetimeeventUpsertWithWhereUniqueNestedInput;
  delete?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  connect?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  set?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  disconnect?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  deleteMany?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
  updateMany?:
    | DatetimeeventUpdateManyWithWhereNestedInput[]
    | DatetimeeventUpdateManyWithWhereNestedInput;
}

export interface NoteeventUpdateManyMutationInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface DatetimeeventUpdateWithWhereUniqueNestedInput {
  where: DatetimeeventWhereUniqueInput;
  data: DatetimeeventUpdateDataInput;
}

export interface MicrobiologyeventUpdateManyMutationInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface DatetimeeventUpdateDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface LabeventUpdateInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface DatetimeeventUpsertWithWhereUniqueNestedInput {
  where: DatetimeeventWhereUniqueInput;
  update: DatetimeeventUpdateDataInput;
  create: DatetimeeventCreateInput;
}

export interface Inputevents_cvUpdateInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface DatetimeeventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: DateTimeInput;
  value_not?: DateTimeInput;
  value_in?: DateTimeInput[] | DateTimeInput;
  value_not_in?: DateTimeInput[] | DateTimeInput;
  value_lt?: DateTimeInput;
  value_lte?: DateTimeInput;
  value_gt?: DateTimeInput;
  value_gte?: DateTimeInput;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
  OR?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
  NOT?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
}

export interface IcustayUpdateInput {
  chartevents?: CharteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  inputevents_cv?: Inputevents_cvUpdateManyInput;
  inputevents_mv?: Inputevents_mvUpdateManyInput;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outputevents?: OutputeventUpdateManyInput;
  outtime?: DateTimeInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: Procedureevents_mvUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export interface DatetimeeventUpdateManyWithWhereNestedInput {
  where: DatetimeeventScalarWhereInput;
  data: DatetimeeventUpdateManyDataInput;
}

export interface Diagnoses_icdUpdateManyMutationInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface DatetimeeventUpdateManyDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface D_labitemUpdateManyMutationInput {
  category?: String;
  fluid?: String;
  itemid?: Int;
  label?: String;
  loinc_code?: String;
}

export interface Diagnoses_icdUpdateManyInput {
  create?: Diagnoses_icdCreateInput[] | Diagnoses_icdCreateInput;
  update?:
    | Diagnoses_icdUpdateWithWhereUniqueNestedInput[]
    | Diagnoses_icdUpdateWithWhereUniqueNestedInput;
  upsert?:
    | Diagnoses_icdUpsertWithWhereUniqueNestedInput[]
    | Diagnoses_icdUpsertWithWhereUniqueNestedInput;
  delete?: Diagnoses_icdWhereUniqueInput[] | Diagnoses_icdWhereUniqueInput;
  connect?: Diagnoses_icdWhereUniqueInput[] | Diagnoses_icdWhereUniqueInput;
  set?: Diagnoses_icdWhereUniqueInput[] | Diagnoses_icdWhereUniqueInput;
  disconnect?: Diagnoses_icdWhereUniqueInput[] | Diagnoses_icdWhereUniqueInput;
  deleteMany?: Diagnoses_icdScalarWhereInput[] | Diagnoses_icdScalarWhereInput;
  updateMany?:
    | Diagnoses_icdUpdateManyWithWhereNestedInput[]
    | Diagnoses_icdUpdateManyWithWhereNestedInput;
}

export interface D_labitemCreateInput {
  category: String;
  fluid: String;
  itemid: Int;
  label: String;
  labevents?: LabeventCreateManyInput;
  loinc_code?: String;
}

export interface Diagnoses_icdUpdateWithWhereUniqueNestedInput {
  where: Diagnoses_icdWhereUniqueInput;
  data: Diagnoses_icdUpdateDataInput;
}

export interface D_itemCreateInput {
  abbreviation?: String;
  category?: String;
  chartevents?: CharteventCreateManyInput;
  conceptid?: Int;
  datetimeevents?: DatetimeeventCreateManyInput;
  dbsource?: String;
  inputevents_mv?: Inputevents_mvCreateManyInput;
  itemid: Int;
  label?: String;
  linksto?: String;
  microbiologyevents?: MicrobiologyeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  param_type?: String;
  procedureevents_mv?: Procedureevents_mvCreateManyInput;
  unitname?: String;
}

export interface Diagnoses_icdUpdateDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface D_icd_diagnosisUpdateManyMutationInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface Diagnoses_icdUpsertWithWhereUniqueNestedInput {
  where: Diagnoses_icdWhereUniqueInput;
  update: Diagnoses_icdUpdateDataInput;
  create: Diagnoses_icdCreateInput;
}

export interface D_cptUpdateManyMutationInput {
  category?: Int;
  codesuffix?: String;
  maxcodeinsubsection?: Int;
  mincodeinsubsection?: Int;
  sectionheader?: String;
  sectionrange?: String;
  subsectionheader?: String;
  subsectionrange?: String;
}

export interface Diagnoses_icdScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: Diagnoses_icdScalarWhereInput[] | Diagnoses_icdScalarWhereInput;
  OR?: Diagnoses_icdScalarWhereInput[] | Diagnoses_icdScalarWhereInput;
  NOT?: Diagnoses_icdScalarWhereInput[] | Diagnoses_icdScalarWhereInput;
}

export interface CpteventUpdateManyMutationInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface Diagnoses_icdUpdateManyWithWhereNestedInput {
  where: Diagnoses_icdScalarWhereInput;
  data: Diagnoses_icdUpdateManyDataInput;
}

export interface Chartevents_9CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Diagnoses_icdUpdateManyDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface Chartevents_8CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DrgcodeUpdateManyInput {
  create?: DrgcodeCreateInput[] | DrgcodeCreateInput;
  update?:
    | DrgcodeUpdateWithWhereUniqueNestedInput[]
    | DrgcodeUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DrgcodeUpsertWithWhereUniqueNestedInput[]
    | DrgcodeUpsertWithWhereUniqueNestedInput;
  delete?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  connect?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  set?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  disconnect?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  deleteMany?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
  updateMany?:
    | DrgcodeUpdateManyWithWhereNestedInput[]
    | DrgcodeUpdateManyWithWhereNestedInput;
}

export interface D_icd_diagnosisWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  long_title?: String;
  long_title_not?: String;
  long_title_in?: String[] | String;
  long_title_not_in?: String[] | String;
  long_title_lt?: String;
  long_title_lte?: String;
  long_title_gt?: String;
  long_title_gte?: String;
  long_title_contains?: String;
  long_title_not_contains?: String;
  long_title_starts_with?: String;
  long_title_not_starts_with?: String;
  long_title_ends_with?: String;
  long_title_not_ends_with?: String;
  short_title?: String;
  short_title_not?: String;
  short_title_in?: String[] | String;
  short_title_not_in?: String[] | String;
  short_title_lt?: String;
  short_title_lte?: String;
  short_title_gt?: String;
  short_title_gte?: String;
  short_title_contains?: String;
  short_title_not_contains?: String;
  short_title_starts_with?: String;
  short_title_not_starts_with?: String;
  short_title_ends_with?: String;
  short_title_not_ends_with?: String;
  AND?: D_icd_diagnosisWhereInput[] | D_icd_diagnosisWhereInput;
  OR?: D_icd_diagnosisWhereInput[] | D_icd_diagnosisWhereInput;
  NOT?: D_icd_diagnosisWhereInput[] | D_icd_diagnosisWhereInput;
}

export interface DrgcodeUpdateWithWhereUniqueNestedInput {
  where: DrgcodeWhereUniqueInput;
  data: DrgcodeUpdateDataInput;
}

export interface Chartevents_5CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface LabeventUpdateWithWhereUniqueNestedInput {
  where: LabeventWhereUniqueInput;
  data: LabeventUpdateDataInput;
}

export interface CalloutWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  acknowledge_status?: String;
  acknowledge_status_not?: String;
  acknowledge_status_in?: String[] | String;
  acknowledge_status_not_in?: String[] | String;
  acknowledge_status_lt?: String;
  acknowledge_status_lte?: String;
  acknowledge_status_gt?: String;
  acknowledge_status_gte?: String;
  acknowledge_status_contains?: String;
  acknowledge_status_not_contains?: String;
  acknowledge_status_starts_with?: String;
  acknowledge_status_not_starts_with?: String;
  acknowledge_status_ends_with?: String;
  acknowledge_status_not_ends_with?: String;
  acknowledgetime?: DateTimeInput;
  acknowledgetime_not?: DateTimeInput;
  acknowledgetime_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_not_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_lt?: DateTimeInput;
  acknowledgetime_lte?: DateTimeInput;
  acknowledgetime_gt?: DateTimeInput;
  acknowledgetime_gte?: DateTimeInput;
  callout_outcome?: String;
  callout_outcome_not?: String;
  callout_outcome_in?: String[] | String;
  callout_outcome_not_in?: String[] | String;
  callout_outcome_lt?: String;
  callout_outcome_lte?: String;
  callout_outcome_gt?: String;
  callout_outcome_gte?: String;
  callout_outcome_contains?: String;
  callout_outcome_not_contains?: String;
  callout_outcome_starts_with?: String;
  callout_outcome_not_starts_with?: String;
  callout_outcome_ends_with?: String;
  callout_outcome_not_ends_with?: String;
  callout_service?: String;
  callout_service_not?: String;
  callout_service_in?: String[] | String;
  callout_service_not_in?: String[] | String;
  callout_service_lt?: String;
  callout_service_lte?: String;
  callout_service_gt?: String;
  callout_service_gte?: String;
  callout_service_contains?: String;
  callout_service_not_contains?: String;
  callout_service_starts_with?: String;
  callout_service_not_starts_with?: String;
  callout_service_ends_with?: String;
  callout_service_not_ends_with?: String;
  callout_status?: String;
  callout_status_not?: String;
  callout_status_in?: String[] | String;
  callout_status_not_in?: String[] | String;
  callout_status_lt?: String;
  callout_status_lte?: String;
  callout_status_gt?: String;
  callout_status_gte?: String;
  callout_status_contains?: String;
  callout_status_not_contains?: String;
  callout_status_starts_with?: String;
  callout_status_not_starts_with?: String;
  callout_status_ends_with?: String;
  callout_status_not_ends_with?: String;
  callout_wardid?: Int;
  callout_wardid_not?: Int;
  callout_wardid_in?: Int[] | Int;
  callout_wardid_not_in?: Int[] | Int;
  callout_wardid_lt?: Int;
  callout_wardid_lte?: Int;
  callout_wardid_gt?: Int;
  callout_wardid_gte?: Int;
  createtime?: DateTimeInput;
  createtime_not?: DateTimeInput;
  createtime_in?: DateTimeInput[] | DateTimeInput;
  createtime_not_in?: DateTimeInput[] | DateTimeInput;
  createtime_lt?: DateTimeInput;
  createtime_lte?: DateTimeInput;
  createtime_gt?: DateTimeInput;
  createtime_gte?: DateTimeInput;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  currentreservationtime?: DateTimeInput;
  currentreservationtime_not?: DateTimeInput;
  currentreservationtime_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_lt?: DateTimeInput;
  currentreservationtime_lte?: DateTimeInput;
  currentreservationtime_gt?: DateTimeInput;
  currentreservationtime_gte?: DateTimeInput;
  discharge_wardid?: Int;
  discharge_wardid_not?: Int;
  discharge_wardid_in?: Int[] | Int;
  discharge_wardid_not_in?: Int[] | Int;
  discharge_wardid_lt?: Int;
  discharge_wardid_lte?: Int;
  discharge_wardid_gt?: Int;
  discharge_wardid_gte?: Int;
  firstreservationtime?: DateTimeInput;
  firstreservationtime_not?: DateTimeInput;
  firstreservationtime_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_lt?: DateTimeInput;
  firstreservationtime_lte?: DateTimeInput;
  firstreservationtime_gt?: DateTimeInput;
  firstreservationtime_gte?: DateTimeInput;
  outcometime?: DateTimeInput;
  outcometime_not?: DateTimeInput;
  outcometime_in?: DateTimeInput[] | DateTimeInput;
  outcometime_not_in?: DateTimeInput[] | DateTimeInput;
  outcometime_lt?: DateTimeInput;
  outcometime_lte?: DateTimeInput;
  outcometime_gt?: DateTimeInput;
  outcometime_gte?: DateTimeInput;
  request_cdiff?: Int;
  request_cdiff_not?: Int;
  request_cdiff_in?: Int[] | Int;
  request_cdiff_not_in?: Int[] | Int;
  request_cdiff_lt?: Int;
  request_cdiff_lte?: Int;
  request_cdiff_gt?: Int;
  request_cdiff_gte?: Int;
  request_mrsa?: Int;
  request_mrsa_not?: Int;
  request_mrsa_in?: Int[] | Int;
  request_mrsa_not_in?: Int[] | Int;
  request_mrsa_lt?: Int;
  request_mrsa_lte?: Int;
  request_mrsa_gt?: Int;
  request_mrsa_gte?: Int;
  request_resp?: Int;
  request_resp_not?: Int;
  request_resp_in?: Int[] | Int;
  request_resp_not_in?: Int[] | Int;
  request_resp_lt?: Int;
  request_resp_lte?: Int;
  request_resp_gt?: Int;
  request_resp_gte?: Int;
  request_tele?: Int;
  request_tele_not?: Int;
  request_tele_in?: Int[] | Int;
  request_tele_not_in?: Int[] | Int;
  request_tele_lt?: Int;
  request_tele_lte?: Int;
  request_tele_gt?: Int;
  request_tele_gte?: Int;
  request_vre?: Int;
  request_vre_not?: Int;
  request_vre_in?: Int[] | Int;
  request_vre_not_in?: Int[] | Int;
  request_vre_lt?: Int;
  request_vre_lte?: Int;
  request_vre_gt?: Int;
  request_vre_gte?: Int;
  submit_careunit?: String;
  submit_careunit_not?: String;
  submit_careunit_in?: String[] | String;
  submit_careunit_not_in?: String[] | String;
  submit_careunit_lt?: String;
  submit_careunit_lte?: String;
  submit_careunit_gt?: String;
  submit_careunit_gte?: String;
  submit_careunit_contains?: String;
  submit_careunit_not_contains?: String;
  submit_careunit_starts_with?: String;
  submit_careunit_not_starts_with?: String;
  submit_careunit_ends_with?: String;
  submit_careunit_not_ends_with?: String;
  submit_wardid?: Int;
  submit_wardid_not?: Int;
  submit_wardid_in?: Int[] | Int;
  submit_wardid_not_in?: Int[] | Int;
  submit_wardid_lt?: Int;
  submit_wardid_lte?: Int;
  submit_wardid_gt?: Int;
  submit_wardid_gte?: Int;
  updatetime?: DateTimeInput;
  updatetime_not?: DateTimeInput;
  updatetime_in?: DateTimeInput[] | DateTimeInput;
  updatetime_not_in?: DateTimeInput[] | DateTimeInput;
  updatetime_lt?: DateTimeInput;
  updatetime_lte?: DateTimeInput;
  updatetime_gt?: DateTimeInput;
  updatetime_gte?: DateTimeInput;
  AND?: CalloutWhereInput[] | CalloutWhereInput;
  OR?: CalloutWhereInput[] | CalloutWhereInput;
  NOT?: CalloutWhereInput[] | CalloutWhereInput;
}

export interface MicrobiologyeventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  ab_name?: String;
  ab_name_not?: String;
  ab_name_in?: String[] | String;
  ab_name_not_in?: String[] | String;
  ab_name_lt?: String;
  ab_name_lte?: String;
  ab_name_gt?: String;
  ab_name_gte?: String;
  ab_name_contains?: String;
  ab_name_not_contains?: String;
  ab_name_starts_with?: String;
  ab_name_not_starts_with?: String;
  ab_name_ends_with?: String;
  ab_name_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  dilution_comparison?: String;
  dilution_comparison_not?: String;
  dilution_comparison_in?: String[] | String;
  dilution_comparison_not_in?: String[] | String;
  dilution_comparison_lt?: String;
  dilution_comparison_lte?: String;
  dilution_comparison_gt?: String;
  dilution_comparison_gte?: String;
  dilution_comparison_contains?: String;
  dilution_comparison_not_contains?: String;
  dilution_comparison_starts_with?: String;
  dilution_comparison_not_starts_with?: String;
  dilution_comparison_ends_with?: String;
  dilution_comparison_not_ends_with?: String;
  dilution_text?: String;
  dilution_text_not?: String;
  dilution_text_in?: String[] | String;
  dilution_text_not_in?: String[] | String;
  dilution_text_lt?: String;
  dilution_text_lte?: String;
  dilution_text_gt?: String;
  dilution_text_gte?: String;
  dilution_text_contains?: String;
  dilution_text_not_contains?: String;
  dilution_text_starts_with?: String;
  dilution_text_not_starts_with?: String;
  dilution_text_ends_with?: String;
  dilution_text_not_ends_with?: String;
  dilution_value?: Float;
  dilution_value_not?: Float;
  dilution_value_in?: Float[] | Float;
  dilution_value_not_in?: Float[] | Float;
  dilution_value_lt?: Float;
  dilution_value_lte?: Float;
  dilution_value_gt?: Float;
  dilution_value_gte?: Float;
  interpretation?: String;
  interpretation_not?: String;
  interpretation_in?: String[] | String;
  interpretation_not_in?: String[] | String;
  interpretation_lt?: String;
  interpretation_lte?: String;
  interpretation_gt?: String;
  interpretation_gte?: String;
  interpretation_contains?: String;
  interpretation_not_contains?: String;
  interpretation_starts_with?: String;
  interpretation_not_starts_with?: String;
  interpretation_ends_with?: String;
  interpretation_not_ends_with?: String;
  isolate_num?: Int;
  isolate_num_not?: Int;
  isolate_num_in?: Int[] | Int;
  isolate_num_not_in?: Int[] | Int;
  isolate_num_lt?: Int;
  isolate_num_lte?: Int;
  isolate_num_gt?: Int;
  isolate_num_gte?: Int;
  org_name?: String;
  org_name_not?: String;
  org_name_in?: String[] | String;
  org_name_not_in?: String[] | String;
  org_name_lt?: String;
  org_name_lte?: String;
  org_name_gt?: String;
  org_name_gte?: String;
  org_name_contains?: String;
  org_name_not_contains?: String;
  org_name_starts_with?: String;
  org_name_not_starts_with?: String;
  org_name_ends_with?: String;
  org_name_not_ends_with?: String;
  spec_type_desc?: String;
  spec_type_desc_not?: String;
  spec_type_desc_in?: String[] | String;
  spec_type_desc_not_in?: String[] | String;
  spec_type_desc_lt?: String;
  spec_type_desc_lte?: String;
  spec_type_desc_gt?: String;
  spec_type_desc_gte?: String;
  spec_type_desc_contains?: String;
  spec_type_desc_not_contains?: String;
  spec_type_desc_starts_with?: String;
  spec_type_desc_not_starts_with?: String;
  spec_type_desc_ends_with?: String;
  spec_type_desc_not_ends_with?: String;
  AND?: MicrobiologyeventWhereInput[] | MicrobiologyeventWhereInput;
  OR?: MicrobiologyeventWhereInput[] | MicrobiologyeventWhereInput;
  NOT?: MicrobiologyeventWhereInput[] | MicrobiologyeventWhereInput;
}

export type D_itemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  itemid?: Int;
}>;

export interface DrgcodeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  drg_code?: String;
  drg_code_not?: String;
  drg_code_in?: String[] | String;
  drg_code_not_in?: String[] | String;
  drg_code_lt?: String;
  drg_code_lte?: String;
  drg_code_gt?: String;
  drg_code_gte?: String;
  drg_code_contains?: String;
  drg_code_not_contains?: String;
  drg_code_starts_with?: String;
  drg_code_not_starts_with?: String;
  drg_code_ends_with?: String;
  drg_code_not_ends_with?: String;
  drg_mortality?: Int;
  drg_mortality_not?: Int;
  drg_mortality_in?: Int[] | Int;
  drg_mortality_not_in?: Int[] | Int;
  drg_mortality_lt?: Int;
  drg_mortality_lte?: Int;
  drg_mortality_gt?: Int;
  drg_mortality_gte?: Int;
  drg_severity?: Int;
  drg_severity_not?: Int;
  drg_severity_in?: Int[] | Int;
  drg_severity_not_in?: Int[] | Int;
  drg_severity_lt?: Int;
  drg_severity_lte?: Int;
  drg_severity_gt?: Int;
  drg_severity_gte?: Int;
  drg_type?: String;
  drg_type_not?: String;
  drg_type_in?: String[] | String;
  drg_type_not_in?: String[] | String;
  drg_type_lt?: String;
  drg_type_lte?: String;
  drg_type_gt?: String;
  drg_type_gte?: String;
  drg_type_contains?: String;
  drg_type_not_contains?: String;
  drg_type_starts_with?: String;
  drg_type_not_starts_with?: String;
  drg_type_ends_with?: String;
  drg_type_not_ends_with?: String;
  AND?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
  OR?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
  NOT?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
}

export interface Chartevents_17UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DrgcodeUpdateManyWithWhereNestedInput {
  where: DrgcodeScalarWhereInput;
  data: DrgcodeUpdateManyDataInput;
}

export interface Chartevents_16CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DrgcodeUpdateManyDataInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface Chartevents_14UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface IcustayUpdateManyInput {
  create?: IcustayCreateInput[] | IcustayCreateInput;
  update?:
    | IcustayUpdateWithWhereUniqueNestedInput[]
    | IcustayUpdateWithWhereUniqueNestedInput;
  upsert?:
    | IcustayUpsertWithWhereUniqueNestedInput[]
    | IcustayUpsertWithWhereUniqueNestedInput;
  delete?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  connect?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  set?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  disconnect?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  deleteMany?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
  updateMany?:
    | IcustayUpdateManyWithWhereNestedInput[]
    | IcustayUpdateManyWithWhereNestedInput;
}

export interface Chartevents_13CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface IcustayUpdateWithWhereUniqueNestedInput {
  where: IcustayWhereUniqueInput;
  data: IcustayUpdateDataInput;
}

export interface Chartevents_11UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface IcustayUpdateDataInput {
  chartevents?: CharteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  inputevents_cv?: Inputevents_cvUpdateManyInput;
  inputevents_mv?: Inputevents_mvUpdateManyInput;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outputevents?: OutputeventUpdateManyInput;
  outtime?: DateTimeInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: Procedureevents_mvUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export interface Chartevents_10CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Inputevents_cvUpdateManyInput {
  create?: Inputevents_cvCreateInput[] | Inputevents_cvCreateInput;
  update?:
    | Inputevents_cvUpdateWithWhereUniqueNestedInput[]
    | Inputevents_cvUpdateWithWhereUniqueNestedInput;
  upsert?:
    | Inputevents_cvUpsertWithWhereUniqueNestedInput[]
    | Inputevents_cvUpsertWithWhereUniqueNestedInput;
  delete?: Inputevents_cvWhereUniqueInput[] | Inputevents_cvWhereUniqueInput;
  connect?: Inputevents_cvWhereUniqueInput[] | Inputevents_cvWhereUniqueInput;
  set?: Inputevents_cvWhereUniqueInput[] | Inputevents_cvWhereUniqueInput;
  disconnect?:
    | Inputevents_cvWhereUniqueInput[]
    | Inputevents_cvWhereUniqueInput;
  deleteMany?:
    | Inputevents_cvScalarWhereInput[]
    | Inputevents_cvScalarWhereInput;
  updateMany?:
    | Inputevents_cvUpdateManyWithWhereNestedInput[]
    | Inputevents_cvUpdateManyWithWhereNestedInput;
}

export interface PrescriptionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PrescriptionWhereInput;
  AND?:
    | PrescriptionSubscriptionWhereInput[]
    | PrescriptionSubscriptionWhereInput;
  OR?:
    | PrescriptionSubscriptionWhereInput[]
    | PrescriptionSubscriptionWhereInput;
  NOT?:
    | PrescriptionSubscriptionWhereInput[]
    | PrescriptionSubscriptionWhereInput;
}

export interface Inputevents_cvUpdateWithWhereUniqueNestedInput {
  where: Inputevents_cvWhereUniqueInput;
  data: Inputevents_cvUpdateDataInput;
}

export interface Inputevents_mvSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Inputevents_mvWhereInput;
  AND?:
    | Inputevents_mvSubscriptionWhereInput[]
    | Inputevents_mvSubscriptionWhereInput;
  OR?:
    | Inputevents_mvSubscriptionWhereInput[]
    | Inputevents_mvSubscriptionWhereInput;
  NOT?:
    | Inputevents_mvSubscriptionWhereInput[]
    | Inputevents_mvSubscriptionWhereInput;
}

export interface Inputevents_cvUpdateDataInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export type CaregiverWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  cgid?: Int;
}>;

export interface Inputevents_cvUpsertWithWhereUniqueNestedInput {
  where: Inputevents_cvWhereUniqueInput;
  update: Inputevents_cvUpdateDataInput;
  create: Inputevents_cvCreateInput;
}

export interface Chartevents_9SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_9WhereInput;
  AND?:
    | Chartevents_9SubscriptionWhereInput[]
    | Chartevents_9SubscriptionWhereInput;
  OR?:
    | Chartevents_9SubscriptionWhereInput[]
    | Chartevents_9SubscriptionWhereInput;
  NOT?:
    | Chartevents_9SubscriptionWhereInput[]
    | Chartevents_9SubscriptionWhereInput;
}

export interface Inputevents_cvScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  newbottle?: Int;
  newbottle_not?: Int;
  newbottle_in?: Int[] | Int;
  newbottle_not_in?: Int[] | Int;
  newbottle_lt?: Int;
  newbottle_lte?: Int;
  newbottle_gt?: Int;
  newbottle_gte?: Int;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalamountuom?: String;
  originalamountuom_not?: String;
  originalamountuom_in?: String[] | String;
  originalamountuom_not_in?: String[] | String;
  originalamountuom_lt?: String;
  originalamountuom_lte?: String;
  originalamountuom_gt?: String;
  originalamountuom_gte?: String;
  originalamountuom_contains?: String;
  originalamountuom_not_contains?: String;
  originalamountuom_starts_with?: String;
  originalamountuom_not_starts_with?: String;
  originalamountuom_ends_with?: String;
  originalamountuom_not_ends_with?: String;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  originalrateuom?: String;
  originalrateuom_not?: String;
  originalrateuom_in?: String[] | String;
  originalrateuom_not_in?: String[] | String;
  originalrateuom_lt?: String;
  originalrateuom_lte?: String;
  originalrateuom_gt?: String;
  originalrateuom_gte?: String;
  originalrateuom_contains?: String;
  originalrateuom_not_contains?: String;
  originalrateuom_starts_with?: String;
  originalrateuom_not_starts_with?: String;
  originalrateuom_ends_with?: String;
  originalrateuom_not_ends_with?: String;
  originalroute?: String;
  originalroute_not?: String;
  originalroute_in?: String[] | String;
  originalroute_not_in?: String[] | String;
  originalroute_lt?: String;
  originalroute_lte?: String;
  originalroute_gt?: String;
  originalroute_gte?: String;
  originalroute_contains?: String;
  originalroute_not_contains?: String;
  originalroute_starts_with?: String;
  originalroute_not_starts_with?: String;
  originalroute_ends_with?: String;
  originalroute_not_ends_with?: String;
  originalsite?: String;
  originalsite_not?: String;
  originalsite_in?: String[] | String;
  originalsite_not_in?: String[] | String;
  originalsite_lt?: String;
  originalsite_lte?: String;
  originalsite_gt?: String;
  originalsite_gte?: String;
  originalsite_contains?: String;
  originalsite_not_contains?: String;
  originalsite_starts_with?: String;
  originalsite_not_starts_with?: String;
  originalsite_ends_with?: String;
  originalsite_not_ends_with?: String;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  AND?: Inputevents_cvScalarWhereInput[] | Inputevents_cvScalarWhereInput;
  OR?: Inputevents_cvScalarWhereInput[] | Inputevents_cvScalarWhereInput;
  NOT?: Inputevents_cvScalarWhereInput[] | Inputevents_cvScalarWhereInput;
}

export interface Chartevents_3SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_3WhereInput;
  AND?:
    | Chartevents_3SubscriptionWhereInput[]
    | Chartevents_3SubscriptionWhereInput;
  OR?:
    | Chartevents_3SubscriptionWhereInput[]
    | Chartevents_3SubscriptionWhereInput;
  NOT?:
    | Chartevents_3SubscriptionWhereInput[]
    | Chartevents_3SubscriptionWhereInput;
}

export interface Inputevents_cvUpdateManyWithWhereNestedInput {
  where: Inputevents_cvScalarWhereInput;
  data: Inputevents_cvUpdateManyDataInput;
}

export interface PrescriptionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dose_unit_rx?: String;
  dose_unit_rx_not?: String;
  dose_unit_rx_in?: String[] | String;
  dose_unit_rx_not_in?: String[] | String;
  dose_unit_rx_lt?: String;
  dose_unit_rx_lte?: String;
  dose_unit_rx_gt?: String;
  dose_unit_rx_gte?: String;
  dose_unit_rx_contains?: String;
  dose_unit_rx_not_contains?: String;
  dose_unit_rx_starts_with?: String;
  dose_unit_rx_not_starts_with?: String;
  dose_unit_rx_ends_with?: String;
  dose_unit_rx_not_ends_with?: String;
  dose_val_rx?: String;
  dose_val_rx_not?: String;
  dose_val_rx_in?: String[] | String;
  dose_val_rx_not_in?: String[] | String;
  dose_val_rx_lt?: String;
  dose_val_rx_lte?: String;
  dose_val_rx_gt?: String;
  dose_val_rx_gte?: String;
  dose_val_rx_contains?: String;
  dose_val_rx_not_contains?: String;
  dose_val_rx_starts_with?: String;
  dose_val_rx_not_starts_with?: String;
  dose_val_rx_ends_with?: String;
  dose_val_rx_not_ends_with?: String;
  drug?: String;
  drug_not?: String;
  drug_in?: String[] | String;
  drug_not_in?: String[] | String;
  drug_lt?: String;
  drug_lte?: String;
  drug_gt?: String;
  drug_gte?: String;
  drug_contains?: String;
  drug_not_contains?: String;
  drug_starts_with?: String;
  drug_not_starts_with?: String;
  drug_ends_with?: String;
  drug_not_ends_with?: String;
  drug_name_generic?: String;
  drug_name_generic_not?: String;
  drug_name_generic_in?: String[] | String;
  drug_name_generic_not_in?: String[] | String;
  drug_name_generic_lt?: String;
  drug_name_generic_lte?: String;
  drug_name_generic_gt?: String;
  drug_name_generic_gte?: String;
  drug_name_generic_contains?: String;
  drug_name_generic_not_contains?: String;
  drug_name_generic_starts_with?: String;
  drug_name_generic_not_starts_with?: String;
  drug_name_generic_ends_with?: String;
  drug_name_generic_not_ends_with?: String;
  drug_name_poe?: String;
  drug_name_poe_not?: String;
  drug_name_poe_in?: String[] | String;
  drug_name_poe_not_in?: String[] | String;
  drug_name_poe_lt?: String;
  drug_name_poe_lte?: String;
  drug_name_poe_gt?: String;
  drug_name_poe_gte?: String;
  drug_name_poe_contains?: String;
  drug_name_poe_not_contains?: String;
  drug_name_poe_starts_with?: String;
  drug_name_poe_not_starts_with?: String;
  drug_name_poe_ends_with?: String;
  drug_name_poe_not_ends_with?: String;
  drug_type?: String;
  drug_type_not?: String;
  drug_type_in?: String[] | String;
  drug_type_not_in?: String[] | String;
  drug_type_lt?: String;
  drug_type_lte?: String;
  drug_type_gt?: String;
  drug_type_gte?: String;
  drug_type_contains?: String;
  drug_type_not_contains?: String;
  drug_type_starts_with?: String;
  drug_type_not_starts_with?: String;
  drug_type_ends_with?: String;
  drug_type_not_ends_with?: String;
  enddate?: DateTimeInput;
  enddate_not?: DateTimeInput;
  enddate_in?: DateTimeInput[] | DateTimeInput;
  enddate_not_in?: DateTimeInput[] | DateTimeInput;
  enddate_lt?: DateTimeInput;
  enddate_lte?: DateTimeInput;
  enddate_gt?: DateTimeInput;
  enddate_gte?: DateTimeInput;
  form_unit_disp?: String;
  form_unit_disp_not?: String;
  form_unit_disp_in?: String[] | String;
  form_unit_disp_not_in?: String[] | String;
  form_unit_disp_lt?: String;
  form_unit_disp_lte?: String;
  form_unit_disp_gt?: String;
  form_unit_disp_gte?: String;
  form_unit_disp_contains?: String;
  form_unit_disp_not_contains?: String;
  form_unit_disp_starts_with?: String;
  form_unit_disp_not_starts_with?: String;
  form_unit_disp_ends_with?: String;
  form_unit_disp_not_ends_with?: String;
  form_val_disp?: String;
  form_val_disp_not?: String;
  form_val_disp_in?: String[] | String;
  form_val_disp_not_in?: String[] | String;
  form_val_disp_lt?: String;
  form_val_disp_lte?: String;
  form_val_disp_gt?: String;
  form_val_disp_gte?: String;
  form_val_disp_contains?: String;
  form_val_disp_not_contains?: String;
  form_val_disp_starts_with?: String;
  form_val_disp_not_starts_with?: String;
  form_val_disp_ends_with?: String;
  form_val_disp_not_ends_with?: String;
  formulary_drug_cd?: String;
  formulary_drug_cd_not?: String;
  formulary_drug_cd_in?: String[] | String;
  formulary_drug_cd_not_in?: String[] | String;
  formulary_drug_cd_lt?: String;
  formulary_drug_cd_lte?: String;
  formulary_drug_cd_gt?: String;
  formulary_drug_cd_gte?: String;
  formulary_drug_cd_contains?: String;
  formulary_drug_cd_not_contains?: String;
  formulary_drug_cd_starts_with?: String;
  formulary_drug_cd_not_starts_with?: String;
  formulary_drug_cd_ends_with?: String;
  formulary_drug_cd_not_ends_with?: String;
  gsn?: String;
  gsn_not?: String;
  gsn_in?: String[] | String;
  gsn_not_in?: String[] | String;
  gsn_lt?: String;
  gsn_lte?: String;
  gsn_gt?: String;
  gsn_gte?: String;
  gsn_contains?: String;
  gsn_not_contains?: String;
  gsn_starts_with?: String;
  gsn_not_starts_with?: String;
  gsn_ends_with?: String;
  gsn_not_ends_with?: String;
  ndc?: String;
  ndc_not?: String;
  ndc_in?: String[] | String;
  ndc_not_in?: String[] | String;
  ndc_lt?: String;
  ndc_lte?: String;
  ndc_gt?: String;
  ndc_gte?: String;
  ndc_contains?: String;
  ndc_not_contains?: String;
  ndc_starts_with?: String;
  ndc_not_starts_with?: String;
  ndc_ends_with?: String;
  ndc_not_ends_with?: String;
  prod_strength?: String;
  prod_strength_not?: String;
  prod_strength_in?: String[] | String;
  prod_strength_not_in?: String[] | String;
  prod_strength_lt?: String;
  prod_strength_lte?: String;
  prod_strength_gt?: String;
  prod_strength_gte?: String;
  prod_strength_contains?: String;
  prod_strength_not_contains?: String;
  prod_strength_starts_with?: String;
  prod_strength_not_starts_with?: String;
  prod_strength_ends_with?: String;
  prod_strength_not_ends_with?: String;
  route?: String;
  route_not?: String;
  route_in?: String[] | String;
  route_not_in?: String[] | String;
  route_lt?: String;
  route_lte?: String;
  route_gt?: String;
  route_gte?: String;
  route_contains?: String;
  route_not_contains?: String;
  route_starts_with?: String;
  route_not_starts_with?: String;
  route_ends_with?: String;
  route_not_ends_with?: String;
  startdate?: DateTimeInput;
  startdate_not?: DateTimeInput;
  startdate_in?: DateTimeInput[] | DateTimeInput;
  startdate_not_in?: DateTimeInput[] | DateTimeInput;
  startdate_lt?: DateTimeInput;
  startdate_lte?: DateTimeInput;
  startdate_gt?: DateTimeInput;
  startdate_gte?: DateTimeInput;
  AND?: PrescriptionWhereInput[] | PrescriptionWhereInput;
  OR?: PrescriptionWhereInput[] | PrescriptionWhereInput;
  NOT?: PrescriptionWhereInput[] | PrescriptionWhereInput;
}

export interface Inputevents_cvUpdateManyDataInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface Chartevents_1SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_1WhereInput;
  AND?:
    | Chartevents_1SubscriptionWhereInput[]
    | Chartevents_1SubscriptionWhereInput;
  OR?:
    | Chartevents_1SubscriptionWhereInput[]
    | Chartevents_1SubscriptionWhereInput;
  NOT?:
    | Chartevents_1SubscriptionWhereInput[]
    | Chartevents_1SubscriptionWhereInput;
}

export interface Inputevents_mvUpdateManyInput {
  create?: Inputevents_mvCreateInput[] | Inputevents_mvCreateInput;
  update?:
    | Inputevents_mvUpdateWithWhereUniqueNestedInput[]
    | Inputevents_mvUpdateWithWhereUniqueNestedInput;
  upsert?:
    | Inputevents_mvUpsertWithWhereUniqueNestedInput[]
    | Inputevents_mvUpsertWithWhereUniqueNestedInput;
  delete?: Inputevents_mvWhereUniqueInput[] | Inputevents_mvWhereUniqueInput;
  connect?: Inputevents_mvWhereUniqueInput[] | Inputevents_mvWhereUniqueInput;
  set?: Inputevents_mvWhereUniqueInput[] | Inputevents_mvWhereUniqueInput;
  disconnect?:
    | Inputevents_mvWhereUniqueInput[]
    | Inputevents_mvWhereUniqueInput;
  deleteMany?:
    | Inputevents_mvScalarWhereInput[]
    | Inputevents_mvScalarWhereInput;
  updateMany?:
    | Inputevents_mvUpdateManyWithWhereNestedInput[]
    | Inputevents_mvUpdateManyWithWhereNestedInput;
}

export interface TransferUpdateInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface Inputevents_mvUpdateWithWhereUniqueNestedInput {
  where: Inputevents_mvWhereUniqueInput;
  data: Inputevents_mvUpdateDataInput;
}

export interface IcustayWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  first_careunit?: String;
  first_careunit_not?: String;
  first_careunit_in?: String[] | String;
  first_careunit_not_in?: String[] | String;
  first_careunit_lt?: String;
  first_careunit_lte?: String;
  first_careunit_gt?: String;
  first_careunit_gte?: String;
  first_careunit_contains?: String;
  first_careunit_not_contains?: String;
  first_careunit_starts_with?: String;
  first_careunit_not_starts_with?: String;
  first_careunit_ends_with?: String;
  first_careunit_not_ends_with?: String;
  first_wardid?: Int;
  first_wardid_not?: Int;
  first_wardid_in?: Int[] | Int;
  first_wardid_not_in?: Int[] | Int;
  first_wardid_lt?: Int;
  first_wardid_lte?: Int;
  first_wardid_gt?: Int;
  first_wardid_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  inputevents_cv_every?: Inputevents_cvWhereInput;
  inputevents_cv_some?: Inputevents_cvWhereInput;
  inputevents_cv_none?: Inputevents_cvWhereInput;
  inputevents_mv_every?: Inputevents_mvWhereInput;
  inputevents_mv_some?: Inputevents_mvWhereInput;
  inputevents_mv_none?: Inputevents_mvWhereInput;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  last_careunit?: String;
  last_careunit_not?: String;
  last_careunit_in?: String[] | String;
  last_careunit_not_in?: String[] | String;
  last_careunit_lt?: String;
  last_careunit_lte?: String;
  last_careunit_gt?: String;
  last_careunit_gte?: String;
  last_careunit_contains?: String;
  last_careunit_not_contains?: String;
  last_careunit_starts_with?: String;
  last_careunit_not_starts_with?: String;
  last_careunit_ends_with?: String;
  last_careunit_not_ends_with?: String;
  last_wardid?: Int;
  last_wardid_not?: Int;
  last_wardid_in?: Int[] | Int;
  last_wardid_not_in?: Int[] | Int;
  last_wardid_lt?: Int;
  last_wardid_lte?: Int;
  last_wardid_gt?: Int;
  last_wardid_gte?: Int;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  prescriptions_every?: PrescriptionWhereInput;
  prescriptions_some?: PrescriptionWhereInput;
  prescriptions_none?: PrescriptionWhereInput;
  procedureevents_mv_every?: Procedureevents_mvWhereInput;
  procedureevents_mv_some?: Procedureevents_mvWhereInput;
  procedureevents_mv_none?: Procedureevents_mvWhereInput;
  transfers_every?: TransferWhereInput;
  transfers_some?: TransferWhereInput;
  transfers_none?: TransferWhereInput;
  AND?: IcustayWhereInput[] | IcustayWhereInput;
  OR?: IcustayWhereInput[] | IcustayWhereInput;
  NOT?: IcustayWhereInput[] | IcustayWhereInput;
}

export interface Inputevents_mvUpdateDataInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface AdmissionUpdateManyWithWhereNestedInput {
  where: AdmissionScalarWhereInput;
  data: AdmissionUpdateManyDataInput;
}

export interface Inputevents_mvUpsertWithWhereUniqueNestedInput {
  where: Inputevents_mvWhereUniqueInput;
  update: Inputevents_mvUpdateDataInput;
  create: Inputevents_mvCreateInput;
}

export interface PatientUpdateInput {
  admissions?: AdmissionUpdateManyInput;
  callout?: CalloutUpdateManyInput;
  chartevents?: CharteventUpdateManyInput;
  cptevents?: CpteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  diagnoses_icd?: Diagnoses_icdUpdateManyInput;
  dob?: DateTimeInput;
  dod?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  drgcodes?: DrgcodeUpdateManyInput;
  expire_flag?: Int;
  gender?: String;
  icustays?: IcustayUpdateManyInput;
  inputevents_cv?: Inputevents_cvUpdateManyInput;
  inputevents_mv?: Inputevents_mvUpdateManyInput;
  labevents?: LabeventUpdateManyInput;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: Procedureevents_mvUpdateManyInput;
  procedures_icd?: Procedures_icdUpdateManyInput;
  services?: ServiceUpdateManyInput;
  subject_id?: Int;
  transfers?: TransferUpdateManyInput;
}

export interface Inputevents_mvScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  ordercomponenttypedescription?: String;
  ordercomponenttypedescription_not?: String;
  ordercomponenttypedescription_in?: String[] | String;
  ordercomponenttypedescription_not_in?: String[] | String;
  ordercomponenttypedescription_lt?: String;
  ordercomponenttypedescription_lte?: String;
  ordercomponenttypedescription_gt?: String;
  ordercomponenttypedescription_gte?: String;
  ordercomponenttypedescription_contains?: String;
  ordercomponenttypedescription_not_contains?: String;
  ordercomponenttypedescription_starts_with?: String;
  ordercomponenttypedescription_not_starts_with?: String;
  ordercomponenttypedescription_ends_with?: String;
  ordercomponenttypedescription_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  patientweight?: Float;
  patientweight_not?: Float;
  patientweight_in?: Float[] | Float;
  patientweight_not_in?: Float[] | Float;
  patientweight_lt?: Float;
  patientweight_lte?: Float;
  patientweight_gt?: Float;
  patientweight_gte?: Float;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  totalamount?: Float;
  totalamount_not?: Float;
  totalamount_in?: Float[] | Float;
  totalamount_not_in?: Float[] | Float;
  totalamount_lt?: Float;
  totalamount_lte?: Float;
  totalamount_gt?: Float;
  totalamount_gte?: Float;
  totalamountuom?: String;
  totalamountuom_not?: String;
  totalamountuom_in?: String[] | String;
  totalamountuom_not_in?: String[] | String;
  totalamountuom_lt?: String;
  totalamountuom_lte?: String;
  totalamountuom_gt?: String;
  totalamountuom_gte?: String;
  totalamountuom_contains?: String;
  totalamountuom_not_contains?: String;
  totalamountuom_starts_with?: String;
  totalamountuom_not_starts_with?: String;
  totalamountuom_ends_with?: String;
  totalamountuom_not_ends_with?: String;
  AND?: Inputevents_mvScalarWhereInput[] | Inputevents_mvScalarWhereInput;
  OR?: Inputevents_mvScalarWhereInput[] | Inputevents_mvScalarWhereInput;
  NOT?: Inputevents_mvScalarWhereInput[] | Inputevents_mvScalarWhereInput;
}

export interface Diagnoses_icdWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: Diagnoses_icdWhereInput[] | Diagnoses_icdWhereInput;
  OR?: Diagnoses_icdWhereInput[] | Diagnoses_icdWhereInput;
  NOT?: Diagnoses_icdWhereInput[] | Diagnoses_icdWhereInput;
}

export interface Inputevents_mvUpdateManyWithWhereNestedInput {
  where: Inputevents_mvScalarWhereInput;
  data: Inputevents_mvUpdateManyDataInput;
}

export interface Inputevents_mvUpdateInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface Inputevents_mvUpdateManyDataInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface DrgcodeUpdateInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface OutputeventUpdateManyInput {
  create?: OutputeventCreateInput[] | OutputeventCreateInput;
  update?:
    | OutputeventUpdateWithWhereUniqueNestedInput[]
    | OutputeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | OutputeventUpsertWithWhereUniqueNestedInput[]
    | OutputeventUpsertWithWhereUniqueNestedInput;
  delete?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  connect?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  set?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  disconnect?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  deleteMany?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
  updateMany?:
    | OutputeventUpdateManyWithWhereNestedInput[]
    | OutputeventUpdateManyWithWhereNestedInput;
}

export interface CpteventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  costcenter?: String;
  costcenter_not?: String;
  costcenter_in?: String[] | String;
  costcenter_not_in?: String[] | String;
  costcenter_lt?: String;
  costcenter_lte?: String;
  costcenter_gt?: String;
  costcenter_gte?: String;
  costcenter_contains?: String;
  costcenter_not_contains?: String;
  costcenter_starts_with?: String;
  costcenter_not_starts_with?: String;
  costcenter_ends_with?: String;
  costcenter_not_ends_with?: String;
  cpt_cd?: String;
  cpt_cd_not?: String;
  cpt_cd_in?: String[] | String;
  cpt_cd_not_in?: String[] | String;
  cpt_cd_lt?: String;
  cpt_cd_lte?: String;
  cpt_cd_gt?: String;
  cpt_cd_gte?: String;
  cpt_cd_contains?: String;
  cpt_cd_not_contains?: String;
  cpt_cd_starts_with?: String;
  cpt_cd_not_starts_with?: String;
  cpt_cd_ends_with?: String;
  cpt_cd_not_ends_with?: String;
  cpt_number?: Int;
  cpt_number_not?: Int;
  cpt_number_in?: Int[] | Int;
  cpt_number_not_in?: Int[] | Int;
  cpt_number_lt?: Int;
  cpt_number_lte?: Int;
  cpt_number_gt?: Int;
  cpt_number_gte?: Int;
  cpt_suffix?: String;
  cpt_suffix_not?: String;
  cpt_suffix_in?: String[] | String;
  cpt_suffix_not_in?: String[] | String;
  cpt_suffix_lt?: String;
  cpt_suffix_lte?: String;
  cpt_suffix_gt?: String;
  cpt_suffix_gte?: String;
  cpt_suffix_contains?: String;
  cpt_suffix_not_contains?: String;
  cpt_suffix_starts_with?: String;
  cpt_suffix_not_starts_with?: String;
  cpt_suffix_ends_with?: String;
  cpt_suffix_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  sectionheader?: String;
  sectionheader_not?: String;
  sectionheader_in?: String[] | String;
  sectionheader_not_in?: String[] | String;
  sectionheader_lt?: String;
  sectionheader_lte?: String;
  sectionheader_gt?: String;
  sectionheader_gte?: String;
  sectionheader_contains?: String;
  sectionheader_not_contains?: String;
  sectionheader_starts_with?: String;
  sectionheader_not_starts_with?: String;
  sectionheader_ends_with?: String;
  sectionheader_not_ends_with?: String;
  subsectionheader?: String;
  subsectionheader_not?: String;
  subsectionheader_in?: String[] | String;
  subsectionheader_not_in?: String[] | String;
  subsectionheader_lt?: String;
  subsectionheader_lte?: String;
  subsectionheader_gt?: String;
  subsectionheader_gte?: String;
  subsectionheader_contains?: String;
  subsectionheader_not_contains?: String;
  subsectionheader_starts_with?: String;
  subsectionheader_not_starts_with?: String;
  subsectionheader_ends_with?: String;
  subsectionheader_not_ends_with?: String;
  ticket_id_seq?: Int;
  ticket_id_seq_not?: Int;
  ticket_id_seq_in?: Int[] | Int;
  ticket_id_seq_not_in?: Int[] | Int;
  ticket_id_seq_lt?: Int;
  ticket_id_seq_lte?: Int;
  ticket_id_seq_gt?: Int;
  ticket_id_seq_gte?: Int;
  AND?: CpteventWhereInput[] | CpteventWhereInput;
  OR?: CpteventWhereInput[] | CpteventWhereInput;
  NOT?: CpteventWhereInput[] | CpteventWhereInput;
}

export interface OutputeventUpdateWithWhereUniqueNestedInput {
  where: OutputeventWhereUniqueInput;
  data: OutputeventUpdateDataInput;
}

export interface D_icd_procedureUpdateInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface OutputeventUpdateDataInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface D_cptCreateInput {
  category: Int;
  codesuffix?: String;
  maxcodeinsubsection: Int;
  mincodeinsubsection: Int;
  sectionheader: String;
  sectionrange: String;
  subsectionheader: String;
  subsectionrange: String;
}

export interface OutputeventUpsertWithWhereUniqueNestedInput {
  where: OutputeventWhereUniqueInput;
  update: OutputeventUpdateDataInput;
  create: OutputeventCreateInput;
}

export interface CharteventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: CharteventWhereInput[] | CharteventWhereInput;
  OR?: CharteventWhereInput[] | CharteventWhereInput;
  NOT?: CharteventWhereInput[] | CharteventWhereInput;
}

export interface OutputeventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  iserror?: Int;
  iserror_not?: Int;
  iserror_in?: Int[] | Int;
  iserror_not_in?: Int[] | Int;
  iserror_lt?: Int;
  iserror_lte?: Int;
  iserror_gt?: Int;
  iserror_gte?: Int;
  newbottle?: String;
  newbottle_not?: String;
  newbottle_in?: String[] | String;
  newbottle_not_in?: String[] | String;
  newbottle_lt?: String;
  newbottle_lte?: String;
  newbottle_gt?: String;
  newbottle_gte?: String;
  newbottle_contains?: String;
  newbottle_not_contains?: String;
  newbottle_starts_with?: String;
  newbottle_not_starts_with?: String;
  newbottle_ends_with?: String;
  newbottle_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
  OR?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
  NOT?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
}

export interface Chartevents_6CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventUpdateManyWithWhereNestedInput {
  where: OutputeventScalarWhereInput;
  data: OutputeventUpdateManyDataInput;
}

export interface Chartevents_3UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventUpdateManyDataInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface Chartevents_16UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface PrescriptionUpdateManyInput {
  create?: PrescriptionCreateInput[] | PrescriptionCreateInput;
  update?:
    | PrescriptionUpdateWithWhereUniqueNestedInput[]
    | PrescriptionUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PrescriptionUpsertWithWhereUniqueNestedInput[]
    | PrescriptionUpsertWithWhereUniqueNestedInput;
  delete?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  connect?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  set?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  disconnect?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  deleteMany?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
  updateMany?:
    | PrescriptionUpdateManyWithWhereNestedInput[]
    | PrescriptionUpdateManyWithWhereNestedInput;
}

export type DatetimeeventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PrescriptionUpdateWithWhereUniqueNestedInput {
  where: PrescriptionWhereUniqueInput;
  data: PrescriptionUpdateDataInput;
}

export type DrgcodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PrescriptionUpdateDataInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface NoteeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NoteeventWhereInput;
  AND?: NoteeventSubscriptionWhereInput[] | NoteeventSubscriptionWhereInput;
  OR?: NoteeventSubscriptionWhereInput[] | NoteeventSubscriptionWhereInput;
  NOT?: NoteeventSubscriptionWhereInput[] | NoteeventSubscriptionWhereInput;
}

export interface PrescriptionUpsertWithWhereUniqueNestedInput {
  where: PrescriptionWhereUniqueInput;
  update: PrescriptionUpdateDataInput;
  create: PrescriptionCreateInput;
}

export interface D_icd_diagnosisSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: D_icd_diagnosisWhereInput;
  AND?:
    | D_icd_diagnosisSubscriptionWhereInput[]
    | D_icd_diagnosisSubscriptionWhereInput;
  OR?:
    | D_icd_diagnosisSubscriptionWhereInput[]
    | D_icd_diagnosisSubscriptionWhereInput;
  NOT?:
    | D_icd_diagnosisSubscriptionWhereInput[]
    | D_icd_diagnosisSubscriptionWhereInput;
}

export interface PrescriptionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dose_unit_rx?: String;
  dose_unit_rx_not?: String;
  dose_unit_rx_in?: String[] | String;
  dose_unit_rx_not_in?: String[] | String;
  dose_unit_rx_lt?: String;
  dose_unit_rx_lte?: String;
  dose_unit_rx_gt?: String;
  dose_unit_rx_gte?: String;
  dose_unit_rx_contains?: String;
  dose_unit_rx_not_contains?: String;
  dose_unit_rx_starts_with?: String;
  dose_unit_rx_not_starts_with?: String;
  dose_unit_rx_ends_with?: String;
  dose_unit_rx_not_ends_with?: String;
  dose_val_rx?: String;
  dose_val_rx_not?: String;
  dose_val_rx_in?: String[] | String;
  dose_val_rx_not_in?: String[] | String;
  dose_val_rx_lt?: String;
  dose_val_rx_lte?: String;
  dose_val_rx_gt?: String;
  dose_val_rx_gte?: String;
  dose_val_rx_contains?: String;
  dose_val_rx_not_contains?: String;
  dose_val_rx_starts_with?: String;
  dose_val_rx_not_starts_with?: String;
  dose_val_rx_ends_with?: String;
  dose_val_rx_not_ends_with?: String;
  drug?: String;
  drug_not?: String;
  drug_in?: String[] | String;
  drug_not_in?: String[] | String;
  drug_lt?: String;
  drug_lte?: String;
  drug_gt?: String;
  drug_gte?: String;
  drug_contains?: String;
  drug_not_contains?: String;
  drug_starts_with?: String;
  drug_not_starts_with?: String;
  drug_ends_with?: String;
  drug_not_ends_with?: String;
  drug_name_generic?: String;
  drug_name_generic_not?: String;
  drug_name_generic_in?: String[] | String;
  drug_name_generic_not_in?: String[] | String;
  drug_name_generic_lt?: String;
  drug_name_generic_lte?: String;
  drug_name_generic_gt?: String;
  drug_name_generic_gte?: String;
  drug_name_generic_contains?: String;
  drug_name_generic_not_contains?: String;
  drug_name_generic_starts_with?: String;
  drug_name_generic_not_starts_with?: String;
  drug_name_generic_ends_with?: String;
  drug_name_generic_not_ends_with?: String;
  drug_name_poe?: String;
  drug_name_poe_not?: String;
  drug_name_poe_in?: String[] | String;
  drug_name_poe_not_in?: String[] | String;
  drug_name_poe_lt?: String;
  drug_name_poe_lte?: String;
  drug_name_poe_gt?: String;
  drug_name_poe_gte?: String;
  drug_name_poe_contains?: String;
  drug_name_poe_not_contains?: String;
  drug_name_poe_starts_with?: String;
  drug_name_poe_not_starts_with?: String;
  drug_name_poe_ends_with?: String;
  drug_name_poe_not_ends_with?: String;
  drug_type?: String;
  drug_type_not?: String;
  drug_type_in?: String[] | String;
  drug_type_not_in?: String[] | String;
  drug_type_lt?: String;
  drug_type_lte?: String;
  drug_type_gt?: String;
  drug_type_gte?: String;
  drug_type_contains?: String;
  drug_type_not_contains?: String;
  drug_type_starts_with?: String;
  drug_type_not_starts_with?: String;
  drug_type_ends_with?: String;
  drug_type_not_ends_with?: String;
  enddate?: DateTimeInput;
  enddate_not?: DateTimeInput;
  enddate_in?: DateTimeInput[] | DateTimeInput;
  enddate_not_in?: DateTimeInput[] | DateTimeInput;
  enddate_lt?: DateTimeInput;
  enddate_lte?: DateTimeInput;
  enddate_gt?: DateTimeInput;
  enddate_gte?: DateTimeInput;
  form_unit_disp?: String;
  form_unit_disp_not?: String;
  form_unit_disp_in?: String[] | String;
  form_unit_disp_not_in?: String[] | String;
  form_unit_disp_lt?: String;
  form_unit_disp_lte?: String;
  form_unit_disp_gt?: String;
  form_unit_disp_gte?: String;
  form_unit_disp_contains?: String;
  form_unit_disp_not_contains?: String;
  form_unit_disp_starts_with?: String;
  form_unit_disp_not_starts_with?: String;
  form_unit_disp_ends_with?: String;
  form_unit_disp_not_ends_with?: String;
  form_val_disp?: String;
  form_val_disp_not?: String;
  form_val_disp_in?: String[] | String;
  form_val_disp_not_in?: String[] | String;
  form_val_disp_lt?: String;
  form_val_disp_lte?: String;
  form_val_disp_gt?: String;
  form_val_disp_gte?: String;
  form_val_disp_contains?: String;
  form_val_disp_not_contains?: String;
  form_val_disp_starts_with?: String;
  form_val_disp_not_starts_with?: String;
  form_val_disp_ends_with?: String;
  form_val_disp_not_ends_with?: String;
  formulary_drug_cd?: String;
  formulary_drug_cd_not?: String;
  formulary_drug_cd_in?: String[] | String;
  formulary_drug_cd_not_in?: String[] | String;
  formulary_drug_cd_lt?: String;
  formulary_drug_cd_lte?: String;
  formulary_drug_cd_gt?: String;
  formulary_drug_cd_gte?: String;
  formulary_drug_cd_contains?: String;
  formulary_drug_cd_not_contains?: String;
  formulary_drug_cd_starts_with?: String;
  formulary_drug_cd_not_starts_with?: String;
  formulary_drug_cd_ends_with?: String;
  formulary_drug_cd_not_ends_with?: String;
  gsn?: String;
  gsn_not?: String;
  gsn_in?: String[] | String;
  gsn_not_in?: String[] | String;
  gsn_lt?: String;
  gsn_lte?: String;
  gsn_gt?: String;
  gsn_gte?: String;
  gsn_contains?: String;
  gsn_not_contains?: String;
  gsn_starts_with?: String;
  gsn_not_starts_with?: String;
  gsn_ends_with?: String;
  gsn_not_ends_with?: String;
  ndc?: String;
  ndc_not?: String;
  ndc_in?: String[] | String;
  ndc_not_in?: String[] | String;
  ndc_lt?: String;
  ndc_lte?: String;
  ndc_gt?: String;
  ndc_gte?: String;
  ndc_contains?: String;
  ndc_not_contains?: String;
  ndc_starts_with?: String;
  ndc_not_starts_with?: String;
  ndc_ends_with?: String;
  ndc_not_ends_with?: String;
  prod_strength?: String;
  prod_strength_not?: String;
  prod_strength_in?: String[] | String;
  prod_strength_not_in?: String[] | String;
  prod_strength_lt?: String;
  prod_strength_lte?: String;
  prod_strength_gt?: String;
  prod_strength_gte?: String;
  prod_strength_contains?: String;
  prod_strength_not_contains?: String;
  prod_strength_starts_with?: String;
  prod_strength_not_starts_with?: String;
  prod_strength_ends_with?: String;
  prod_strength_not_ends_with?: String;
  route?: String;
  route_not?: String;
  route_in?: String[] | String;
  route_not_in?: String[] | String;
  route_lt?: String;
  route_lte?: String;
  route_gt?: String;
  route_gte?: String;
  route_contains?: String;
  route_not_contains?: String;
  route_starts_with?: String;
  route_not_starts_with?: String;
  route_ends_with?: String;
  route_not_ends_with?: String;
  startdate?: DateTimeInput;
  startdate_not?: DateTimeInput;
  startdate_in?: DateTimeInput[] | DateTimeInput;
  startdate_not_in?: DateTimeInput[] | DateTimeInput;
  startdate_lt?: DateTimeInput;
  startdate_lte?: DateTimeInput;
  startdate_gt?: DateTimeInput;
  startdate_gte?: DateTimeInput;
  AND?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
  OR?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
  NOT?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
}

export interface Chartevents_17SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_17WhereInput;
  AND?:
    | Chartevents_17SubscriptionWhereInput[]
    | Chartevents_17SubscriptionWhereInput;
  OR?:
    | Chartevents_17SubscriptionWhereInput[]
    | Chartevents_17SubscriptionWhereInput;
  NOT?:
    | Chartevents_17SubscriptionWhereInput[]
    | Chartevents_17SubscriptionWhereInput;
}

export interface PrescriptionUpdateManyWithWhereNestedInput {
  where: PrescriptionScalarWhereInput;
  data: PrescriptionUpdateManyDataInput;
}

export interface Inputevents_mvWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  ordercomponenttypedescription?: String;
  ordercomponenttypedescription_not?: String;
  ordercomponenttypedescription_in?: String[] | String;
  ordercomponenttypedescription_not_in?: String[] | String;
  ordercomponenttypedescription_lt?: String;
  ordercomponenttypedescription_lte?: String;
  ordercomponenttypedescription_gt?: String;
  ordercomponenttypedescription_gte?: String;
  ordercomponenttypedescription_contains?: String;
  ordercomponenttypedescription_not_contains?: String;
  ordercomponenttypedescription_starts_with?: String;
  ordercomponenttypedescription_not_starts_with?: String;
  ordercomponenttypedescription_ends_with?: String;
  ordercomponenttypedescription_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  patientweight?: Float;
  patientweight_not?: Float;
  patientweight_in?: Float[] | Float;
  patientweight_not_in?: Float[] | Float;
  patientweight_lt?: Float;
  patientweight_lte?: Float;
  patientweight_gt?: Float;
  patientweight_gte?: Float;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  totalamount?: Float;
  totalamount_not?: Float;
  totalamount_in?: Float[] | Float;
  totalamount_not_in?: Float[] | Float;
  totalamount_lt?: Float;
  totalamount_lte?: Float;
  totalamount_gt?: Float;
  totalamount_gte?: Float;
  totalamountuom?: String;
  totalamountuom_not?: String;
  totalamountuom_in?: String[] | String;
  totalamountuom_not_in?: String[] | String;
  totalamountuom_lt?: String;
  totalamountuom_lte?: String;
  totalamountuom_gt?: String;
  totalamountuom_gte?: String;
  totalamountuom_contains?: String;
  totalamountuom_not_contains?: String;
  totalamountuom_starts_with?: String;
  totalamountuom_not_starts_with?: String;
  totalamountuom_ends_with?: String;
  totalamountuom_not_ends_with?: String;
  AND?: Inputevents_mvWhereInput[] | Inputevents_mvWhereInput;
  OR?: Inputevents_mvWhereInput[] | Inputevents_mvWhereInput;
  NOT?: Inputevents_mvWhereInput[] | Inputevents_mvWhereInput;
}

export interface PrescriptionUpdateManyDataInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface PrescriptionUpdateInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface Procedureevents_mvUpdateManyInput {
  create?: Procedureevents_mvCreateInput[] | Procedureevents_mvCreateInput;
  update?:
    | Procedureevents_mvUpdateWithWhereUniqueNestedInput[]
    | Procedureevents_mvUpdateWithWhereUniqueNestedInput;
  upsert?:
    | Procedureevents_mvUpsertWithWhereUniqueNestedInput[]
    | Procedureevents_mvUpsertWithWhereUniqueNestedInput;
  delete?:
    | Procedureevents_mvWhereUniqueInput[]
    | Procedureevents_mvWhereUniqueInput;
  connect?:
    | Procedureevents_mvWhereUniqueInput[]
    | Procedureevents_mvWhereUniqueInput;
  set?:
    | Procedureevents_mvWhereUniqueInput[]
    | Procedureevents_mvWhereUniqueInput;
  disconnect?:
    | Procedureevents_mvWhereUniqueInput[]
    | Procedureevents_mvWhereUniqueInput;
  deleteMany?:
    | Procedureevents_mvScalarWhereInput[]
    | Procedureevents_mvScalarWhereInput;
  updateMany?:
    | Procedureevents_mvUpdateManyWithWhereNestedInput[]
    | Procedureevents_mvUpdateManyWithWhereNestedInput;
}

export interface OutputeventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface Procedureevents_mvUpdateWithWhereUniqueNestedInput {
  where: Procedureevents_mvWhereUniqueInput;
  data: Procedureevents_mvUpdateDataInput;
}

export interface DatetimeeventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: DateTimeInput;
  value_not?: DateTimeInput;
  value_in?: DateTimeInput[] | DateTimeInput;
  value_not_in?: DateTimeInput[] | DateTimeInput;
  value_lt?: DateTimeInput;
  value_lte?: DateTimeInput;
  value_gt?: DateTimeInput;
  value_gte?: DateTimeInput;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: DatetimeeventWhereInput[] | DatetimeeventWhereInput;
  OR?: DatetimeeventWhereInput[] | DatetimeeventWhereInput;
  NOT?: DatetimeeventWhereInput[] | DatetimeeventWhereInput;
}

export interface Procedureevents_mvUpdateDataInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface D_itemUpdateInput {
  abbreviation?: String;
  category?: String;
  chartevents?: CharteventUpdateManyInput;
  conceptid?: Int;
  datetimeevents?: DatetimeeventUpdateManyInput;
  dbsource?: String;
  inputevents_mv?: Inputevents_mvUpdateManyInput;
  itemid?: Int;
  label?: String;
  linksto?: String;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  param_type?: String;
  procedureevents_mv?: Procedureevents_mvUpdateManyInput;
  unitname?: String;
}

export interface Procedureevents_mvUpsertWithWhereUniqueNestedInput {
  where: Procedureevents_mvWhereUniqueInput;
  update: Procedureevents_mvUpdateDataInput;
  create: Procedureevents_mvCreateInput;
}

export interface Chartevents_9UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedureevents_mvScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  locationcategory?: String;
  locationcategory_not?: String;
  locationcategory_in?: String[] | String;
  locationcategory_not_in?: String[] | String;
  locationcategory_lt?: String;
  locationcategory_lte?: String;
  locationcategory_gt?: String;
  locationcategory_gte?: String;
  locationcategory_contains?: String;
  locationcategory_not_contains?: String;
  locationcategory_starts_with?: String;
  locationcategory_not_starts_with?: String;
  locationcategory_ends_with?: String;
  locationcategory_not_ends_with?: String;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?:
    | Procedureevents_mvScalarWhereInput[]
    | Procedureevents_mvScalarWhereInput;
  OR?:
    | Procedureevents_mvScalarWhereInput[]
    | Procedureevents_mvScalarWhereInput;
  NOT?:
    | Procedureevents_mvScalarWhereInput[]
    | Procedureevents_mvScalarWhereInput;
}

export interface Chartevents_4UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedureevents_mvUpdateManyWithWhereNestedInput {
  where: Procedureevents_mvScalarWhereInput;
  data: Procedureevents_mvUpdateManyDataInput;
}

export interface Chartevents_15UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Procedureevents_mvUpdateManyDataInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface NoteeventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  iserror?: String;
  iserror_not?: String;
  iserror_in?: String[] | String;
  iserror_not_in?: String[] | String;
  iserror_lt?: String;
  iserror_lte?: String;
  iserror_gt?: String;
  iserror_gte?: String;
  iserror_contains?: String;
  iserror_not_contains?: String;
  iserror_starts_with?: String;
  iserror_not_starts_with?: String;
  iserror_ends_with?: String;
  iserror_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: NoteeventWhereInput[] | NoteeventWhereInput;
  OR?: NoteeventWhereInput[] | NoteeventWhereInput;
  NOT?: NoteeventWhereInput[] | NoteeventWhereInput;
}

export interface TransferUpdateManyInput {
  create?: TransferCreateInput[] | TransferCreateInput;
  update?:
    | TransferUpdateWithWhereUniqueNestedInput[]
    | TransferUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TransferUpsertWithWhereUniqueNestedInput[]
    | TransferUpsertWithWhereUniqueNestedInput;
  delete?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  connect?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  set?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  disconnect?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  deleteMany?: TransferScalarWhereInput[] | TransferScalarWhereInput;
  updateMany?:
    | TransferUpdateManyWithWhereNestedInput[]
    | TransferUpdateManyWithWhereNestedInput;
}

export interface TransferWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  eventtype?: String;
  eventtype_not?: String;
  eventtype_in?: String[] | String;
  eventtype_not_in?: String[] | String;
  eventtype_lt?: String;
  eventtype_lte?: String;
  eventtype_gt?: String;
  eventtype_gte?: String;
  eventtype_contains?: String;
  eventtype_not_contains?: String;
  eventtype_starts_with?: String;
  eventtype_not_starts_with?: String;
  eventtype_ends_with?: String;
  eventtype_not_ends_with?: String;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  prev_careunit?: String;
  prev_careunit_not?: String;
  prev_careunit_in?: String[] | String;
  prev_careunit_not_in?: String[] | String;
  prev_careunit_lt?: String;
  prev_careunit_lte?: String;
  prev_careunit_gt?: String;
  prev_careunit_gte?: String;
  prev_careunit_contains?: String;
  prev_careunit_not_contains?: String;
  prev_careunit_starts_with?: String;
  prev_careunit_not_starts_with?: String;
  prev_careunit_ends_with?: String;
  prev_careunit_not_ends_with?: String;
  prev_wardid?: Int;
  prev_wardid_not?: Int;
  prev_wardid_in?: Int[] | Int;
  prev_wardid_not_in?: Int[] | Int;
  prev_wardid_lt?: Int;
  prev_wardid_lte?: Int;
  prev_wardid_gt?: Int;
  prev_wardid_gte?: Int;
  AND?: TransferWhereInput[] | TransferWhereInput;
  OR?: TransferWhereInput[] | TransferWhereInput;
  NOT?: TransferWhereInput[] | TransferWhereInput;
}

export interface TransferUpdateWithWhereUniqueNestedInput {
  where: TransferWhereUniqueInput;
  data: TransferUpdateDataInput;
}

export interface ServiceUpdateInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface TransferUpdateDataInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface LabeventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface TransferUpsertWithWhereUniqueNestedInput {
  where: TransferWhereUniqueInput;
  update: TransferUpdateDataInput;
  create: TransferCreateInput;
}

export interface D_icd_diagnosisUpdateInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface TransferScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  eventtype?: String;
  eventtype_not?: String;
  eventtype_in?: String[] | String;
  eventtype_not_in?: String[] | String;
  eventtype_lt?: String;
  eventtype_lte?: String;
  eventtype_gt?: String;
  eventtype_gte?: String;
  eventtype_contains?: String;
  eventtype_not_contains?: String;
  eventtype_starts_with?: String;
  eventtype_not_starts_with?: String;
  eventtype_ends_with?: String;
  eventtype_not_ends_with?: String;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  prev_careunit?: String;
  prev_careunit_not?: String;
  prev_careunit_in?: String[] | String;
  prev_careunit_not_in?: String[] | String;
  prev_careunit_lt?: String;
  prev_careunit_lte?: String;
  prev_careunit_gt?: String;
  prev_careunit_gte?: String;
  prev_careunit_contains?: String;
  prev_careunit_not_contains?: String;
  prev_careunit_starts_with?: String;
  prev_careunit_not_starts_with?: String;
  prev_careunit_ends_with?: String;
  prev_careunit_not_ends_with?: String;
  prev_wardid?: Int;
  prev_wardid_not?: Int;
  prev_wardid_in?: Int[] | Int;
  prev_wardid_not_in?: Int[] | Int;
  prev_wardid_lt?: Int;
  prev_wardid_lte?: Int;
  prev_wardid_gt?: Int;
  prev_wardid_gte?: Int;
  AND?: TransferScalarWhereInput[] | TransferScalarWhereInput;
  OR?: TransferScalarWhereInput[] | TransferScalarWhereInput;
  NOT?: TransferScalarWhereInput[] | TransferScalarWhereInput;
}

export interface D_itemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  abbreviation?: String;
  abbreviation_not?: String;
  abbreviation_in?: String[] | String;
  abbreviation_not_in?: String[] | String;
  abbreviation_lt?: String;
  abbreviation_lte?: String;
  abbreviation_gt?: String;
  abbreviation_gte?: String;
  abbreviation_contains?: String;
  abbreviation_not_contains?: String;
  abbreviation_starts_with?: String;
  abbreviation_not_starts_with?: String;
  abbreviation_ends_with?: String;
  abbreviation_not_ends_with?: String;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  conceptid?: Int;
  conceptid_not?: Int;
  conceptid_in?: Int[] | Int;
  conceptid_not_in?: Int[] | Int;
  conceptid_lt?: Int;
  conceptid_lte?: Int;
  conceptid_gt?: Int;
  conceptid_gte?: Int;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  inputevents_mv_every?: Inputevents_mvWhereInput;
  inputevents_mv_some?: Inputevents_mvWhereInput;
  inputevents_mv_none?: Inputevents_mvWhereInput;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  linksto?: String;
  linksto_not?: String;
  linksto_in?: String[] | String;
  linksto_not_in?: String[] | String;
  linksto_lt?: String;
  linksto_lte?: String;
  linksto_gt?: String;
  linksto_gte?: String;
  linksto_contains?: String;
  linksto_not_contains?: String;
  linksto_starts_with?: String;
  linksto_not_starts_with?: String;
  linksto_ends_with?: String;
  linksto_not_ends_with?: String;
  microbiologyevents_every?: MicrobiologyeventWhereInput;
  microbiologyevents_some?: MicrobiologyeventWhereInput;
  microbiologyevents_none?: MicrobiologyeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  param_type?: String;
  param_type_not?: String;
  param_type_in?: String[] | String;
  param_type_not_in?: String[] | String;
  param_type_lt?: String;
  param_type_lte?: String;
  param_type_gt?: String;
  param_type_gte?: String;
  param_type_contains?: String;
  param_type_not_contains?: String;
  param_type_starts_with?: String;
  param_type_not_starts_with?: String;
  param_type_ends_with?: String;
  param_type_not_ends_with?: String;
  procedureevents_mv_every?: Procedureevents_mvWhereInput;
  procedureevents_mv_some?: Procedureevents_mvWhereInput;
  procedureevents_mv_none?: Procedureevents_mvWhereInput;
  unitname?: String;
  unitname_not?: String;
  unitname_in?: String[] | String;
  unitname_not_in?: String[] | String;
  unitname_lt?: String;
  unitname_lte?: String;
  unitname_gt?: String;
  unitname_gte?: String;
  unitname_contains?: String;
  unitname_not_contains?: String;
  unitname_starts_with?: String;
  unitname_not_starts_with?: String;
  unitname_ends_with?: String;
  unitname_not_ends_with?: String;
  AND?: D_itemWhereInput[] | D_itemWhereInput;
  OR?: D_itemWhereInput[] | D_itemWhereInput;
  NOT?: D_itemWhereInput[] | D_itemWhereInput;
}

export interface TransferUpdateManyWithWhereNestedInput {
  where: TransferScalarWhereInput;
  data: TransferUpdateManyDataInput;
}

export type CalloutWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TransferUpdateManyDataInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface DrgcodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  drg_code?: String;
  drg_code_not?: String;
  drg_code_in?: String[] | String;
  drg_code_not_in?: String[] | String;
  drg_code_lt?: String;
  drg_code_lte?: String;
  drg_code_gt?: String;
  drg_code_gte?: String;
  drg_code_contains?: String;
  drg_code_not_contains?: String;
  drg_code_starts_with?: String;
  drg_code_not_starts_with?: String;
  drg_code_ends_with?: String;
  drg_code_not_ends_with?: String;
  drg_mortality?: Int;
  drg_mortality_not?: Int;
  drg_mortality_in?: Int[] | Int;
  drg_mortality_not_in?: Int[] | Int;
  drg_mortality_lt?: Int;
  drg_mortality_lte?: Int;
  drg_mortality_gt?: Int;
  drg_mortality_gte?: Int;
  drg_severity?: Int;
  drg_severity_not?: Int;
  drg_severity_in?: Int[] | Int;
  drg_severity_not_in?: Int[] | Int;
  drg_severity_lt?: Int;
  drg_severity_lte?: Int;
  drg_severity_gt?: Int;
  drg_severity_gte?: Int;
  drg_type?: String;
  drg_type_not?: String;
  drg_type_in?: String[] | String;
  drg_type_not_in?: String[] | String;
  drg_type_lt?: String;
  drg_type_lte?: String;
  drg_type_gt?: String;
  drg_type_gte?: String;
  drg_type_contains?: String;
  drg_type_not_contains?: String;
  drg_type_starts_with?: String;
  drg_type_not_starts_with?: String;
  drg_type_ends_with?: String;
  drg_type_not_ends_with?: String;
  AND?: DrgcodeWhereInput[] | DrgcodeWhereInput;
  OR?: DrgcodeWhereInput[] | DrgcodeWhereInput;
  NOT?: DrgcodeWhereInput[] | DrgcodeWhereInput;
}

export interface IcustayUpdateManyDataInput {
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outtime?: DateTimeInput;
}

export interface IcustayUpdateManyWithWhereNestedInput {
  where: IcustayScalarWhereInput;
  data: IcustayUpdateManyDataInput;
}

export interface IcustayScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  first_careunit?: String;
  first_careunit_not?: String;
  first_careunit_in?: String[] | String;
  first_careunit_not_in?: String[] | String;
  first_careunit_lt?: String;
  first_careunit_lte?: String;
  first_careunit_gt?: String;
  first_careunit_gte?: String;
  first_careunit_contains?: String;
  first_careunit_not_contains?: String;
  first_careunit_starts_with?: String;
  first_careunit_not_starts_with?: String;
  first_careunit_ends_with?: String;
  first_careunit_not_ends_with?: String;
  first_wardid?: Int;
  first_wardid_not?: Int;
  first_wardid_in?: Int[] | Int;
  first_wardid_not_in?: Int[] | Int;
  first_wardid_lt?: Int;
  first_wardid_lte?: Int;
  first_wardid_gt?: Int;
  first_wardid_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  last_careunit?: String;
  last_careunit_not?: String;
  last_careunit_in?: String[] | String;
  last_careunit_not_in?: String[] | String;
  last_careunit_lt?: String;
  last_careunit_lte?: String;
  last_careunit_gt?: String;
  last_careunit_gte?: String;
  last_careunit_contains?: String;
  last_careunit_not_contains?: String;
  last_careunit_starts_with?: String;
  last_careunit_not_starts_with?: String;
  last_careunit_ends_with?: String;
  last_careunit_not_ends_with?: String;
  last_wardid?: Int;
  last_wardid_not?: Int;
  last_wardid_in?: Int[] | Int;
  last_wardid_not_in?: Int[] | Int;
  last_wardid_lt?: Int;
  last_wardid_lte?: Int;
  last_wardid_gt?: Int;
  last_wardid_gte?: Int;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  AND?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
  OR?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
  NOT?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
}

export interface IcustayUpsertWithWhereUniqueNestedInput {
  where: IcustayWhereUniqueInput;
  update: IcustayUpdateDataInput;
  create: IcustayCreateInput;
}

export interface DatetimeeventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_11SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents_11WhereInput;
  AND?:
    | Chartevents_11SubscriptionWhereInput[]
    | Chartevents_11SubscriptionWhereInput;
  OR?:
    | Chartevents_11SubscriptionWhereInput[]
    | Chartevents_11SubscriptionWhereInput;
  NOT?:
    | Chartevents_11SubscriptionWhereInput[]
    | Chartevents_11SubscriptionWhereInput;
}

export type Diagnoses_icdWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type D_icd_diagnosisWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  icd9_code?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface TransferPreviousValues {
  id: ID_Output;
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeOutput;
  los?: Float;
  outtime?: DateTimeOutput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface TransferPreviousValuesPromise
  extends Promise<TransferPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  dbsource: () => Promise<String>;
  eventtype: () => Promise<String>;
  intime: () => Promise<DateTimeOutput>;
  los: () => Promise<Float>;
  outtime: () => Promise<DateTimeOutput>;
  prev_careunit: () => Promise<String>;
  prev_wardid: () => Promise<Int>;
}

export interface TransferPreviousValuesSubscription
  extends Promise<AsyncIterator<TransferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  eventtype: () => Promise<AsyncIterator<String>>;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  los: () => Promise<AsyncIterator<Float>>;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  prev_careunit: () => Promise<AsyncIterator<String>>;
  prev_wardid: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_14 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_14Promise
  extends Promise<Chartevents_14>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_14Subscription
  extends Promise<AsyncIterator<Chartevents_14>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Labevent {
  id: ID_Output;
  charttime?: DateTimeOutput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface LabeventPromise extends Promise<Labevent>, Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  flag: () => Promise<String>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface LabeventSubscription
  extends Promise<AsyncIterator<Labevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  flag: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartevents_13 {
  count: Int;
}

export interface AggregateChartevents_13Promise
  extends Promise<AggregateChartevents_13>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_13Subscription
  extends Promise<AsyncIterator<AggregateChartevents_13>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Transfer {
  id: ID_Output;
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeOutput;
  los?: Float;
  outtime?: DateTimeOutput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface TransferPromise extends Promise<Transfer>, Fragmentable {
  id: () => Promise<ID_Output>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  dbsource: () => Promise<String>;
  eventtype: () => Promise<String>;
  intime: () => Promise<DateTimeOutput>;
  los: () => Promise<Float>;
  outtime: () => Promise<DateTimeOutput>;
  prev_careunit: () => Promise<String>;
  prev_wardid: () => Promise<Int>;
}

export interface TransferSubscription
  extends Promise<AsyncIterator<Transfer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  eventtype: () => Promise<AsyncIterator<String>>;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  los: () => Promise<AsyncIterator<Float>>;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  prev_careunit: () => Promise<AsyncIterator<String>>;
  prev_wardid: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_13Edge {
  node: Chartevents_13;
  cursor: String;
}

export interface Chartevents_13EdgePromise
  extends Promise<Chartevents_13Edge>,
    Fragmentable {
  node: <T = Chartevents_13Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_13EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_13Edge>>,
    Fragmentable {
  node: <T = Chartevents_13Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTransfer {
  count: Int;
}

export interface AggregateTransferPromise
  extends Promise<AggregateTransfer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransferSubscription
  extends Promise<AsyncIterator<AggregateTransfer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_13Connection {
  pageInfo: PageInfo;
  edges: Chartevents_13Edge[];
}

export interface Chartevents_13ConnectionPromise
  extends Promise<Chartevents_13Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_13Edge>>() => T;
  aggregate: <T = AggregateChartevents_13Promise>() => T;
}

export interface Chartevents_13ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_13Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_13EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_13Subscription>() => T;
}

export interface TransferConnection {
  pageInfo: PageInfo;
  edges: TransferEdge[];
}

export interface TransferConnectionPromise
  extends Promise<TransferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransferEdge>>() => T;
  aggregate: <T = AggregateTransferPromise>() => T;
}

export interface TransferConnectionSubscription
  extends Promise<AsyncIterator<TransferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransferEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransferSubscription>() => T;
}

export interface ServiceEdge {
  node: Service;
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProcedures_icd {
  count: Int;
}

export interface AggregateProcedures_icdPromise
  extends Promise<AggregateProcedures_icd>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProcedures_icdSubscription
  extends Promise<AsyncIterator<AggregateProcedures_icd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdmissionSubscriptionPayload {
  mutation: MutationType;
  node: Admission;
  updatedFields: String[];
  previousValues: AdmissionPreviousValues;
}

export interface AdmissionSubscriptionPayloadPromise
  extends Promise<AdmissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdmissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdmissionPreviousValuesPromise>() => T;
}

export interface AdmissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdmissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdmissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdmissionPreviousValuesSubscription>() => T;
}

export interface Procedures_icdConnection {
  pageInfo: PageInfo;
  edges: Procedures_icdEdge[];
}

export interface Procedures_icdConnectionPromise
  extends Promise<Procedures_icdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Procedures_icdEdge>>() => T;
  aggregate: <T = AggregateProcedures_icdPromise>() => T;
}

export interface Procedures_icdConnectionSubscription
  extends Promise<AsyncIterator<Procedures_icdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Procedures_icdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProcedures_icdSubscription>() => T;
}

export interface AdmissionPreviousValues {
  id: ID_Output;
  admission_location: String;
  admission_type: String;
  admittime: DateTimeOutput;
  deathtime?: DateTimeOutput;
  diagnosis?: String;
  discharge_location: String;
  dischtime: DateTimeOutput;
  edouttime?: DateTimeOutput;
  edregtime?: DateTimeOutput;
  ethnicity: String;
  hadm_id: Int;
  has_chartevents_data: Int;
  hospital_expire_flag?: Int;
  insurance: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface AdmissionPreviousValuesPromise
  extends Promise<AdmissionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  admission_location: () => Promise<String>;
  admission_type: () => Promise<String>;
  admittime: () => Promise<DateTimeOutput>;
  deathtime: () => Promise<DateTimeOutput>;
  diagnosis: () => Promise<String>;
  discharge_location: () => Promise<String>;
  dischtime: () => Promise<DateTimeOutput>;
  edouttime: () => Promise<DateTimeOutput>;
  edregtime: () => Promise<DateTimeOutput>;
  ethnicity: () => Promise<String>;
  hadm_id: () => Promise<Int>;
  has_chartevents_data: () => Promise<Int>;
  hospital_expire_flag: () => Promise<Int>;
  insurance: () => Promise<String>;
  language: () => Promise<String>;
  marital_status: () => Promise<String>;
  religion: () => Promise<String>;
}

export interface AdmissionPreviousValuesSubscription
  extends Promise<AsyncIterator<AdmissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  admission_location: () => Promise<AsyncIterator<String>>;
  admission_type: () => Promise<AsyncIterator<String>>;
  admittime: () => Promise<AsyncIterator<DateTimeOutput>>;
  deathtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  diagnosis: () => Promise<AsyncIterator<String>>;
  discharge_location: () => Promise<AsyncIterator<String>>;
  dischtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  edouttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  edregtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  has_chartevents_data: () => Promise<AsyncIterator<Int>>;
  hospital_expire_flag: () => Promise<AsyncIterator<Int>>;
  insurance: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  marital_status: () => Promise<AsyncIterator<String>>;
  religion: () => Promise<AsyncIterator<String>>;
}

export interface Procedureevents_mvEdge {
  node: Procedureevents_mv;
  cursor: String;
}

export interface Procedureevents_mvEdgePromise
  extends Promise<Procedureevents_mvEdge>,
    Fragmentable {
  node: <T = Procedureevents_mvPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Procedureevents_mvEdgeSubscription
  extends Promise<AsyncIterator<Procedureevents_mvEdge>>,
    Fragmentable {
  node: <T = Procedureevents_mvSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_13 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_13Promise
  extends Promise<Chartevents_13>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_13Subscription
  extends Promise<AsyncIterator<Chartevents_13>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregatePrescription {
  count: Int;
}

export interface AggregatePrescriptionPromise
  extends Promise<AggregatePrescription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePrescriptionSubscription
  extends Promise<AsyncIterator<AggregatePrescription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CalloutSubscriptionPayload {
  mutation: MutationType;
  node: Callout;
  updatedFields: String[];
  previousValues: CalloutPreviousValues;
}

export interface CalloutSubscriptionPayloadPromise
  extends Promise<CalloutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CalloutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CalloutPreviousValuesPromise>() => T;
}

export interface CalloutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CalloutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CalloutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CalloutPreviousValuesSubscription>() => T;
}

export interface PrescriptionConnection {
  pageInfo: PageInfo;
  edges: PrescriptionEdge[];
}

export interface PrescriptionConnectionPromise
  extends Promise<PrescriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PrescriptionEdge>>() => T;
  aggregate: <T = AggregatePrescriptionPromise>() => T;
}

export interface PrescriptionConnectionSubscription
  extends Promise<AsyncIterator<PrescriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PrescriptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePrescriptionSubscription>() => T;
}

export interface CalloutPreviousValues {
  id: ID_Output;
  acknowledge_status: String;
  acknowledgetime?: DateTimeOutput;
  callout_outcome: String;
  callout_service: String;
  callout_status: String;
  callout_wardid?: Int;
  createtime: DateTimeOutput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeOutput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeOutput;
  outcometime: DateTimeOutput;
  request_cdiff: Int;
  request_mrsa: Int;
  request_resp: Int;
  request_tele: Int;
  request_vre: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime: DateTimeOutput;
}

export interface CalloutPreviousValuesPromise
  extends Promise<CalloutPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  acknowledge_status: () => Promise<String>;
  acknowledgetime: () => Promise<DateTimeOutput>;
  callout_outcome: () => Promise<String>;
  callout_service: () => Promise<String>;
  callout_status: () => Promise<String>;
  callout_wardid: () => Promise<Int>;
  createtime: () => Promise<DateTimeOutput>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  currentreservationtime: () => Promise<DateTimeOutput>;
  discharge_wardid: () => Promise<Int>;
  firstreservationtime: () => Promise<DateTimeOutput>;
  outcometime: () => Promise<DateTimeOutput>;
  request_cdiff: () => Promise<Int>;
  request_mrsa: () => Promise<Int>;
  request_resp: () => Promise<Int>;
  request_tele: () => Promise<Int>;
  request_vre: () => Promise<Int>;
  submit_careunit: () => Promise<String>;
  submit_wardid: () => Promise<Int>;
  updatetime: () => Promise<DateTimeOutput>;
}

export interface CalloutPreviousValuesSubscription
  extends Promise<AsyncIterator<CalloutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  acknowledge_status: () => Promise<AsyncIterator<String>>;
  acknowledgetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  callout_outcome: () => Promise<AsyncIterator<String>>;
  callout_service: () => Promise<AsyncIterator<String>>;
  callout_status: () => Promise<AsyncIterator<String>>;
  callout_wardid: () => Promise<AsyncIterator<Int>>;
  createtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  currentreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  discharge_wardid: () => Promise<AsyncIterator<Int>>;
  firstreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  outcometime: () => Promise<AsyncIterator<DateTimeOutput>>;
  request_cdiff: () => Promise<AsyncIterator<Int>>;
  request_mrsa: () => Promise<AsyncIterator<Int>>;
  request_resp: () => Promise<AsyncIterator<Int>>;
  request_tele: () => Promise<AsyncIterator<Int>>;
  request_vre: () => Promise<AsyncIterator<Int>>;
  submit_careunit: () => Promise<AsyncIterator<String>>;
  submit_wardid: () => Promise<AsyncIterator<Int>>;
  updatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PatientEdge {
  node: Patient;
  cursor: String;
}

export interface PatientEdgePromise extends Promise<PatientEdge>, Fragmentable {
  node: <T = PatientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientEdgeSubscription
  extends Promise<AsyncIterator<PatientEdge>>,
    Fragmentable {
  node: <T = PatientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartevents_12 {
  count: Int;
}

export interface AggregateChartevents_12Promise
  extends Promise<AggregateChartevents_12>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_12Subscription
  extends Promise<AsyncIterator<AggregateChartevents_12>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Admission {
  id: ID_Output;
  admission_location: String;
  admission_type: String;
  admittime: DateTimeOutput;
  deathtime?: DateTimeOutput;
  diagnosis?: String;
  discharge_location: String;
  dischtime: DateTimeOutput;
  edouttime?: DateTimeOutput;
  edregtime?: DateTimeOutput;
  ethnicity: String;
  hadm_id: Int;
  has_chartevents_data: Int;
  hospital_expire_flag?: Int;
  insurance: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface AdmissionPromise extends Promise<Admission>, Fragmentable {
  id: () => Promise<ID_Output>;
  admission_location: () => Promise<String>;
  admission_type: () => Promise<String>;
  admittime: () => Promise<DateTimeOutput>;
  callout: <T = FragmentableArray<Callout>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = FragmentableArray<Cptevent>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deathtime: () => Promise<DateTimeOutput>;
  diagnoses_icd: <T = FragmentableArray<Diagnoses_icd>>(
    args?: {
      where?: Diagnoses_icdWhereInput;
      orderBy?: Diagnoses_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnosis: () => Promise<String>;
  discharge_location: () => Promise<String>;
  dischtime: () => Promise<DateTimeOutput>;
  drgcodes: <T = FragmentableArray<Drgcode>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  edouttime: () => Promise<DateTimeOutput>;
  edregtime: () => Promise<DateTimeOutput>;
  ethnicity: () => Promise<String>;
  hadm_id: () => Promise<Int>;
  has_chartevents_data: () => Promise<Int>;
  hospital_expire_flag: () => Promise<Int>;
  icustays: <T = FragmentableArray<Icustay>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = FragmentableArray<Inputevents_cv>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<Inputevents_mv>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  insurance: () => Promise<String>;
  labevents: <T = FragmentableArray<Labevent>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  language: () => Promise<String>;
  marital_status: () => Promise<String>;
  microbiologyevents: <T = FragmentableArray<Microbiologyevent>>(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = FragmentableArray<Noteevent>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = FragmentableArray<Prescription>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<Procedureevents_mv>>(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = FragmentableArray<Procedures_icd>>(
    args?: {
      where?: Procedures_icdWhereInput;
      orderBy?: Procedures_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  religion: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = FragmentableArray<Transfer>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AdmissionSubscription
  extends Promise<AsyncIterator<Admission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  admission_location: () => Promise<AsyncIterator<String>>;
  admission_type: () => Promise<AsyncIterator<String>>;
  admittime: () => Promise<AsyncIterator<DateTimeOutput>>;
  callout: <T = Promise<AsyncIterator<CalloutSubscription>>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = Promise<AsyncIterator<CpteventSubscription>>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deathtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  diagnoses_icd: <T = Promise<AsyncIterator<Diagnoses_icdSubscription>>>(
    args?: {
      where?: Diagnoses_icdWhereInput;
      orderBy?: Diagnoses_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnosis: () => Promise<AsyncIterator<String>>;
  discharge_location: () => Promise<AsyncIterator<String>>;
  dischtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  drgcodes: <T = Promise<AsyncIterator<DrgcodeSubscription>>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  edouttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  edregtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  has_chartevents_data: () => Promise<AsyncIterator<Int>>;
  hospital_expire_flag: () => Promise<AsyncIterator<Int>>;
  icustays: <T = Promise<AsyncIterator<IcustaySubscription>>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = Promise<AsyncIterator<Inputevents_cvSubscription>>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<Inputevents_mvSubscription>>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  insurance: () => Promise<AsyncIterator<String>>;
  labevents: <T = Promise<AsyncIterator<LabeventSubscription>>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  language: () => Promise<AsyncIterator<String>>;
  marital_status: () => Promise<AsyncIterator<String>>;
  microbiologyevents: <
    T = Promise<AsyncIterator<MicrobiologyeventSubscription>>
  >(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = Promise<AsyncIterator<NoteeventSubscription>>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = Promise<AsyncIterator<PrescriptionSubscription>>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<Procedureevents_mvSubscription>>
  >(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = Promise<AsyncIterator<Procedures_icdSubscription>>>(
    args?: {
      where?: Procedures_icdWhereInput;
      orderBy?: Procedures_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  religion: () => Promise<AsyncIterator<String>>;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = Promise<AsyncIterator<TransferSubscription>>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CaregiverSubscriptionPayload {
  mutation: MutationType;
  node: Caregiver;
  updatedFields: String[];
  previousValues: CaregiverPreviousValues;
}

export interface CaregiverSubscriptionPayloadPromise
  extends Promise<CaregiverSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CaregiverPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CaregiverPreviousValuesPromise>() => T;
}

export interface CaregiverSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CaregiverSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CaregiverSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CaregiverPreviousValuesSubscription>() => T;
}

export interface AggregateOutputevent {
  count: Int;
}

export interface AggregateOutputeventPromise
  extends Promise<AggregateOutputevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOutputeventSubscription
  extends Promise<AsyncIterator<AggregateOutputevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CaregiverPreviousValues {
  id: ID_Output;
  cgid: Int;
  label?: String;
  description?: String;
}

export interface CaregiverPreviousValuesPromise
  extends Promise<CaregiverPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cgid: () => Promise<Int>;
  label: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CaregiverPreviousValuesSubscription
  extends Promise<AsyncIterator<CaregiverPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cgid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface OutputeventConnection {
  pageInfo: PageInfo;
  edges: OutputeventEdge[];
}

export interface OutputeventConnectionPromise
  extends Promise<OutputeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OutputeventEdge>>() => T;
  aggregate: <T = AggregateOutputeventPromise>() => T;
}

export interface OutputeventConnectionSubscription
  extends Promise<AsyncIterator<OutputeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OutputeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOutputeventSubscription>() => T;
}

export interface Chartevents_12Edge {
  node: Chartevents_12;
  cursor: String;
}

export interface Chartevents_12EdgePromise
  extends Promise<Chartevents_12Edge>,
    Fragmentable {
  node: <T = Chartevents_12Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_12EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_12Edge>>,
    Fragmentable {
  node: <T = Chartevents_12Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NoteeventEdge {
  node: Noteevent;
  cursor: String;
}

export interface NoteeventEdgePromise
  extends Promise<NoteeventEdge>,
    Fragmentable {
  node: <T = NoteeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteeventEdgeSubscription
  extends Promise<AsyncIterator<NoteeventEdge>>,
    Fragmentable {
  node: <T = NoteeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CharteventSubscriptionPayload {
  mutation: MutationType;
  node: Chartevent;
  updatedFields: String[];
  previousValues: CharteventPreviousValues;
}

export interface CharteventSubscriptionPayloadPromise
  extends Promise<CharteventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CharteventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CharteventPreviousValuesPromise>() => T;
}

export interface CharteventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CharteventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CharteventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CharteventPreviousValuesSubscription>() => T;
}

export interface AggregateMicrobiologyevent {
  count: Int;
}

export interface AggregateMicrobiologyeventPromise
  extends Promise<AggregateMicrobiologyevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMicrobiologyeventSubscription
  extends Promise<AsyncIterator<AggregateMicrobiologyevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CharteventPreviousValues {
  id: ID_Output;
  charttime?: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface CharteventPreviousValuesPromise
  extends Promise<CharteventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface CharteventPreviousValuesSubscription
  extends Promise<AsyncIterator<CharteventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface MicrobiologyeventConnection {
  pageInfo: PageInfo;
  edges: MicrobiologyeventEdge[];
}

export interface MicrobiologyeventConnectionPromise
  extends Promise<MicrobiologyeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MicrobiologyeventEdge>>() => T;
  aggregate: <T = AggregateMicrobiologyeventPromise>() => T;
}

export interface MicrobiologyeventConnectionSubscription
  extends Promise<AsyncIterator<MicrobiologyeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MicrobiologyeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMicrobiologyeventSubscription>() => T;
}

export interface Chartevents_12Connection {
  pageInfo: PageInfo;
  edges: Chartevents_12Edge[];
}

export interface Chartevents_12ConnectionPromise
  extends Promise<Chartevents_12Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_12Edge>>() => T;
  aggregate: <T = AggregateChartevents_12Promise>() => T;
}

export interface Chartevents_12ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_12Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_12EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_12Subscription>() => T;
}

export interface LabeventEdge {
  node: Labevent;
  cursor: String;
}

export interface LabeventEdgePromise
  extends Promise<LabeventEdge>,
    Fragmentable {
  node: <T = LabeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LabeventEdgeSubscription
  extends Promise<AsyncIterator<LabeventEdge>>,
    Fragmentable {
  node: <T = LabeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_1SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_1;
  updatedFields: String[];
  previousValues: Chartevents_1PreviousValues;
}

export interface Chartevents_1SubscriptionPayloadPromise
  extends Promise<Chartevents_1SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_1Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_1PreviousValuesPromise>() => T;
}

export interface Chartevents_1SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_1SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_1Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_1PreviousValuesSubscription>() => T;
}

export interface AggregateInputevents_mv {
  count: Int;
}

export interface AggregateInputevents_mvPromise
  extends Promise<AggregateInputevents_mv>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInputevents_mvSubscription
  extends Promise<AsyncIterator<AggregateInputevents_mv>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateLabevent {
  count: Int;
}

export interface AggregateLabeventPromise
  extends Promise<AggregateLabevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLabeventSubscription
  extends Promise<AsyncIterator<AggregateLabevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Procedures_icdPreviousValues {
  id: ID_Output;
  icd9_code: String;
  seq_num: Int;
}

export interface Procedures_icdPreviousValuesPromise
  extends Promise<Procedures_icdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface Procedures_icdPreviousValuesSubscription
  extends Promise<AsyncIterator<Procedures_icdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface LabeventConnection {
  pageInfo: PageInfo;
  edges: LabeventEdge[];
}

export interface LabeventConnectionPromise
  extends Promise<LabeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LabeventEdge>>() => T;
  aggregate: <T = AggregateLabeventPromise>() => T;
}

export interface LabeventConnectionSubscription
  extends Promise<AsyncIterator<LabeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LabeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLabeventSubscription>() => T;
}

export interface Chartevents_1PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_1PreviousValuesPromise
  extends Promise<Chartevents_1PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_1PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_1PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateInputevents_cv {
  count: Int;
}

export interface AggregateInputevents_cvPromise
  extends Promise<AggregateInputevents_cv>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInputevents_cvSubscription
  extends Promise<AsyncIterator<AggregateInputevents_cv>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Inputevents_mvEdge {
  node: Inputevents_mv;
  cursor: String;
}

export interface Inputevents_mvEdgePromise
  extends Promise<Inputevents_mvEdge>,
    Fragmentable {
  node: <T = Inputevents_mvPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Inputevents_mvEdgeSubscription
  extends Promise<AsyncIterator<Inputevents_mvEdge>>,
    Fragmentable {
  node: <T = Inputevents_mvSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Inputevents_cvConnection {
  pageInfo: PageInfo;
  edges: Inputevents_cvEdge[];
}

export interface Inputevents_cvConnectionPromise
  extends Promise<Inputevents_cvConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Inputevents_cvEdge>>() => T;
  aggregate: <T = AggregateInputevents_cvPromise>() => T;
}

export interface Inputevents_cvConnectionSubscription
  extends Promise<AsyncIterator<Inputevents_cvConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Inputevents_cvEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInputevents_cvSubscription>() => T;
}

export interface Chartevents_12 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_12Promise
  extends Promise<Chartevents_12>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_12Subscription
  extends Promise<AsyncIterator<Chartevents_12>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface IcustayEdge {
  node: Icustay;
  cursor: String;
}

export interface IcustayEdgePromise extends Promise<IcustayEdge>, Fragmentable {
  node: <T = IcustayPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IcustayEdgeSubscription
  extends Promise<AsyncIterator<IcustayEdge>>,
    Fragmentable {
  node: <T = IcustaySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_10SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_10;
  updatedFields: String[];
  previousValues: Chartevents_10PreviousValues;
}

export interface Chartevents_10SubscriptionPayloadPromise
  extends Promise<Chartevents_10SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_10Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_10PreviousValuesPromise>() => T;
}

export interface Chartevents_10SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_10SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_10Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_10PreviousValuesSubscription>() => T;
}

export interface AggregateDrgcode {
  count: Int;
}

export interface AggregateDrgcodePromise
  extends Promise<AggregateDrgcode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDrgcodeSubscription
  extends Promise<AsyncIterator<AggregateDrgcode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_10PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_10PreviousValuesPromise
  extends Promise<Chartevents_10PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_10PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_10PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DrgcodeConnection {
  pageInfo: PageInfo;
  edges: DrgcodeEdge[];
}

export interface DrgcodeConnectionPromise
  extends Promise<DrgcodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DrgcodeEdge>>() => T;
  aggregate: <T = AggregateDrgcodePromise>() => T;
}

export interface DrgcodeConnectionSubscription
  extends Promise<AsyncIterator<DrgcodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DrgcodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDrgcodeSubscription>() => T;
}

export interface AggregateChartevents_11 {
  count: Int;
}

export interface AggregateChartevents_11Promise
  extends Promise<AggregateChartevents_11>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_11Subscription
  extends Promise<AsyncIterator<AggregateChartevents_11>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Diagnoses_icdEdge {
  node: Diagnoses_icd;
  cursor: String;
}

export interface Diagnoses_icdEdgePromise
  extends Promise<Diagnoses_icdEdge>,
    Fragmentable {
  node: <T = Diagnoses_icdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Diagnoses_icdEdgeSubscription
  extends Promise<AsyncIterator<Diagnoses_icdEdge>>,
    Fragmentable {
  node: <T = Diagnoses_icdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_11SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_11;
  updatedFields: String[];
  previousValues: Chartevents_11PreviousValues;
}

export interface Chartevents_11SubscriptionPayloadPromise
  extends Promise<Chartevents_11SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_11Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_11PreviousValuesPromise>() => T;
}

export interface Chartevents_11SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_11SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_11Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_11PreviousValuesSubscription>() => T;
}

export interface AggregateDatetimeevent {
  count: Int;
}

export interface AggregateDatetimeeventPromise
  extends Promise<AggregateDatetimeevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDatetimeeventSubscription
  extends Promise<AsyncIterator<AggregateDatetimeevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_11PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_11PreviousValuesPromise
  extends Promise<Chartevents_11PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_11PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_11PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DatetimeeventConnection {
  pageInfo: PageInfo;
  edges: DatetimeeventEdge[];
}

export interface DatetimeeventConnectionPromise
  extends Promise<DatetimeeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DatetimeeventEdge>>() => T;
  aggregate: <T = AggregateDatetimeeventPromise>() => T;
}

export interface DatetimeeventConnectionSubscription
  extends Promise<AsyncIterator<DatetimeeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DatetimeeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDatetimeeventSubscription>() => T;
}

export interface Chartevents_11Edge {
  node: Chartevents_11;
  cursor: String;
}

export interface Chartevents_11EdgePromise
  extends Promise<Chartevents_11Edge>,
    Fragmentable {
  node: <T = Chartevents_11Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_11EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_11Edge>>,
    Fragmentable {
  node: <T = Chartevents_11Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface D_labitemEdge {
  node: D_labitem;
  cursor: String;
}

export interface D_labitemEdgePromise
  extends Promise<D_labitemEdge>,
    Fragmentable {
  node: <T = D_labitemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface D_labitemEdgeSubscription
  extends Promise<AsyncIterator<D_labitemEdge>>,
    Fragmentable {
  node: <T = D_labitemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_12SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_12;
  updatedFields: String[];
  previousValues: Chartevents_12PreviousValues;
}

export interface Chartevents_12SubscriptionPayloadPromise
  extends Promise<Chartevents_12SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_12Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_12PreviousValuesPromise>() => T;
}

export interface Chartevents_12SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_12SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_12Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_12PreviousValuesSubscription>() => T;
}

export interface TransferSubscriptionPayload {
  mutation: MutationType;
  node: Transfer;
  updatedFields: String[];
  previousValues: TransferPreviousValues;
}

export interface TransferSubscriptionPayloadPromise
  extends Promise<TransferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransferPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransferPreviousValuesPromise>() => T;
}

export interface TransferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransferSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransferPreviousValuesSubscription>() => T;
}

export interface Chartevents_12PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_12PreviousValuesPromise
  extends Promise<Chartevents_12PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_12PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_12PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateD_item {
  count: Int;
}

export interface AggregateD_itemPromise
  extends Promise<AggregateD_item>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateD_itemSubscription
  extends Promise<AsyncIterator<AggregateD_item>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_11Connection {
  pageInfo: PageInfo;
  edges: Chartevents_11Edge[];
}

export interface Chartevents_11ConnectionPromise
  extends Promise<Chartevents_11Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_11Edge>>() => T;
  aggregate: <T = AggregateChartevents_11Promise>() => T;
}

export interface Chartevents_11ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_11Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_11EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_11Subscription>() => T;
}

export interface D_itemConnection {
  pageInfo: PageInfo;
  edges: D_itemEdge[];
}

export interface D_itemConnectionPromise
  extends Promise<D_itemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<D_itemEdge>>() => T;
  aggregate: <T = AggregateD_itemPromise>() => T;
}

export interface D_itemConnectionSubscription
  extends Promise<AsyncIterator<D_itemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<D_itemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateD_itemSubscription>() => T;
}

export interface Chartevents_13SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_13;
  updatedFields: String[];
  previousValues: Chartevents_13PreviousValues;
}

export interface Chartevents_13SubscriptionPayloadPromise
  extends Promise<Chartevents_13SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_13Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_13PreviousValuesPromise>() => T;
}

export interface Chartevents_13SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_13SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_13Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_13PreviousValuesSubscription>() => T;
}

export interface D_item {
  id: ID_Output;
  abbreviation?: String;
  category?: String;
  conceptid?: Int;
  dbsource?: String;
  itemid: Int;
  label?: String;
  linksto?: String;
  param_type?: String;
  unitname?: String;
}

export interface D_itemPromise extends Promise<D_item>, Fragmentable {
  id: () => Promise<ID_Output>;
  abbreviation: () => Promise<String>;
  category: () => Promise<String>;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  conceptid: () => Promise<Int>;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<String>;
  inputevents_mv: <T = FragmentableArray<Inputevents_mv>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  linksto: () => Promise<String>;
  microbiologyevents: <T = FragmentableArray<Microbiologyevent>>(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  param_type: () => Promise<String>;
  procedureevents_mv: <T = FragmentableArray<Procedureevents_mv>>(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unitname: () => Promise<String>;
}

export interface D_itemSubscription
  extends Promise<AsyncIterator<D_item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  abbreviation: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  conceptid: () => Promise<AsyncIterator<Int>>;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<AsyncIterator<String>>;
  inputevents_mv: <T = Promise<AsyncIterator<Inputevents_mvSubscription>>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  linksto: () => Promise<AsyncIterator<String>>;
  microbiologyevents: <
    T = Promise<AsyncIterator<MicrobiologyeventSubscription>>
  >(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  param_type: () => Promise<AsyncIterator<String>>;
  procedureevents_mv: <
    T = Promise<AsyncIterator<Procedureevents_mvSubscription>>
  >(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unitname: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_13PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_13PreviousValuesPromise
  extends Promise<Chartevents_13PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_13PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_13PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface D_icd_procedureEdge {
  node: D_icd_procedure;
  cursor: String;
}

export interface D_icd_procedureEdgePromise
  extends Promise<D_icd_procedureEdge>,
    Fragmentable {
  node: <T = D_icd_procedurePromise>() => T;
  cursor: () => Promise<String>;
}

export interface D_icd_procedureEdgeSubscription
  extends Promise<AsyncIterator<D_icd_procedureEdge>>,
    Fragmentable {
  node: <T = D_icd_procedureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_11 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_11Promise
  extends Promise<Chartevents_11>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_11Subscription
  extends Promise<AsyncIterator<Chartevents_11>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface D_icd_procedure {
  id: ID_Output;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface D_icd_procedurePromise
  extends Promise<D_icd_procedure>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface D_icd_procedureSubscription
  extends Promise<AsyncIterator<D_icd_procedure>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_14SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_14;
  updatedFields: String[];
  previousValues: Chartevents_14PreviousValues;
}

export interface Chartevents_14SubscriptionPayloadPromise
  extends Promise<Chartevents_14SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_14Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_14PreviousValuesPromise>() => T;
}

export interface Chartevents_14SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_14SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_14Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_14PreviousValuesSubscription>() => T;
}

export interface D_icd_diagnosisEdge {
  node: D_icd_diagnosis;
  cursor: String;
}

export interface D_icd_diagnosisEdgePromise
  extends Promise<D_icd_diagnosisEdge>,
    Fragmentable {
  node: <T = D_icd_diagnosisPromise>() => T;
  cursor: () => Promise<String>;
}

export interface D_icd_diagnosisEdgeSubscription
  extends Promise<AsyncIterator<D_icd_diagnosisEdge>>,
    Fragmentable {
  node: <T = D_icd_diagnosisSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_14PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_14PreviousValuesPromise
  extends Promise<Chartevents_14PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_14PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_14PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Callout {
  id: ID_Output;
  acknowledge_status: String;
  acknowledgetime?: DateTimeOutput;
  callout_outcome: String;
  callout_service: String;
  callout_status: String;
  callout_wardid?: Int;
  createtime: DateTimeOutput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeOutput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeOutput;
  outcometime: DateTimeOutput;
  request_cdiff: Int;
  request_mrsa: Int;
  request_resp: Int;
  request_tele: Int;
  request_vre: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime: DateTimeOutput;
}

export interface CalloutPromise extends Promise<Callout>, Fragmentable {
  id: () => Promise<ID_Output>;
  acknowledge_status: () => Promise<String>;
  acknowledgetime: () => Promise<DateTimeOutput>;
  callout_outcome: () => Promise<String>;
  callout_service: () => Promise<String>;
  callout_status: () => Promise<String>;
  callout_wardid: () => Promise<Int>;
  createtime: () => Promise<DateTimeOutput>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  currentreservationtime: () => Promise<DateTimeOutput>;
  discharge_wardid: () => Promise<Int>;
  firstreservationtime: () => Promise<DateTimeOutput>;
  outcometime: () => Promise<DateTimeOutput>;
  request_cdiff: () => Promise<Int>;
  request_mrsa: () => Promise<Int>;
  request_resp: () => Promise<Int>;
  request_tele: () => Promise<Int>;
  request_vre: () => Promise<Int>;
  submit_careunit: () => Promise<String>;
  submit_wardid: () => Promise<Int>;
  updatetime: () => Promise<DateTimeOutput>;
}

export interface CalloutSubscription
  extends Promise<AsyncIterator<Callout>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  acknowledge_status: () => Promise<AsyncIterator<String>>;
  acknowledgetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  callout_outcome: () => Promise<AsyncIterator<String>>;
  callout_service: () => Promise<AsyncIterator<String>>;
  callout_status: () => Promise<AsyncIterator<String>>;
  callout_wardid: () => Promise<AsyncIterator<Int>>;
  createtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  currentreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  discharge_wardid: () => Promise<AsyncIterator<Int>>;
  firstreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  outcometime: () => Promise<AsyncIterator<DateTimeOutput>>;
  request_cdiff: () => Promise<AsyncIterator<Int>>;
  request_mrsa: () => Promise<AsyncIterator<Int>>;
  request_resp: () => Promise<AsyncIterator<Int>>;
  request_tele: () => Promise<AsyncIterator<Int>>;
  request_vre: () => Promise<AsyncIterator<Int>>;
  submit_careunit: () => Promise<AsyncIterator<String>>;
  submit_wardid: () => Promise<AsyncIterator<Int>>;
  updatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateChartevents_10 {
  count: Int;
}

export interface AggregateChartevents_10Promise
  extends Promise<AggregateChartevents_10>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_10Subscription
  extends Promise<AsyncIterator<AggregateChartevents_10>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateD_cpt {
  count: Int;
}

export interface AggregateD_cptPromise
  extends Promise<AggregateD_cpt>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateD_cptSubscription
  extends Promise<AsyncIterator<AggregateD_cpt>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_15SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_15;
  updatedFields: String[];
  previousValues: Chartevents_15PreviousValues;
}

export interface Chartevents_15SubscriptionPayloadPromise
  extends Promise<Chartevents_15SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_15Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_15PreviousValuesPromise>() => T;
}

export interface Chartevents_15SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_15SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_15Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_15PreviousValuesSubscription>() => T;
}

export interface D_cptConnection {
  pageInfo: PageInfo;
  edges: D_cptEdge[];
}

export interface D_cptConnectionPromise
  extends Promise<D_cptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<D_cptEdge>>() => T;
  aggregate: <T = AggregateD_cptPromise>() => T;
}

export interface D_cptConnectionSubscription
  extends Promise<AsyncIterator<D_cptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<D_cptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateD_cptSubscription>() => T;
}

export interface Chartevents_15PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_15PreviousValuesPromise
  extends Promise<Chartevents_15PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_15PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_15PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCptevent {
  count: Int;
}

export interface AggregateCpteventPromise
  extends Promise<AggregateCptevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCpteventSubscription
  extends Promise<AsyncIterator<AggregateCptevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_10Edge {
  node: Chartevents_10;
  cursor: String;
}

export interface Chartevents_10EdgePromise
  extends Promise<Chartevents_10Edge>,
    Fragmentable {
  node: <T = Chartevents_10Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_10EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_10Edge>>,
    Fragmentable {
  node: <T = Chartevents_10Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CpteventConnection {
  pageInfo: PageInfo;
  edges: CpteventEdge[];
}

export interface CpteventConnectionPromise
  extends Promise<CpteventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CpteventEdge>>() => T;
  aggregate: <T = AggregateCpteventPromise>() => T;
}

export interface CpteventConnectionSubscription
  extends Promise<AsyncIterator<CpteventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CpteventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCpteventSubscription>() => T;
}

export interface Chartevents_16SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_16;
  updatedFields: String[];
  previousValues: Chartevents_16PreviousValues;
}

export interface Chartevents_16SubscriptionPayloadPromise
  extends Promise<Chartevents_16SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_16Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_16PreviousValuesPromise>() => T;
}

export interface Chartevents_16SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_16SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_16Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_16PreviousValuesSubscription>() => T;
}

export interface Chartevents_9Edge {
  node: Chartevents_9;
  cursor: String;
}

export interface Chartevents_9EdgePromise
  extends Promise<Chartevents_9Edge>,
    Fragmentable {
  node: <T = Chartevents_9Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_9EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_9Edge>>,
    Fragmentable {
  node: <T = Chartevents_9Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_16PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_16PreviousValuesPromise
  extends Promise<Chartevents_16PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_16PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_16PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_9 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_9Promise
  extends Promise<Chartevents_9>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_9Subscription
  extends Promise<AsyncIterator<Chartevents_9>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_10Connection {
  pageInfo: PageInfo;
  edges: Chartevents_10Edge[];
}

export interface Chartevents_10ConnectionPromise
  extends Promise<Chartevents_10Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_10Edge>>() => T;
  aggregate: <T = AggregateChartevents_10Promise>() => T;
}

export interface Chartevents_10ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_10Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_10EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_10Subscription>() => T;
}

export interface AggregateChartevents_8 {
  count: Int;
}

export interface AggregateChartevents_8Promise
  extends Promise<AggregateChartevents_8>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_8Subscription
  extends Promise<AsyncIterator<AggregateChartevents_8>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_17SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_17;
  updatedFields: String[];
  previousValues: Chartevents_17PreviousValues;
}

export interface Chartevents_17SubscriptionPayloadPromise
  extends Promise<Chartevents_17SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_17Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_17PreviousValuesPromise>() => T;
}

export interface Chartevents_17SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_17SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_17Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_17PreviousValuesSubscription>() => T;
}

export interface Chartevents_8Connection {
  pageInfo: PageInfo;
  edges: Chartevents_8Edge[];
}

export interface Chartevents_8ConnectionPromise
  extends Promise<Chartevents_8Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_8Edge>>() => T;
  aggregate: <T = AggregateChartevents_8Promise>() => T;
}

export interface Chartevents_8ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_8Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_8EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_8Subscription>() => T;
}

export interface Chartevents_17PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_17PreviousValuesPromise
  extends Promise<Chartevents_17PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_17PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_17PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevent {
  id: ID_Output;
  charttime?: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface CharteventPromise extends Promise<Chartevent>, Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface CharteventSubscription
  extends Promise<AsyncIterator<Chartevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_10 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_10Promise
  extends Promise<Chartevents_10>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_10Subscription
  extends Promise<AsyncIterator<Chartevents_10>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_7Edge {
  node: Chartevents_7;
  cursor: String;
}

export interface Chartevents_7EdgePromise
  extends Promise<Chartevents_7Edge>,
    Fragmentable {
  node: <T = Chartevents_7Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_7EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_7Edge>>,
    Fragmentable {
  node: <T = Chartevents_7Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_2SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_2;
  updatedFields: String[];
  previousValues: Chartevents_2PreviousValues;
}

export interface Chartevents_2SubscriptionPayloadPromise
  extends Promise<Chartevents_2SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_2Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_2PreviousValuesPromise>() => T;
}

export interface Chartevents_2SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_2SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_2Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_2PreviousValuesSubscription>() => T;
}

export interface Chartevents_7 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_7Promise
  extends Promise<Chartevents_7>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_7Subscription
  extends Promise<AsyncIterator<Chartevents_7>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_2PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_2PreviousValuesPromise
  extends Promise<Chartevents_2PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_2PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_2PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_6Edge {
  node: Chartevents_6;
  cursor: String;
}

export interface Chartevents_6EdgePromise
  extends Promise<Chartevents_6Edge>,
    Fragmentable {
  node: <T = Chartevents_6Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_6EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_6Edge>>,
    Fragmentable {
  node: <T = Chartevents_6Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartevents_1 {
  count: Int;
}

export interface AggregateChartevents_1Promise
  extends Promise<AggregateChartevents_1>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_1Subscription
  extends Promise<AsyncIterator<AggregateChartevents_1>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_6 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_6Promise
  extends Promise<Chartevents_6>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_6Subscription
  extends Promise<AsyncIterator<Chartevents_6>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_3SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_3;
  updatedFields: String[];
  previousValues: Chartevents_3PreviousValues;
}

export interface Chartevents_3SubscriptionPayloadPromise
  extends Promise<Chartevents_3SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_3Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_3PreviousValuesPromise>() => T;
}

export interface Chartevents_3SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_3SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_3Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_3PreviousValuesSubscription>() => T;
}

export interface AggregateChartevents_5 {
  count: Int;
}

export interface AggregateChartevents_5Promise
  extends Promise<AggregateChartevents_5>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_5Subscription
  extends Promise<AsyncIterator<AggregateChartevents_5>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_3PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_3PreviousValuesPromise
  extends Promise<Chartevents_3PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_3PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_3PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_5Connection {
  pageInfo: PageInfo;
  edges: Chartevents_5Edge[];
}

export interface Chartevents_5ConnectionPromise
  extends Promise<Chartevents_5Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_5Edge>>() => T;
  aggregate: <T = AggregateChartevents_5Promise>() => T;
}

export interface Chartevents_5ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_5Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_5EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_5Subscription>() => T;
}

export interface Chartevents_1Edge {
  node: Chartevents_1;
  cursor: String;
}

export interface Chartevents_1EdgePromise
  extends Promise<Chartevents_1Edge>,
    Fragmentable {
  node: <T = Chartevents_1Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_1EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_1Edge>>,
    Fragmentable {
  node: <T = Chartevents_1Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartevents_4 {
  count: Int;
}

export interface AggregateChartevents_4Promise
  extends Promise<AggregateChartevents_4>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_4Subscription
  extends Promise<AsyncIterator<AggregateChartevents_4>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_4SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_4;
  updatedFields: String[];
  previousValues: Chartevents_4PreviousValues;
}

export interface Chartevents_4SubscriptionPayloadPromise
  extends Promise<Chartevents_4SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_4Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_4PreviousValuesPromise>() => T;
}

export interface Chartevents_4SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_4SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_4Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_4PreviousValuesSubscription>() => T;
}

export interface Chartevents_4Connection {
  pageInfo: PageInfo;
  edges: Chartevents_4Edge[];
}

export interface Chartevents_4ConnectionPromise
  extends Promise<Chartevents_4Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_4Edge>>() => T;
  aggregate: <T = AggregateChartevents_4Promise>() => T;
}

export interface Chartevents_4ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_4Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_4EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_4Subscription>() => T;
}

export interface Chartevents_4PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_4PreviousValuesPromise
  extends Promise<Chartevents_4PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_4PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_4PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Datetimeevent {
  id: ID_Output;
  charttime: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime: DateTimeOutput;
  value?: DateTimeOutput;
  valueuom: String;
  warning?: Int;
}

export interface DatetimeeventPromise
  extends Promise<Datetimeevent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<DateTimeOutput>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface DatetimeeventSubscription
  extends Promise<AsyncIterator<Datetimeevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<DateTimeOutput>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_1Connection {
  pageInfo: PageInfo;
  edges: Chartevents_1Edge[];
}

export interface Chartevents_1ConnectionPromise
  extends Promise<Chartevents_1Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_1Edge>>() => T;
  aggregate: <T = AggregateChartevents_1Promise>() => T;
}

export interface Chartevents_1ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_1Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_1EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_1Subscription>() => T;
}

export interface Chartevents_3Edge {
  node: Chartevents_3;
  cursor: String;
}

export interface Chartevents_3EdgePromise
  extends Promise<Chartevents_3Edge>,
    Fragmentable {
  node: <T = Chartevents_3Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_3EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_3Edge>>,
    Fragmentable {
  node: <T = Chartevents_3Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_5SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_5;
  updatedFields: String[];
  previousValues: Chartevents_5PreviousValues;
}

export interface Chartevents_5SubscriptionPayloadPromise
  extends Promise<Chartevents_5SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_5Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_5PreviousValuesPromise>() => T;
}

export interface Chartevents_5SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_5SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_5Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_5PreviousValuesSubscription>() => T;
}

export interface Chartevents_3 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_3Promise
  extends Promise<Chartevents_3>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_3Subscription
  extends Promise<AsyncIterator<Chartevents_3>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_5PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_5PreviousValuesPromise
  extends Promise<Chartevents_5PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_5PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_5PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_2Edge {
  node: Chartevents_2;
  cursor: String;
}

export interface Chartevents_2EdgePromise
  extends Promise<Chartevents_2Edge>,
    Fragmentable {
  node: <T = Chartevents_2Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_2EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_2Edge>>,
    Fragmentable {
  node: <T = Chartevents_2Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_1 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_1Promise
  extends Promise<Chartevents_1>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_1Subscription
  extends Promise<AsyncIterator<Chartevents_1>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_2 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_2Promise
  extends Promise<Chartevents_2>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_2Subscription
  extends Promise<AsyncIterator<Chartevents_2>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_6SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_6;
  updatedFields: String[];
  previousValues: Chartevents_6PreviousValues;
}

export interface Chartevents_6SubscriptionPayloadPromise
  extends Promise<Chartevents_6SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_6Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_6PreviousValuesPromise>() => T;
}

export interface Chartevents_6SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_6SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_6Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_6PreviousValuesSubscription>() => T;
}

export interface AggregateChartevents_17 {
  count: Int;
}

export interface AggregateChartevents_17Promise
  extends Promise<AggregateChartevents_17>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_17Subscription
  extends Promise<AsyncIterator<AggregateChartevents_17>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_6PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_6PreviousValuesPromise
  extends Promise<Chartevents_6PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_6PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_6PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_17Connection {
  pageInfo: PageInfo;
  edges: Chartevents_17Edge[];
}

export interface Chartevents_17ConnectionPromise
  extends Promise<Chartevents_17Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_17Edge>>() => T;
  aggregate: <T = AggregateChartevents_17Promise>() => T;
}

export interface Chartevents_17ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_17Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_17EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_17Subscription>() => T;
}

export interface AggregateChartevent {
  count: Int;
}

export interface AggregateCharteventPromise
  extends Promise<AggregateChartevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCharteventSubscription
  extends Promise<AsyncIterator<AggregateChartevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents_16 {
  count: Int;
}

export interface AggregateChartevents_16Promise
  extends Promise<AggregateChartevents_16>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_16Subscription
  extends Promise<AsyncIterator<AggregateChartevents_16>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_7SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_7;
  updatedFields: String[];
  previousValues: Chartevents_7PreviousValues;
}

export interface Chartevents_7SubscriptionPayloadPromise
  extends Promise<Chartevents_7SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_7Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_7PreviousValuesPromise>() => T;
}

export interface Chartevents_7SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_7SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_7Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_7PreviousValuesSubscription>() => T;
}

export interface Chartevents_16Connection {
  pageInfo: PageInfo;
  edges: Chartevents_16Edge[];
}

export interface Chartevents_16ConnectionPromise
  extends Promise<Chartevents_16Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_16Edge>>() => T;
  aggregate: <T = AggregateChartevents_16Promise>() => T;
}

export interface Chartevents_16ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_16Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_16EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_16Subscription>() => T;
}

export interface Chartevents_7PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_7PreviousValuesPromise
  extends Promise<Chartevents_7PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_7PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_7PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Drgcode {
  id: ID_Output;
  description?: String;
  drg_code: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type: String;
}

export interface DrgcodePromise extends Promise<Drgcode>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  drg_code: () => Promise<String>;
  drg_mortality: () => Promise<Int>;
  drg_severity: () => Promise<Int>;
  drg_type: () => Promise<String>;
}

export interface DrgcodeSubscription
  extends Promise<AsyncIterator<Drgcode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  drg_code: () => Promise<AsyncIterator<String>>;
  drg_mortality: () => Promise<AsyncIterator<Int>>;
  drg_severity: () => Promise<AsyncIterator<Int>>;
  drg_type: () => Promise<AsyncIterator<String>>;
}

export interface CharteventEdge {
  node: Chartevent;
  cursor: String;
}

export interface CharteventEdgePromise
  extends Promise<CharteventEdge>,
    Fragmentable {
  node: <T = CharteventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CharteventEdgeSubscription
  extends Promise<AsyncIterator<CharteventEdge>>,
    Fragmentable {
  node: <T = CharteventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_15Edge {
  node: Chartevents_15;
  cursor: String;
}

export interface Chartevents_15EdgePromise
  extends Promise<Chartevents_15Edge>,
    Fragmentable {
  node: <T = Chartevents_15Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_15EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_15Edge>>,
    Fragmentable {
  node: <T = Chartevents_15Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_8SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_8;
  updatedFields: String[];
  previousValues: Chartevents_8PreviousValues;
}

export interface Chartevents_8SubscriptionPayloadPromise
  extends Promise<Chartevents_8SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_8Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_8PreviousValuesPromise>() => T;
}

export interface Chartevents_8SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_8SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_8Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_8PreviousValuesSubscription>() => T;
}

export interface Chartevents_15 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_15Promise
  extends Promise<Chartevents_15>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_15Subscription
  extends Promise<AsyncIterator<Chartevents_15>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_8PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_8PreviousValuesPromise
  extends Promise<Chartevents_8PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_8PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_8PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_14Edge {
  node: Chartevents_14;
  cursor: String;
}

export interface Chartevents_14EdgePromise
  extends Promise<Chartevents_14Edge>,
    Fragmentable {
  node: <T = Chartevents_14Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_14EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_14Edge>>,
    Fragmentable {
  node: <T = Chartevents_14Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CharteventConnection {
  pageInfo: PageInfo;
  edges: CharteventEdge[];
}

export interface CharteventConnectionPromise
  extends Promise<CharteventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CharteventEdge>>() => T;
  aggregate: <T = AggregateCharteventPromise>() => T;
}

export interface CharteventConnectionSubscription
  extends Promise<AsyncIterator<CharteventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CharteventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCharteventSubscription>() => T;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  node: Service;
  updatedFields: String[];
  previousValues: ServicePreviousValues;
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface Chartevents_9SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents_9;
  updatedFields: String[];
  previousValues: Chartevents_9PreviousValues;
}

export interface Chartevents_9SubscriptionPayloadPromise
  extends Promise<Chartevents_9SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents_9Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents_9PreviousValuesPromise>() => T;
}

export interface Chartevents_9SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents_9SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents_9Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents_9PreviousValuesSubscription>() => T;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_9PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_9PreviousValuesPromise
  extends Promise<Chartevents_9PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_9PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents_9PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Procedures_icdEdge {
  node: Procedures_icd;
  cursor: String;
}

export interface Procedures_icdEdgePromise
  extends Promise<Procedures_icdEdge>,
    Fragmentable {
  node: <T = Procedures_icdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Procedures_icdEdgeSubscription
  extends Promise<AsyncIterator<Procedures_icdEdge>>,
    Fragmentable {
  node: <T = Procedures_icdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCaregiver {
  count: Int;
}

export interface AggregateCaregiverPromise
  extends Promise<AggregateCaregiver>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCaregiverSubscription
  extends Promise<AsyncIterator<AggregateCaregiver>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Procedureevents_mvConnection {
  pageInfo: PageInfo;
  edges: Procedureevents_mvEdge[];
}

export interface Procedureevents_mvConnectionPromise
  extends Promise<Procedureevents_mvConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Procedureevents_mvEdge>>() => T;
  aggregate: <T = AggregateProcedureevents_mvPromise>() => T;
}

export interface Procedureevents_mvConnectionSubscription
  extends Promise<AsyncIterator<Procedureevents_mvConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Procedureevents_mvEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateProcedureevents_mvSubscription>() => T;
}

export interface CpteventSubscriptionPayload {
  mutation: MutationType;
  node: Cptevent;
  updatedFields: String[];
  previousValues: CpteventPreviousValues;
}

export interface CpteventSubscriptionPayloadPromise
  extends Promise<CpteventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CpteventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CpteventPreviousValuesPromise>() => T;
}

export interface CpteventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CpteventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CpteventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CpteventPreviousValuesSubscription>() => T;
}

export interface AggregatePatient {
  count: Int;
}

export interface AggregatePatientPromise
  extends Promise<AggregatePatient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientSubscription
  extends Promise<AsyncIterator<AggregatePatient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CpteventPreviousValues {
  id: ID_Output;
  chartdate?: DateTimeOutput;
  costcenter: String;
  cpt_cd: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface CpteventPreviousValuesPromise
  extends Promise<CpteventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  chartdate: () => Promise<DateTimeOutput>;
  costcenter: () => Promise<String>;
  cpt_cd: () => Promise<String>;
  cpt_number: () => Promise<Int>;
  cpt_suffix: () => Promise<String>;
  description: () => Promise<String>;
  sectionheader: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  ticket_id_seq: () => Promise<Int>;
}

export interface CpteventPreviousValuesSubscription
  extends Promise<AsyncIterator<CpteventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  costcenter: () => Promise<AsyncIterator<String>>;
  cpt_cd: () => Promise<AsyncIterator<String>>;
  cpt_number: () => Promise<AsyncIterator<Int>>;
  cpt_suffix: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  ticket_id_seq: () => Promise<AsyncIterator<Int>>;
}

export interface Patient {
  id: ID_Output;
  dob: DateTimeOutput;
  dod?: DateTimeOutput;
  dod_hosp?: DateTimeOutput;
  dod_ssn?: DateTimeOutput;
  expire_flag: Int;
  gender: String;
  subject_id: Int;
}

export interface PatientPromise extends Promise<Patient>, Fragmentable {
  id: () => Promise<ID_Output>;
  admissions: <T = FragmentableArray<Admission>>(
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  callout: <T = FragmentableArray<Callout>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = FragmentableArray<Cptevent>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnoses_icd: <T = FragmentableArray<Diagnoses_icd>>(
    args?: {
      where?: Diagnoses_icdWhereInput;
      orderBy?: Diagnoses_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dob: () => Promise<DateTimeOutput>;
  dod: () => Promise<DateTimeOutput>;
  dod_hosp: () => Promise<DateTimeOutput>;
  dod_ssn: () => Promise<DateTimeOutput>;
  drgcodes: <T = FragmentableArray<Drgcode>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  expire_flag: () => Promise<Int>;
  gender: () => Promise<String>;
  icustays: <T = FragmentableArray<Icustay>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = FragmentableArray<Inputevents_cv>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<Inputevents_mv>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  labevents: <T = FragmentableArray<Labevent>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  microbiologyevents: <T = FragmentableArray<Microbiologyevent>>(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = FragmentableArray<Noteevent>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = FragmentableArray<Prescription>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<Procedureevents_mv>>(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = FragmentableArray<Procedures_icd>>(
    args?: {
      where?: Procedures_icdWhereInput;
      orderBy?: Procedures_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  services: <T = FragmentableArray<Service>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subject_id: () => Promise<Int>;
  transfers: <T = FragmentableArray<Transfer>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PatientSubscription
  extends Promise<AsyncIterator<Patient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  admissions: <T = Promise<AsyncIterator<AdmissionSubscription>>>(
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  callout: <T = Promise<AsyncIterator<CalloutSubscription>>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = Promise<AsyncIterator<CpteventSubscription>>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnoses_icd: <T = Promise<AsyncIterator<Diagnoses_icdSubscription>>>(
    args?: {
      where?: Diagnoses_icdWhereInput;
      orderBy?: Diagnoses_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_hosp: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_ssn: () => Promise<AsyncIterator<DateTimeOutput>>;
  drgcodes: <T = Promise<AsyncIterator<DrgcodeSubscription>>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  expire_flag: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
  icustays: <T = Promise<AsyncIterator<IcustaySubscription>>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = Promise<AsyncIterator<Inputevents_cvSubscription>>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<Inputevents_mvSubscription>>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  labevents: <T = Promise<AsyncIterator<LabeventSubscription>>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  microbiologyevents: <
    T = Promise<AsyncIterator<MicrobiologyeventSubscription>>
  >(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = Promise<AsyncIterator<NoteeventSubscription>>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = Promise<AsyncIterator<PrescriptionSubscription>>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<Procedureevents_mvSubscription>>
  >(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = Promise<AsyncIterator<Procedures_icdSubscription>>>(
    args?: {
      where?: Procedures_icdWhereInput;
      orderBy?: Procedures_icdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subject_id: () => Promise<AsyncIterator<Int>>;
  transfers: <T = Promise<AsyncIterator<TransferSubscription>>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CaregiverEdge {
  node: Caregiver;
  cursor: String;
}

export interface CaregiverEdgePromise
  extends Promise<CaregiverEdge>,
    Fragmentable {
  node: <T = CaregiverPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CaregiverEdgeSubscription
  extends Promise<AsyncIterator<CaregiverEdge>>,
    Fragmentable {
  node: <T = CaregiverSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNoteevent {
  count: Int;
}

export interface AggregateNoteeventPromise
  extends Promise<AggregateNoteevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteeventSubscription
  extends Promise<AsyncIterator<AggregateNoteevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface D_cptSubscriptionPayload {
  mutation: MutationType;
  node: D_cpt;
  updatedFields: String[];
  previousValues: D_cptPreviousValues;
}

export interface D_cptSubscriptionPayloadPromise
  extends Promise<D_cptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = D_cptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = D_cptPreviousValuesPromise>() => T;
}

export interface D_cptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<D_cptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = D_cptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = D_cptPreviousValuesSubscription>() => T;
}

export interface MicrobiologyeventEdge {
  node: Microbiologyevent;
  cursor: String;
}

export interface MicrobiologyeventEdgePromise
  extends Promise<MicrobiologyeventEdge>,
    Fragmentable {
  node: <T = MicrobiologyeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MicrobiologyeventEdgeSubscription
  extends Promise<AsyncIterator<MicrobiologyeventEdge>>,
    Fragmentable {
  node: <T = MicrobiologyeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface D_cptPreviousValues {
  id: ID_Output;
  category: Int;
  codesuffix?: String;
  maxcodeinsubsection: Int;
  mincodeinsubsection: Int;
  sectionheader: String;
  sectionrange: String;
  subsectionheader: String;
  subsectionrange: String;
}

export interface D_cptPreviousValuesPromise
  extends Promise<D_cptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<Int>;
  codesuffix: () => Promise<String>;
  maxcodeinsubsection: () => Promise<Int>;
  mincodeinsubsection: () => Promise<Int>;
  sectionheader: () => Promise<String>;
  sectionrange: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  subsectionrange: () => Promise<String>;
}

export interface D_cptPreviousValuesSubscription
  extends Promise<AsyncIterator<D_cptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<Int>>;
  codesuffix: () => Promise<AsyncIterator<String>>;
  maxcodeinsubsection: () => Promise<AsyncIterator<Int>>;
  mincodeinsubsection: () => Promise<AsyncIterator<Int>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  sectionrange: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  subsectionrange: () => Promise<AsyncIterator<String>>;
}

export interface Inputevents_cvEdge {
  node: Inputevents_cv;
  cursor: String;
}

export interface Inputevents_cvEdgePromise
  extends Promise<Inputevents_cvEdge>,
    Fragmentable {
  node: <T = Inputevents_cvPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Inputevents_cvEdgeSubscription
  extends Promise<AsyncIterator<Inputevents_cvEdge>>,
    Fragmentable {
  node: <T = Inputevents_cvSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CaregiverConnection {
  pageInfo: PageInfo;
  edges: CaregiverEdge[];
}

export interface CaregiverConnectionPromise
  extends Promise<CaregiverConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CaregiverEdge>>() => T;
  aggregate: <T = AggregateCaregiverPromise>() => T;
}

export interface CaregiverConnectionSubscription
  extends Promise<AsyncIterator<CaregiverConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CaregiverEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCaregiverSubscription>() => T;
}

export interface IcustayConnection {
  pageInfo: PageInfo;
  edges: IcustayEdge[];
}

export interface IcustayConnectionPromise
  extends Promise<IcustayConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IcustayEdge>>() => T;
  aggregate: <T = AggregateIcustayPromise>() => T;
}

export interface IcustayConnectionSubscription
  extends Promise<AsyncIterator<IcustayConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IcustayEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIcustaySubscription>() => T;
}

export interface D_icd_diagnosisSubscriptionPayload {
  mutation: MutationType;
  node: D_icd_diagnosis;
  updatedFields: String[];
  previousValues: D_icd_diagnosisPreviousValues;
}

export interface D_icd_diagnosisSubscriptionPayloadPromise
  extends Promise<D_icd_diagnosisSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = D_icd_diagnosisPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = D_icd_diagnosisPreviousValuesPromise>() => T;
}

export interface D_icd_diagnosisSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<D_icd_diagnosisSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = D_icd_diagnosisSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = D_icd_diagnosisPreviousValuesSubscription>() => T;
}

export interface AggregateDiagnoses_icd {
  count: Int;
}

export interface AggregateDiagnoses_icdPromise
  extends Promise<AggregateDiagnoses_icd>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiagnoses_icdSubscription
  extends Promise<AsyncIterator<AggregateDiagnoses_icd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface D_icd_diagnosisPreviousValues {
  id: ID_Output;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface D_icd_diagnosisPreviousValuesPromise
  extends Promise<D_icd_diagnosisPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface D_icd_diagnosisPreviousValuesSubscription
  extends Promise<AsyncIterator<D_icd_diagnosisPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface DatetimeeventEdge {
  node: Datetimeevent;
  cursor: String;
}

export interface DatetimeeventEdgePromise
  extends Promise<DatetimeeventEdge>,
    Fragmentable {
  node: <T = DatetimeeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DatetimeeventEdgeSubscription
  extends Promise<AsyncIterator<DatetimeeventEdge>>,
    Fragmentable {
  node: <T = DatetimeeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Icustay {
  id: ID_Output;
  dbsource: String;
  first_careunit: String;
  first_wardid: Int;
  icustay_id: Int;
  intime: DateTimeOutput;
  last_careunit: String;
  last_wardid: Int;
  los?: Float;
  outtime?: DateTimeOutput;
}

export interface IcustayPromise extends Promise<Icustay>, Fragmentable {
  id: () => Promise<ID_Output>;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<String>;
  first_careunit: () => Promise<String>;
  first_wardid: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  inputevents_cv: <T = FragmentableArray<Inputevents_cv>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<Inputevents_mv>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  intime: () => Promise<DateTimeOutput>;
  last_careunit: () => Promise<String>;
  last_wardid: () => Promise<Int>;
  los: () => Promise<Float>;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outtime: () => Promise<DateTimeOutput>;
  prescriptions: <T = FragmentableArray<Prescription>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<Procedureevents_mv>>(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = FragmentableArray<Transfer>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface IcustaySubscription
  extends Promise<AsyncIterator<Icustay>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<AsyncIterator<String>>;
  first_careunit: () => Promise<AsyncIterator<String>>;
  first_wardid: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  inputevents_cv: <T = Promise<AsyncIterator<Inputevents_cvSubscription>>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<Inputevents_mvSubscription>>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  last_careunit: () => Promise<AsyncIterator<String>>;
  last_wardid: () => Promise<AsyncIterator<Int>>;
  los: () => Promise<AsyncIterator<Float>>;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  prescriptions: <T = Promise<AsyncIterator<PrescriptionSubscription>>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<Procedureevents_mvSubscription>>
  >(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = Promise<AsyncIterator<TransferSubscription>>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface D_labitemConnection {
  pageInfo: PageInfo;
  edges: D_labitemEdge[];
}

export interface D_labitemConnectionPromise
  extends Promise<D_labitemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<D_labitemEdge>>() => T;
  aggregate: <T = AggregateD_labitemPromise>() => T;
}

export interface D_labitemConnectionSubscription
  extends Promise<AsyncIterator<D_labitemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<D_labitemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateD_labitemSubscription>() => T;
}

export interface D_icd_procedureSubscriptionPayload {
  mutation: MutationType;
  node: D_icd_procedure;
  updatedFields: String[];
  previousValues: D_icd_procedurePreviousValues;
}

export interface D_icd_procedureSubscriptionPayloadPromise
  extends Promise<D_icd_procedureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = D_icd_procedurePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = D_icd_procedurePreviousValuesPromise>() => T;
}

export interface D_icd_procedureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<D_icd_procedureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = D_icd_procedureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = D_icd_procedurePreviousValuesSubscription>() => T;
}

export interface D_itemEdge {
  node: D_item;
  cursor: String;
}

export interface D_itemEdgePromise extends Promise<D_itemEdge>, Fragmentable {
  node: <T = D_itemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface D_itemEdgeSubscription
  extends Promise<AsyncIterator<D_itemEdge>>,
    Fragmentable {
  node: <T = D_itemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface D_icd_procedurePreviousValues {
  id: ID_Output;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface D_icd_procedurePreviousValuesPromise
  extends Promise<D_icd_procedurePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface D_icd_procedurePreviousValuesSubscription
  extends Promise<AsyncIterator<D_icd_procedurePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface AggregateD_icd_procedure {
  count: Int;
}

export interface AggregateD_icd_procedurePromise
  extends Promise<AggregateD_icd_procedure>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateD_icd_procedureSubscription
  extends Promise<AsyncIterator<AggregateD_icd_procedure>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Caregiver {
  id: ID_Output;
  cgid: Int;
  label?: String;
  description?: String;
}

export interface CaregiverPromise extends Promise<Caregiver>, Fragmentable {
  id: () => Promise<ID_Output>;
  cgid: () => Promise<Int>;
  label: () => Promise<String>;
  description: () => Promise<String>;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = FragmentableArray<Inputevents_cv>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<Inputevents_mv>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = FragmentableArray<Noteevent>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<Procedureevents_mv>>(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CaregiverSubscription
  extends Promise<AsyncIterator<Caregiver>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cgid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = Promise<AsyncIterator<Inputevents_cvSubscription>>>(
    args?: {
      where?: Inputevents_cvWhereInput;
      orderBy?: Inputevents_cvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<Inputevents_mvSubscription>>>(
    args?: {
      where?: Inputevents_mvWhereInput;
      orderBy?: Inputevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = Promise<AsyncIterator<NoteeventSubscription>>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<Procedureevents_mvSubscription>>
  >(
    args?: {
      where?: Procedureevents_mvWhereInput;
      orderBy?: Procedureevents_mvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateD_icd_diagnosis {
  count: Int;
}

export interface AggregateD_icd_diagnosisPromise
  extends Promise<AggregateD_icd_diagnosis>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateD_icd_diagnosisSubscription
  extends Promise<AsyncIterator<AggregateD_icd_diagnosis>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface D_itemSubscriptionPayload {
  mutation: MutationType;
  node: D_item;
  updatedFields: String[];
  previousValues: D_itemPreviousValues;
}

export interface D_itemSubscriptionPayloadPromise
  extends Promise<D_itemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = D_itemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = D_itemPreviousValuesPromise>() => T;
}

export interface D_itemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<D_itemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = D_itemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = D_itemPreviousValuesSubscription>() => T;
}

export interface D_icd_diagnosis {
  id: ID_Output;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface D_icd_diagnosisPromise
  extends Promise<D_icd_diagnosis>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface D_icd_diagnosisSubscription
  extends Promise<AsyncIterator<D_icd_diagnosis>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface D_itemPreviousValues {
  id: ID_Output;
  abbreviation?: String;
  category?: String;
  conceptid?: Int;
  dbsource?: String;
  itemid: Int;
  label?: String;
  linksto?: String;
  param_type?: String;
  unitname?: String;
}

export interface D_itemPreviousValuesPromise
  extends Promise<D_itemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  abbreviation: () => Promise<String>;
  category: () => Promise<String>;
  conceptid: () => Promise<Int>;
  dbsource: () => Promise<String>;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  linksto: () => Promise<String>;
  param_type: () => Promise<String>;
  unitname: () => Promise<String>;
}

export interface D_itemPreviousValuesSubscription
  extends Promise<AsyncIterator<D_itemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  abbreviation: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  conceptid: () => Promise<AsyncIterator<Int>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  linksto: () => Promise<AsyncIterator<String>>;
  param_type: () => Promise<AsyncIterator<String>>;
  unitname: () => Promise<AsyncIterator<String>>;
}

export interface D_cpt {
  id: ID_Output;
  category: Int;
  codesuffix?: String;
  maxcodeinsubsection: Int;
  mincodeinsubsection: Int;
  sectionheader: String;
  sectionrange: String;
  subsectionheader: String;
  subsectionrange: String;
}

export interface D_cptPromise extends Promise<D_cpt>, Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<Int>;
  codesuffix: () => Promise<String>;
  maxcodeinsubsection: () => Promise<Int>;
  mincodeinsubsection: () => Promise<Int>;
  sectionheader: () => Promise<String>;
  sectionrange: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  subsectionrange: () => Promise<String>;
}

export interface D_cptSubscription
  extends Promise<AsyncIterator<D_cpt>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<Int>>;
  codesuffix: () => Promise<AsyncIterator<String>>;
  maxcodeinsubsection: () => Promise<AsyncIterator<Int>>;
  mincodeinsubsection: () => Promise<AsyncIterator<Int>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  sectionrange: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  subsectionrange: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCallout {
  count: Int;
}

export interface AggregateCalloutPromise
  extends Promise<AggregateCallout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCalloutSubscription
  extends Promise<AsyncIterator<AggregateCallout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents_9 {
  count: Int;
}

export interface AggregateChartevents_9Promise
  extends Promise<AggregateChartevents_9>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_9Subscription
  extends Promise<AsyncIterator<AggregateChartevents_9>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface D_labitemSubscriptionPayload {
  mutation: MutationType;
  node: D_labitem;
  updatedFields: String[];
  previousValues: D_labitemPreviousValues;
}

export interface D_labitemSubscriptionPayloadPromise
  extends Promise<D_labitemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = D_labitemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = D_labitemPreviousValuesPromise>() => T;
}

export interface D_labitemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<D_labitemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = D_labitemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = D_labitemPreviousValuesSubscription>() => T;
}

export interface ServicePreviousValues {
  id: ID_Output;
  curr_service?: String;
  prev_service?: String;
  transfertime: DateTimeOutput;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  curr_service: () => Promise<String>;
  prev_service: () => Promise<String>;
  transfertime: () => Promise<DateTimeOutput>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  curr_service: () => Promise<AsyncIterator<String>>;
  prev_service: () => Promise<AsyncIterator<String>>;
  transfertime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface D_labitemPreviousValues {
  id: ID_Output;
  category: String;
  fluid: String;
  itemid: Int;
  label: String;
  loinc_code?: String;
}

export interface D_labitemPreviousValuesPromise
  extends Promise<D_labitemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<String>;
  fluid: () => Promise<String>;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  loinc_code: () => Promise<String>;
}

export interface D_labitemPreviousValuesSubscription
  extends Promise<AsyncIterator<D_labitemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<String>>;
  fluid: () => Promise<AsyncIterator<String>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  loinc_code: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_8 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_8Promise
  extends Promise<Chartevents_8>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_8Subscription
  extends Promise<AsyncIterator<Chartevents_8>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface CalloutEdge {
  node: Callout;
  cursor: String;
}

export interface CalloutEdgePromise extends Promise<CalloutEdge>, Fragmentable {
  node: <T = CalloutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CalloutEdgeSubscription
  extends Promise<AsyncIterator<CalloutEdge>>,
    Fragmentable {
  node: <T = CalloutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_7Connection {
  pageInfo: PageInfo;
  edges: Chartevents_7Edge[];
}

export interface Chartevents_7ConnectionPromise
  extends Promise<Chartevents_7Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_7Edge>>() => T;
  aggregate: <T = AggregateChartevents_7Promise>() => T;
}

export interface Chartevents_7ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_7Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_7EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_7Subscription>() => T;
}

export interface DatetimeeventSubscriptionPayload {
  mutation: MutationType;
  node: Datetimeevent;
  updatedFields: String[];
  previousValues: DatetimeeventPreviousValues;
}

export interface DatetimeeventSubscriptionPayloadPromise
  extends Promise<DatetimeeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DatetimeeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DatetimeeventPreviousValuesPromise>() => T;
}

export interface DatetimeeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DatetimeeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DatetimeeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DatetimeeventPreviousValuesSubscription>() => T;
}

export interface Chartevents_6Connection {
  pageInfo: PageInfo;
  edges: Chartevents_6Edge[];
}

export interface Chartevents_6ConnectionPromise
  extends Promise<Chartevents_6Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_6Edge>>() => T;
  aggregate: <T = AggregateChartevents_6Promise>() => T;
}

export interface Chartevents_6ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_6Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_6EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_6Subscription>() => T;
}

export interface DatetimeeventPreviousValues {
  id: ID_Output;
  charttime: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime: DateTimeOutput;
  value?: DateTimeOutput;
  valueuom: String;
  warning?: Int;
}

export interface DatetimeeventPreviousValuesPromise
  extends Promise<DatetimeeventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<DateTimeOutput>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface DatetimeeventPreviousValuesSubscription
  extends Promise<AsyncIterator<DatetimeeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<DateTimeOutput>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_5Edge {
  node: Chartevents_5;
  cursor: String;
}

export interface Chartevents_5EdgePromise
  extends Promise<Chartevents_5Edge>,
    Fragmentable {
  node: <T = Chartevents_5Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_5EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_5Edge>>,
    Fragmentable {
  node: <T = Chartevents_5Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CalloutConnection {
  pageInfo: PageInfo;
  edges: CalloutEdge[];
}

export interface CalloutConnectionPromise
  extends Promise<CalloutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CalloutEdge>>() => T;
  aggregate: <T = AggregateCalloutPromise>() => T;
}

export interface CalloutConnectionSubscription
  extends Promise<AsyncIterator<CalloutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CalloutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCalloutSubscription>() => T;
}

export interface Chartevents_4Edge {
  node: Chartevents_4;
  cursor: String;
}

export interface Chartevents_4EdgePromise
  extends Promise<Chartevents_4Edge>,
    Fragmentable {
  node: <T = Chartevents_4Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_4EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_4Edge>>,
    Fragmentable {
  node: <T = Chartevents_4Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Diagnoses_icdSubscriptionPayload {
  mutation: MutationType;
  node: Diagnoses_icd;
  updatedFields: String[];
  previousValues: Diagnoses_icdPreviousValues;
}

export interface Diagnoses_icdSubscriptionPayloadPromise
  extends Promise<Diagnoses_icdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Diagnoses_icdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Diagnoses_icdPreviousValuesPromise>() => T;
}

export interface Diagnoses_icdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Diagnoses_icdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Diagnoses_icdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Diagnoses_icdPreviousValuesSubscription>() => T;
}

export interface AggregateChartevents_3 {
  count: Int;
}

export interface AggregateChartevents_3Promise
  extends Promise<AggregateChartevents_3>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_3Subscription
  extends Promise<AsyncIterator<AggregateChartevents_3>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Diagnoses_icdPreviousValues {
  id: ID_Output;
  icd9_code?: String;
  seq_num?: Int;
}

export interface Diagnoses_icdPreviousValuesPromise
  extends Promise<Diagnoses_icdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface Diagnoses_icdPreviousValuesSubscription
  extends Promise<AsyncIterator<Diagnoses_icdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents_2 {
  count: Int;
}

export interface AggregateChartevents_2Promise
  extends Promise<AggregateChartevents_2>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_2Subscription
  extends Promise<AsyncIterator<AggregateChartevents_2>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAdmission {
  count: Int;
}

export interface AggregateAdmissionPromise
  extends Promise<AggregateAdmission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdmissionSubscription
  extends Promise<AsyncIterator<AggregateAdmission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Diagnoses_icd {
  id: ID_Output;
  icd9_code?: String;
  seq_num?: Int;
}

export interface Diagnoses_icdPromise
  extends Promise<Diagnoses_icd>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface Diagnoses_icdSubscription
  extends Promise<AsyncIterator<Diagnoses_icd>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface DrgcodeSubscriptionPayload {
  mutation: MutationType;
  node: Drgcode;
  updatedFields: String[];
  previousValues: DrgcodePreviousValues;
}

export interface DrgcodeSubscriptionPayloadPromise
  extends Promise<DrgcodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DrgcodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DrgcodePreviousValuesPromise>() => T;
}

export interface DrgcodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DrgcodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DrgcodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DrgcodePreviousValuesSubscription>() => T;
}

export interface Chartevents_17 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_17Promise
  extends Promise<Chartevents_17>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_17Subscription
  extends Promise<AsyncIterator<Chartevents_17>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DrgcodePreviousValues {
  id: ID_Output;
  description?: String;
  drg_code: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type: String;
}

export interface DrgcodePreviousValuesPromise
  extends Promise<DrgcodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  drg_code: () => Promise<String>;
  drg_mortality: () => Promise<Int>;
  drg_severity: () => Promise<Int>;
  drg_type: () => Promise<String>;
}

export interface DrgcodePreviousValuesSubscription
  extends Promise<AsyncIterator<DrgcodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  drg_code: () => Promise<AsyncIterator<String>>;
  drg_mortality: () => Promise<AsyncIterator<Int>>;
  drg_severity: () => Promise<AsyncIterator<Int>>;
  drg_type: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_16 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_16Promise
  extends Promise<Chartevents_16>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_16Subscription
  extends Promise<AsyncIterator<Chartevents_16>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AdmissionEdge {
  node: Admission;
  cursor: String;
}

export interface AdmissionEdgePromise
  extends Promise<AdmissionEdge>,
    Fragmentable {
  node: <T = AdmissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdmissionEdgeSubscription
  extends Promise<AsyncIterator<AdmissionEdge>>,
    Fragmentable {
  node: <T = AdmissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_15Connection {
  pageInfo: PageInfo;
  edges: Chartevents_15Edge[];
}

export interface Chartevents_15ConnectionPromise
  extends Promise<Chartevents_15Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_15Edge>>() => T;
  aggregate: <T = AggregateChartevents_15Promise>() => T;
}

export interface Chartevents_15ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_15Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_15EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_15Subscription>() => T;
}

export interface IcustaySubscriptionPayload {
  mutation: MutationType;
  node: Icustay;
  updatedFields: String[];
  previousValues: IcustayPreviousValues;
}

export interface IcustaySubscriptionPayloadPromise
  extends Promise<IcustaySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IcustayPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IcustayPreviousValuesPromise>() => T;
}

export interface IcustaySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IcustaySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IcustaySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IcustayPreviousValuesSubscription>() => T;
}

export interface Chartevents_14Connection {
  pageInfo: PageInfo;
  edges: Chartevents_14Edge[];
}

export interface Chartevents_14ConnectionPromise
  extends Promise<Chartevents_14Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_14Edge>>() => T;
  aggregate: <T = AggregateChartevents_14Promise>() => T;
}

export interface Chartevents_14ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_14Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_14EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_14Subscription>() => T;
}

export interface IcustayPreviousValues {
  id: ID_Output;
  dbsource: String;
  first_careunit: String;
  first_wardid: Int;
  icustay_id: Int;
  intime: DateTimeOutput;
  last_careunit: String;
  last_wardid: Int;
  los?: Float;
  outtime?: DateTimeOutput;
}

export interface IcustayPreviousValuesPromise
  extends Promise<IcustayPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dbsource: () => Promise<String>;
  first_careunit: () => Promise<String>;
  first_wardid: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  intime: () => Promise<DateTimeOutput>;
  last_careunit: () => Promise<String>;
  last_wardid: () => Promise<Int>;
  los: () => Promise<Float>;
  outtime: () => Promise<DateTimeOutput>;
}

export interface IcustayPreviousValuesSubscription
  extends Promise<AsyncIterator<IcustayPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  first_careunit: () => Promise<AsyncIterator<String>>;
  first_wardid: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  last_careunit: () => Promise<AsyncIterator<String>>;
  last_wardid: () => Promise<AsyncIterator<Int>>;
  los: () => Promise<AsyncIterator<Float>>;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceConnection {
  pageInfo: PageInfo;
  edges: ServiceEdge[];
}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface Microbiologyevent {
  id: ID_Output;
  ab_name?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface MicrobiologyeventPromise
  extends Promise<Microbiologyevent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ab_name: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  dilution_comparison: () => Promise<String>;
  dilution_text: () => Promise<String>;
  dilution_value: () => Promise<Float>;
  interpretation: () => Promise<String>;
  isolate_num: () => Promise<Int>;
  org_name: () => Promise<String>;
  spec_type_desc: () => Promise<String>;
}

export interface MicrobiologyeventSubscription
  extends Promise<AsyncIterator<Microbiologyevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ab_name: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  dilution_comparison: () => Promise<AsyncIterator<String>>;
  dilution_text: () => Promise<AsyncIterator<String>>;
  dilution_value: () => Promise<AsyncIterator<Float>>;
  interpretation: () => Promise<AsyncIterator<String>>;
  isolate_num: () => Promise<AsyncIterator<Int>>;
  org_name: () => Promise<AsyncIterator<String>>;
  spec_type_desc: () => Promise<AsyncIterator<String>>;
}

export interface PrescriptionEdge {
  node: Prescription;
  cursor: String;
}

export interface PrescriptionEdgePromise
  extends Promise<PrescriptionEdge>,
    Fragmentable {
  node: <T = PrescriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PrescriptionEdgeSubscription
  extends Promise<AsyncIterator<PrescriptionEdge>>,
    Fragmentable {
  node: <T = PrescriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Inputevents_cvSubscriptionPayload {
  mutation: MutationType;
  node: Inputevents_cv;
  updatedFields: String[];
  previousValues: Inputevents_cvPreviousValues;
}

export interface Inputevents_cvSubscriptionPayloadPromise
  extends Promise<Inputevents_cvSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Inputevents_cvPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Inputevents_cvPreviousValuesPromise>() => T;
}

export interface Inputevents_cvSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Inputevents_cvSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Inputevents_cvSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Inputevents_cvPreviousValuesSubscription>() => T;
}

export interface OutputeventEdge {
  node: Outputevent;
  cursor: String;
}

export interface OutputeventEdgePromise
  extends Promise<OutputeventEdge>,
    Fragmentable {
  node: <T = OutputeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OutputeventEdgeSubscription
  extends Promise<AsyncIterator<OutputeventEdge>>,
    Fragmentable {
  node: <T = OutputeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Inputevents_cvPreviousValues {
  id: ID_Output;
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeOutput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
}

export interface Inputevents_cvPreviousValuesPromise
  extends Promise<Inputevents_cvPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  charttime: () => Promise<DateTimeOutput>;
  itemid: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  newbottle: () => Promise<Int>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalamountuom: () => Promise<String>;
  originalrate: () => Promise<Float>;
  originalrateuom: () => Promise<String>;
  originalroute: () => Promise<String>;
  originalsite: () => Promise<String>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
}

export interface Inputevents_cvPreviousValuesSubscription
  extends Promise<AsyncIterator<Inputevents_cvPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<Int>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalamountuom: () => Promise<AsyncIterator<String>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  originalrateuom: () => Promise<AsyncIterator<String>>;
  originalroute: () => Promise<AsyncIterator<String>>;
  originalsite: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Inputevents_mvConnection {
  pageInfo: PageInfo;
  edges: Inputevents_mvEdge[];
}

export interface Inputevents_mvConnectionPromise
  extends Promise<Inputevents_mvConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Inputevents_mvEdge>>() => T;
  aggregate: <T = AggregateInputevents_mvPromise>() => T;
}

export interface Inputevents_mvConnectionSubscription
  extends Promise<AsyncIterator<Inputevents_mvConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Inputevents_mvEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInputevents_mvSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DrgcodeEdge {
  node: Drgcode;
  cursor: String;
}

export interface DrgcodeEdgePromise extends Promise<DrgcodeEdge>, Fragmentable {
  node: <T = DrgcodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DrgcodeEdgeSubscription
  extends Promise<AsyncIterator<DrgcodeEdge>>,
    Fragmentable {
  node: <T = DrgcodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Inputevents_mvSubscriptionPayload {
  mutation: MutationType;
  node: Inputevents_mv;
  updatedFields: String[];
  previousValues: Inputevents_mvPreviousValues;
}

export interface Inputevents_mvSubscriptionPayloadPromise
  extends Promise<Inputevents_mvSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Inputevents_mvPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Inputevents_mvPreviousValuesPromise>() => T;
}

export interface Inputevents_mvSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Inputevents_mvSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Inputevents_mvSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Inputevents_mvPreviousValuesSubscription>() => T;
}

export interface AggregateD_labitem {
  count: Int;
}

export interface AggregateD_labitemPromise
  extends Promise<AggregateD_labitem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateD_labitemSubscription
  extends Promise<AsyncIterator<AggregateD_labitem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Inputevents_mvPreviousValues {
  id: ID_Output;
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface Inputevents_mvPreviousValuesPromise
  extends Promise<Inputevents_mvPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  ordercomponenttypedescription: () => Promise<String>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalrate: () => Promise<Float>;
  patientweight: () => Promise<Float>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  totalamount: () => Promise<Float>;
  totalamountuom: () => Promise<String>;
}

export interface Inputevents_mvPreviousValuesSubscription
  extends Promise<AsyncIterator<Inputevents_mvPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  ordercomponenttypedescription: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  patientweight: () => Promise<AsyncIterator<Float>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
  totalamountuom: () => Promise<AsyncIterator<String>>;
}

export interface Procedureevents_mv {
  id: ID_Output;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface Procedureevents_mvPromise
  extends Promise<Procedureevents_mv>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  location: () => Promise<String>;
  locationcategory: () => Promise<String>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  orderid: () => Promise<Int>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface Procedureevents_mvSubscription
  extends Promise<AsyncIterator<Procedureevents_mv>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationcategory: () => Promise<AsyncIterator<String>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface AdmissionConnection {
  pageInfo: PageInfo;
  edges: AdmissionEdge[];
}

export interface AdmissionConnectionPromise
  extends Promise<AdmissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdmissionEdge>>() => T;
  aggregate: <T = AggregateAdmissionPromise>() => T;
}

export interface AdmissionConnectionSubscription
  extends Promise<AsyncIterator<AdmissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdmissionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdmissionSubscription>() => T;
}

export interface D_icd_diagnosisConnection {
  pageInfo: PageInfo;
  edges: D_icd_diagnosisEdge[];
}

export interface D_icd_diagnosisConnectionPromise
  extends Promise<D_icd_diagnosisConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<D_icd_diagnosisEdge>>() => T;
  aggregate: <T = AggregateD_icd_diagnosisPromise>() => T;
}

export interface D_icd_diagnosisConnectionSubscription
  extends Promise<AsyncIterator<D_icd_diagnosisConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<D_icd_diagnosisEdgeSubscription>>>() => T;
  aggregate: <T = AggregateD_icd_diagnosisSubscription>() => T;
}

export interface LabeventSubscriptionPayload {
  mutation: MutationType;
  node: Labevent;
  updatedFields: String[];
  previousValues: LabeventPreviousValues;
}

export interface LabeventSubscriptionPayloadPromise
  extends Promise<LabeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LabeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LabeventPreviousValuesPromise>() => T;
}

export interface LabeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LabeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LabeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LabeventPreviousValuesSubscription>() => T;
}

export interface CpteventEdge {
  node: Cptevent;
  cursor: String;
}

export interface CpteventEdgePromise
  extends Promise<CpteventEdge>,
    Fragmentable {
  node: <T = CpteventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CpteventEdgeSubscription
  extends Promise<AsyncIterator<CpteventEdge>>,
    Fragmentable {
  node: <T = CpteventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LabeventPreviousValues {
  id: ID_Output;
  charttime?: DateTimeOutput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface LabeventPreviousValuesPromise
  extends Promise<LabeventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  flag: () => Promise<String>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface LabeventPreviousValuesSubscription
  extends Promise<AsyncIterator<LabeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  flag: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_8Edge {
  node: Chartevents_8;
  cursor: String;
}

export interface Chartevents_8EdgePromise
  extends Promise<Chartevents_8Edge>,
    Fragmentable {
  node: <T = Chartevents_8Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_8EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_8Edge>>,
    Fragmentable {
  node: <T = Chartevents_8Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Inputevents_cv {
  id: ID_Output;
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeOutput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
}

export interface Inputevents_cvPromise
  extends Promise<Inputevents_cv>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  charttime: () => Promise<DateTimeOutput>;
  itemid: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  newbottle: () => Promise<Int>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalamountuom: () => Promise<String>;
  originalrate: () => Promise<Float>;
  originalrateuom: () => Promise<String>;
  originalroute: () => Promise<String>;
  originalsite: () => Promise<String>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
}

export interface Inputevents_cvSubscription
  extends Promise<AsyncIterator<Inputevents_cv>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<Int>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalamountuom: () => Promise<AsyncIterator<String>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  originalrateuom: () => Promise<AsyncIterator<String>>;
  originalroute: () => Promise<AsyncIterator<String>>;
  originalsite: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateChartevents_6 {
  count: Int;
}

export interface AggregateChartevents_6Promise
  extends Promise<AggregateChartevents_6>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_6Subscription
  extends Promise<AsyncIterator<AggregateChartevents_6>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MicrobiologyeventSubscriptionPayload {
  mutation: MutationType;
  node: Microbiologyevent;
  updatedFields: String[];
  previousValues: MicrobiologyeventPreviousValues;
}

export interface MicrobiologyeventSubscriptionPayloadPromise
  extends Promise<MicrobiologyeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MicrobiologyeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MicrobiologyeventPreviousValuesPromise>() => T;
}

export interface MicrobiologyeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MicrobiologyeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MicrobiologyeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MicrobiologyeventPreviousValuesSubscription>() => T;
}

export interface Chartevents_5 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_5Promise
  extends Promise<Chartevents_5>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_5Subscription
  extends Promise<AsyncIterator<Chartevents_5>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface MicrobiologyeventPreviousValues {
  id: ID_Output;
  ab_name?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface MicrobiologyeventPreviousValuesPromise
  extends Promise<MicrobiologyeventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ab_name: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  dilution_comparison: () => Promise<String>;
  dilution_text: () => Promise<String>;
  dilution_value: () => Promise<Float>;
  interpretation: () => Promise<String>;
  isolate_num: () => Promise<Int>;
  org_name: () => Promise<String>;
  spec_type_desc: () => Promise<String>;
}

export interface MicrobiologyeventPreviousValuesSubscription
  extends Promise<AsyncIterator<MicrobiologyeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ab_name: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  dilution_comparison: () => Promise<AsyncIterator<String>>;
  dilution_text: () => Promise<AsyncIterator<String>>;
  dilution_value: () => Promise<AsyncIterator<Float>>;
  interpretation: () => Promise<AsyncIterator<String>>;
  isolate_num: () => Promise<AsyncIterator<Int>>;
  org_name: () => Promise<AsyncIterator<String>>;
  spec_type_desc: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_3Connection {
  pageInfo: PageInfo;
  edges: Chartevents_3Edge[];
}

export interface Chartevents_3ConnectionPromise
  extends Promise<Chartevents_3Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_3Edge>>() => T;
  aggregate: <T = AggregateChartevents_3Promise>() => T;
}

export interface Chartevents_3ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_3Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_3EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_3Subscription>() => T;
}

export interface Service {
  id: ID_Output;
  curr_service?: String;
  prev_service?: String;
  transfertime: DateTimeOutput;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<ID_Output>;
  curr_service: () => Promise<String>;
  prev_service: () => Promise<String>;
  transfertime: () => Promise<DateTimeOutput>;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  curr_service: () => Promise<AsyncIterator<String>>;
  prev_service: () => Promise<AsyncIterator<String>>;
  transfertime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Chartevents_17Edge {
  node: Chartevents_17;
  cursor: String;
}

export interface Chartevents_17EdgePromise
  extends Promise<Chartevents_17Edge>,
    Fragmentable {
  node: <T = Chartevents_17Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_17EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_17Edge>>,
    Fragmentable {
  node: <T = Chartevents_17Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NoteeventSubscriptionPayload {
  mutation: MutationType;
  node: Noteevent;
  updatedFields: String[];
  previousValues: NoteeventPreviousValues;
}

export interface NoteeventSubscriptionPayloadPromise
  extends Promise<NoteeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NoteeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NoteeventPreviousValuesPromise>() => T;
}

export interface NoteeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NoteeventPreviousValuesSubscription>() => T;
}

export interface AggregateChartevents_15 {
  count: Int;
}

export interface AggregateChartevents_15Promise
  extends Promise<AggregateChartevents_15>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_15Subscription
  extends Promise<AsyncIterator<AggregateChartevents_15>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NoteeventPreviousValues {
  id: ID_Output;
  category?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeOutput;
  text?: String;
}

export interface NoteeventPreviousValuesPromise
  extends Promise<NoteeventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  iserror: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface NoteeventPreviousValuesSubscription
  extends Promise<AsyncIterator<NoteeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  iserror: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface TransferEdge {
  node: Transfer;
  cursor: String;
}

export interface TransferEdgePromise
  extends Promise<TransferEdge>,
    Fragmentable {
  node: <T = TransferPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransferEdgeSubscription
  extends Promise<AsyncIterator<TransferEdge>>,
    Fragmentable {
  node: <T = TransferSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Inputevents_mv {
  id: ID_Output;
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface Inputevents_mvPromise
  extends Promise<Inputevents_mv>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  ordercomponenttypedescription: () => Promise<String>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalrate: () => Promise<Float>;
  patientweight: () => Promise<Float>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  totalamount: () => Promise<Float>;
  totalamountuom: () => Promise<String>;
}

export interface Inputevents_mvSubscription
  extends Promise<AsyncIterator<Inputevents_mv>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  ordercomponenttypedescription: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  patientweight: () => Promise<AsyncIterator<Float>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
  totalamountuom: () => Promise<AsyncIterator<String>>;
}

export interface PatientConnection {
  pageInfo: PageInfo;
  edges: PatientEdge[];
}

export interface PatientConnectionPromise
  extends Promise<PatientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientEdge>>() => T;
  aggregate: <T = AggregatePatientPromise>() => T;
}

export interface PatientConnectionSubscription
  extends Promise<AsyncIterator<PatientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientSubscription>() => T;
}

export interface OutputeventSubscriptionPayload {
  mutation: MutationType;
  node: Outputevent;
  updatedFields: String[];
  previousValues: OutputeventPreviousValues;
}

export interface OutputeventSubscriptionPayloadPromise
  extends Promise<OutputeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OutputeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OutputeventPreviousValuesPromise>() => T;
}

export interface OutputeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OutputeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OutputeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OutputeventPreviousValuesSubscription>() => T;
}

export interface AggregateIcustay {
  count: Int;
}

export interface AggregateIcustayPromise
  extends Promise<AggregateIcustay>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIcustaySubscription
  extends Promise<AsyncIterator<AggregateIcustay>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OutputeventPreviousValues {
  id: ID_Output;
  charttime?: DateTimeOutput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface OutputeventPreviousValuesPromise
  extends Promise<OutputeventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  iserror: () => Promise<Int>;
  newbottle: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface OutputeventPreviousValuesSubscription
  extends Promise<AsyncIterator<OutputeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  iserror: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface D_labitem {
  id: ID_Output;
  category: String;
  fluid: String;
  itemid: Int;
  label: String;
  loinc_code?: String;
}

export interface D_labitemPromise extends Promise<D_labitem>, Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<String>;
  fluid: () => Promise<String>;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  labevents: <T = FragmentableArray<Labevent>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  loinc_code: () => Promise<String>;
}

export interface D_labitemSubscription
  extends Promise<AsyncIterator<D_labitem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<String>>;
  fluid: () => Promise<AsyncIterator<String>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  labevents: <T = Promise<AsyncIterator<LabeventSubscription>>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  loinc_code: () => Promise<AsyncIterator<String>>;
}

export interface Procedures_icd {
  id: ID_Output;
  icd9_code: String;
  seq_num: Int;
}

export interface Procedures_icdPromise
  extends Promise<Procedures_icd>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface Procedures_icdSubscription
  extends Promise<AsyncIterator<Procedures_icd>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface D_cptEdge {
  node: D_cpt;
  cursor: String;
}

export interface D_cptEdgePromise extends Promise<D_cptEdge>, Fragmentable {
  node: <T = D_cptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface D_cptEdgeSubscription
  extends Promise<AsyncIterator<D_cptEdge>>,
    Fragmentable {
  node: <T = D_cptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PatientSubscriptionPayload {
  mutation: MutationType;
  node: Patient;
  updatedFields: String[];
  previousValues: PatientPreviousValues;
}

export interface PatientSubscriptionPayloadPromise
  extends Promise<PatientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientPreviousValuesPromise>() => T;
}

export interface PatientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientPreviousValuesSubscription>() => T;
}

export interface AggregateChartevents_7 {
  count: Int;
}

export interface AggregateChartevents_7Promise
  extends Promise<AggregateChartevents_7>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_7Subscription
  extends Promise<AsyncIterator<AggregateChartevents_7>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PatientPreviousValues {
  id: ID_Output;
  dob: DateTimeOutput;
  dod?: DateTimeOutput;
  dod_hosp?: DateTimeOutput;
  dod_ssn?: DateTimeOutput;
  expire_flag: Int;
  gender: String;
  subject_id: Int;
}

export interface PatientPreviousValuesPromise
  extends Promise<PatientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dob: () => Promise<DateTimeOutput>;
  dod: () => Promise<DateTimeOutput>;
  dod_hosp: () => Promise<DateTimeOutput>;
  dod_ssn: () => Promise<DateTimeOutput>;
  expire_flag: () => Promise<Int>;
  gender: () => Promise<String>;
  subject_id: () => Promise<Int>;
}

export interface PatientPreviousValuesSubscription
  extends Promise<AsyncIterator<PatientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_hosp: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_ssn: () => Promise<AsyncIterator<DateTimeOutput>>;
  expire_flag: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents_4 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents_4Promise
  extends Promise<Chartevents_4>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents_4Subscription
  extends Promise<AsyncIterator<Chartevents_4>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Outputevent {
  id: ID_Output;
  charttime?: DateTimeOutput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface OutputeventPromise extends Promise<Outputevent>, Fragmentable {
  id: () => Promise<ID_Output>;
  charttime: () => Promise<DateTimeOutput>;
  iserror: () => Promise<Int>;
  newbottle: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface OutputeventSubscription
  extends Promise<AsyncIterator<Outputevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  iserror: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_16Edge {
  node: Chartevents_16;
  cursor: String;
}

export interface Chartevents_16EdgePromise
  extends Promise<Chartevents_16Edge>,
    Fragmentable {
  node: <T = Chartevents_16Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents_16EdgeSubscription
  extends Promise<AsyncIterator<Chartevents_16Edge>>,
    Fragmentable {
  node: <T = Chartevents_16Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PrescriptionSubscriptionPayload {
  mutation: MutationType;
  node: Prescription;
  updatedFields: String[];
  previousValues: PrescriptionPreviousValues;
}

export interface PrescriptionSubscriptionPayloadPromise
  extends Promise<PrescriptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PrescriptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PrescriptionPreviousValuesPromise>() => T;
}

export interface PrescriptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PrescriptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PrescriptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PrescriptionPreviousValuesSubscription>() => T;
}

export interface AggregateProcedureevents_mv {
  count: Int;
}

export interface AggregateProcedureevents_mvPromise
  extends Promise<AggregateProcedureevents_mv>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProcedureevents_mvSubscription
  extends Promise<AsyncIterator<AggregateProcedureevents_mv>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PrescriptionPreviousValues {
  id: ID_Output;
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type: String;
  enddate?: DateTimeOutput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeOutput;
}

export interface PrescriptionPreviousValuesPromise
  extends Promise<PrescriptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dose_unit_rx: () => Promise<String>;
  dose_val_rx: () => Promise<String>;
  drug: () => Promise<String>;
  drug_name_generic: () => Promise<String>;
  drug_name_poe: () => Promise<String>;
  drug_type: () => Promise<String>;
  enddate: () => Promise<DateTimeOutput>;
  form_unit_disp: () => Promise<String>;
  form_val_disp: () => Promise<String>;
  formulary_drug_cd: () => Promise<String>;
  gsn: () => Promise<String>;
  ndc: () => Promise<String>;
  prod_strength: () => Promise<String>;
  route: () => Promise<String>;
  startdate: () => Promise<DateTimeOutput>;
}

export interface PrescriptionPreviousValuesSubscription
  extends Promise<AsyncIterator<PrescriptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dose_unit_rx: () => Promise<AsyncIterator<String>>;
  dose_val_rx: () => Promise<AsyncIterator<String>>;
  drug: () => Promise<AsyncIterator<String>>;
  drug_name_generic: () => Promise<AsyncIterator<String>>;
  drug_name_poe: () => Promise<AsyncIterator<String>>;
  drug_type: () => Promise<AsyncIterator<String>>;
  enddate: () => Promise<AsyncIterator<DateTimeOutput>>;
  form_unit_disp: () => Promise<AsyncIterator<String>>;
  form_val_disp: () => Promise<AsyncIterator<String>>;
  formulary_drug_cd: () => Promise<AsyncIterator<String>>;
  gsn: () => Promise<AsyncIterator<String>>;
  ndc: () => Promise<AsyncIterator<String>>;
  prod_strength: () => Promise<AsyncIterator<String>>;
  route: () => Promise<AsyncIterator<String>>;
  startdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Diagnoses_icdConnection {
  pageInfo: PageInfo;
  edges: Diagnoses_icdEdge[];
}

export interface Diagnoses_icdConnectionPromise
  extends Promise<Diagnoses_icdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Diagnoses_icdEdge>>() => T;
  aggregate: <T = AggregateDiagnoses_icdPromise>() => T;
}

export interface Diagnoses_icdConnectionSubscription
  extends Promise<AsyncIterator<Diagnoses_icdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Diagnoses_icdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiagnoses_icdSubscription>() => T;
}

export interface Noteevent {
  id: ID_Output;
  category?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeOutput;
  text?: String;
}

export interface NoteeventPromise extends Promise<Noteevent>, Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  iserror: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface NoteeventSubscription
  extends Promise<AsyncIterator<Noteevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  iserror: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents_9Connection {
  pageInfo: PageInfo;
  edges: Chartevents_9Edge[];
}

export interface Chartevents_9ConnectionPromise
  extends Promise<Chartevents_9Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_9Edge>>() => T;
  aggregate: <T = AggregateChartevents_9Promise>() => T;
}

export interface Chartevents_9ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_9Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_9EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_9Subscription>() => T;
}

export interface Chartevents_2Connection {
  pageInfo: PageInfo;
  edges: Chartevents_2Edge[];
}

export interface Chartevents_2ConnectionPromise
  extends Promise<Chartevents_2Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents_2Edge>>() => T;
  aggregate: <T = AggregateChartevents_2Promise>() => T;
}

export interface Chartevents_2ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents_2Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents_2EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents_2Subscription>() => T;
}

export interface Procedures_icdSubscriptionPayload {
  mutation: MutationType;
  node: Procedures_icd;
  updatedFields: String[];
  previousValues: Procedures_icdPreviousValues;
}

export interface Procedures_icdSubscriptionPayloadPromise
  extends Promise<Procedures_icdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Procedures_icdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Procedures_icdPreviousValuesPromise>() => T;
}

export interface Procedures_icdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Procedures_icdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Procedures_icdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Procedures_icdPreviousValuesSubscription>() => T;
}

export interface Prescription {
  id: ID_Output;
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type: String;
  enddate?: DateTimeOutput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeOutput;
}

export interface PrescriptionPromise
  extends Promise<Prescription>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dose_unit_rx: () => Promise<String>;
  dose_val_rx: () => Promise<String>;
  drug: () => Promise<String>;
  drug_name_generic: () => Promise<String>;
  drug_name_poe: () => Promise<String>;
  drug_type: () => Promise<String>;
  enddate: () => Promise<DateTimeOutput>;
  form_unit_disp: () => Promise<String>;
  form_val_disp: () => Promise<String>;
  formulary_drug_cd: () => Promise<String>;
  gsn: () => Promise<String>;
  ndc: () => Promise<String>;
  prod_strength: () => Promise<String>;
  route: () => Promise<String>;
  startdate: () => Promise<DateTimeOutput>;
}

export interface PrescriptionSubscription
  extends Promise<AsyncIterator<Prescription>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dose_unit_rx: () => Promise<AsyncIterator<String>>;
  dose_val_rx: () => Promise<AsyncIterator<String>>;
  drug: () => Promise<AsyncIterator<String>>;
  drug_name_generic: () => Promise<AsyncIterator<String>>;
  drug_name_poe: () => Promise<AsyncIterator<String>>;
  drug_type: () => Promise<AsyncIterator<String>>;
  enddate: () => Promise<AsyncIterator<DateTimeOutput>>;
  form_unit_disp: () => Promise<AsyncIterator<String>>;
  form_val_disp: () => Promise<AsyncIterator<String>>;
  formulary_drug_cd: () => Promise<AsyncIterator<String>>;
  gsn: () => Promise<AsyncIterator<String>>;
  ndc: () => Promise<AsyncIterator<String>>;
  prod_strength: () => Promise<AsyncIterator<String>>;
  route: () => Promise<AsyncIterator<String>>;
  startdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Procedureevents_mvPreviousValues {
  id: ID_Output;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface Procedureevents_mvPreviousValuesPromise
  extends Promise<Procedureevents_mvPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  location: () => Promise<String>;
  locationcategory: () => Promise<String>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  orderid: () => Promise<Int>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface Procedureevents_mvPreviousValuesSubscription
  extends Promise<AsyncIterator<Procedureevents_mvPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationcategory: () => Promise<AsyncIterator<String>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface Procedureevents_mvSubscriptionPayload {
  mutation: MutationType;
  node: Procedureevents_mv;
  updatedFields: String[];
  previousValues: Procedureevents_mvPreviousValues;
}

export interface Procedureevents_mvSubscriptionPayloadPromise
  extends Promise<Procedureevents_mvSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Procedureevents_mvPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Procedureevents_mvPreviousValuesPromise>() => T;
}

export interface Procedureevents_mvSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Procedureevents_mvSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Procedureevents_mvSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Procedureevents_mvPreviousValuesSubscription>() => T;
}

export interface AggregateChartevents_14 {
  count: Int;
}

export interface AggregateChartevents_14Promise
  extends Promise<AggregateChartevents_14>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents_14Subscription
  extends Promise<AsyncIterator<AggregateChartevents_14>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cptevent {
  id: ID_Output;
  chartdate?: DateTimeOutput;
  costcenter: String;
  cpt_cd: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface CpteventPromise extends Promise<Cptevent>, Fragmentable {
  id: () => Promise<ID_Output>;
  chartdate: () => Promise<DateTimeOutput>;
  costcenter: () => Promise<String>;
  cpt_cd: () => Promise<String>;
  cpt_number: () => Promise<Int>;
  cpt_suffix: () => Promise<String>;
  description: () => Promise<String>;
  sectionheader: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  ticket_id_seq: () => Promise<Int>;
}

export interface CpteventSubscription
  extends Promise<AsyncIterator<Cptevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  costcenter: () => Promise<AsyncIterator<String>>;
  cpt_cd: () => Promise<AsyncIterator<String>>;
  cpt_number: () => Promise<AsyncIterator<Int>>;
  cpt_suffix: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  ticket_id_seq: () => Promise<AsyncIterator<Int>>;
}

export interface D_icd_procedureConnection {
  pageInfo: PageInfo;
  edges: D_icd_procedureEdge[];
}

export interface D_icd_procedureConnectionPromise
  extends Promise<D_icd_procedureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<D_icd_procedureEdge>>() => T;
  aggregate: <T = AggregateD_icd_procedurePromise>() => T;
}

export interface D_icd_procedureConnectionSubscription
  extends Promise<AsyncIterator<D_icd_procedureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<D_icd_procedureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateD_icd_procedureSubscription>() => T;
}

export interface NoteeventConnection {
  pageInfo: PageInfo;
  edges: NoteeventEdge[];
}

export interface NoteeventConnectionPromise
  extends Promise<NoteeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteeventEdge>>() => T;
  aggregate: <T = AggregateNoteeventPromise>() => T;
}

export interface NoteeventConnectionSubscription
  extends Promise<AsyncIterator<NoteeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteeventSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Caregiver",
    embedded: false
  },
  {
    name: "Admission",
    embedded: false
  },
  {
    name: "Callout",
    embedded: false
  },
  {
    name: "Chartevent",
    embedded: false
  },
  {
    name: "Chartevents_1",
    embedded: false
  },
  {
    name: "Chartevents_10",
    embedded: false
  },
  {
    name: "Chartevents_11",
    embedded: false
  },
  {
    name: "Chartevents_12",
    embedded: false
  },
  {
    name: "Chartevents_13",
    embedded: false
  },
  {
    name: "Chartevents_14",
    embedded: false
  },
  {
    name: "Chartevents_15",
    embedded: false
  },
  {
    name: "Chartevents_16",
    embedded: false
  },
  {
    name: "Chartevents_17",
    embedded: false
  },
  {
    name: "Chartevents_2",
    embedded: false
  },
  {
    name: "Chartevents_3",
    embedded: false
  },
  {
    name: "Chartevents_4",
    embedded: false
  },
  {
    name: "Chartevents_5",
    embedded: false
  },
  {
    name: "Chartevents_6",
    embedded: false
  },
  {
    name: "Chartevents_7",
    embedded: false
  },
  {
    name: "Chartevents_8",
    embedded: false
  },
  {
    name: "Chartevents_9",
    embedded: false
  },
  {
    name: "Cptevent",
    embedded: false
  },
  {
    name: "D_cpt",
    embedded: false
  },
  {
    name: "D_icd_diagnosis",
    embedded: false
  },
  {
    name: "D_icd_procedure",
    embedded: false
  },
  {
    name: "D_item",
    embedded: false
  },
  {
    name: "D_labitem",
    embedded: false
  },
  {
    name: "Datetimeevent",
    embedded: false
  },
  {
    name: "Diagnoses_icd",
    embedded: false
  },
  {
    name: "Drgcode",
    embedded: false
  },
  {
    name: "Icustay",
    embedded: false
  },
  {
    name: "Inputevents_cv",
    embedded: false
  },
  {
    name: "Inputevents_mv",
    embedded: false
  },
  {
    name: "Labevent",
    embedded: false
  },
  {
    name: "Microbiologyevent",
    embedded: false
  },
  {
    name: "Noteevent",
    embedded: false
  },
  {
    name: "Outputevent",
    embedded: false
  },
  {
    name: "Patient",
    embedded: false
  },
  {
    name: "Prescription",
    embedded: false
  },
  {
    name: "Procedureevents_mv",
    embedded: false
  },
  {
    name: "Procedures_icd",
    embedded: false
  },
  {
    name: "Service",
    embedded: false
  },
  {
    name: "Transfer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
