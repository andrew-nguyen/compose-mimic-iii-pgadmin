// Code generated by Prisma (prisma@1.29.0-beta.9). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  admission: (where?: AdmissionWhereInput) => Promise<boolean>;
  callout: (where?: CalloutWhereInput) => Promise<boolean>;
  caregiver: (where?: CaregiverWhereInput) => Promise<boolean>;
  chartevent: (where?: CharteventWhereInput) => Promise<boolean>;
  chartevents1: (where?: Chartevents1WhereInput) => Promise<boolean>;
  chartevents10: (where?: Chartevents10WhereInput) => Promise<boolean>;
  chartevents11: (where?: Chartevents11WhereInput) => Promise<boolean>;
  chartevents12: (where?: Chartevents12WhereInput) => Promise<boolean>;
  chartevents13: (where?: Chartevents13WhereInput) => Promise<boolean>;
  chartevents14: (where?: Chartevents14WhereInput) => Promise<boolean>;
  chartevents15: (where?: Chartevents15WhereInput) => Promise<boolean>;
  chartevents16: (where?: Chartevents16WhereInput) => Promise<boolean>;
  chartevents17: (where?: Chartevents17WhereInput) => Promise<boolean>;
  chartevents2: (where?: Chartevents2WhereInput) => Promise<boolean>;
  chartevents3: (where?: Chartevents3WhereInput) => Promise<boolean>;
  chartevents4: (where?: Chartevents4WhereInput) => Promise<boolean>;
  chartevents5: (where?: Chartevents5WhereInput) => Promise<boolean>;
  chartevents6: (where?: Chartevents6WhereInput) => Promise<boolean>;
  chartevents7: (where?: Chartevents7WhereInput) => Promise<boolean>;
  chartevents8: (where?: Chartevents8WhereInput) => Promise<boolean>;
  chartevents9: (where?: Chartevents9WhereInput) => Promise<boolean>;
  cptevent: (where?: CpteventWhereInput) => Promise<boolean>;
  dCpt: (where?: DCptWhereInput) => Promise<boolean>;
  dIcdDiagnosis: (where?: DIcdDiagnosisWhereInput) => Promise<boolean>;
  dIcdProcedure: (where?: DIcdProcedureWhereInput) => Promise<boolean>;
  dItem: (where?: DItemWhereInput) => Promise<boolean>;
  dLabitem: (where?: DLabitemWhereInput) => Promise<boolean>;
  datetimeevent: (where?: DatetimeeventWhereInput) => Promise<boolean>;
  diagnosesIcd: (where?: DiagnosesIcdWhereInput) => Promise<boolean>;
  drgcode: (where?: DrgcodeWhereInput) => Promise<boolean>;
  icustay: (where?: IcustayWhereInput) => Promise<boolean>;
  inputeventsCv: (where?: InputeventsCvWhereInput) => Promise<boolean>;
  inputeventsMv: (where?: InputeventsMvWhereInput) => Promise<boolean>;
  labevent: (where?: LabeventWhereInput) => Promise<boolean>;
  microbiologyevent: (where?: MicrobiologyeventWhereInput) => Promise<boolean>;
  noteevent: (where?: NoteeventWhereInput) => Promise<boolean>;
  outputevent: (where?: OutputeventWhereInput) => Promise<boolean>;
  patient: (where?: PatientWhereInput) => Promise<boolean>;
  prescription: (where?: PrescriptionWhereInput) => Promise<boolean>;
  procedureeventsMv: (where?: ProcedureeventsMvWhereInput) => Promise<boolean>;
  proceduresIcd: (where?: ProceduresIcdWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  transfer: (where?: TransferWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  admission: (where: AdmissionWhereUniqueInput) => AdmissionPromise;
  admissions: (
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Admission>;
  admissionsConnection: (
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AdmissionConnectionPromise;
  callout: (where: CalloutWhereUniqueInput) => CalloutPromise;
  callouts: (
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Callout>;
  calloutsConnection: (
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CalloutConnectionPromise;
  caregiver: (where: CaregiverWhereUniqueInput) => CaregiverPromise;
  caregivers: (
    args?: {
      where?: CaregiverWhereInput;
      orderBy?: CaregiverOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Caregiver>;
  caregiversConnection: (
    args?: {
      where?: CaregiverWhereInput;
      orderBy?: CaregiverOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CaregiverConnectionPromise;
  chartevent: (where: CharteventWhereUniqueInput) => CharteventPromise;
  chartevents: (
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevent>;
  charteventsConnection: (
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CharteventConnectionPromise;
  chartevents1s: (
    args?: {
      where?: Chartevents1WhereInput;
      orderBy?: Chartevents1OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents1>;
  chartevents1sConnection: (
    args?: {
      where?: Chartevents1WhereInput;
      orderBy?: Chartevents1OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents1ConnectionPromise;
  chartevents10s: (
    args?: {
      where?: Chartevents10WhereInput;
      orderBy?: Chartevents10OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents10>;
  chartevents10sConnection: (
    args?: {
      where?: Chartevents10WhereInput;
      orderBy?: Chartevents10OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents10ConnectionPromise;
  chartevents11s: (
    args?: {
      where?: Chartevents11WhereInput;
      orderBy?: Chartevents11OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents11>;
  chartevents11sConnection: (
    args?: {
      where?: Chartevents11WhereInput;
      orderBy?: Chartevents11OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents11ConnectionPromise;
  chartevents12s: (
    args?: {
      where?: Chartevents12WhereInput;
      orderBy?: Chartevents12OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents12>;
  chartevents12sConnection: (
    args?: {
      where?: Chartevents12WhereInput;
      orderBy?: Chartevents12OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents12ConnectionPromise;
  chartevents13s: (
    args?: {
      where?: Chartevents13WhereInput;
      orderBy?: Chartevents13OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents13>;
  chartevents13sConnection: (
    args?: {
      where?: Chartevents13WhereInput;
      orderBy?: Chartevents13OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents13ConnectionPromise;
  chartevents14s: (
    args?: {
      where?: Chartevents14WhereInput;
      orderBy?: Chartevents14OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents14>;
  chartevents14sConnection: (
    args?: {
      where?: Chartevents14WhereInput;
      orderBy?: Chartevents14OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents14ConnectionPromise;
  chartevents15s: (
    args?: {
      where?: Chartevents15WhereInput;
      orderBy?: Chartevents15OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents15>;
  chartevents15sConnection: (
    args?: {
      where?: Chartevents15WhereInput;
      orderBy?: Chartevents15OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents15ConnectionPromise;
  chartevents16s: (
    args?: {
      where?: Chartevents16WhereInput;
      orderBy?: Chartevents16OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents16>;
  chartevents16sConnection: (
    args?: {
      where?: Chartevents16WhereInput;
      orderBy?: Chartevents16OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents16ConnectionPromise;
  chartevents17s: (
    args?: {
      where?: Chartevents17WhereInput;
      orderBy?: Chartevents17OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents17>;
  chartevents17sConnection: (
    args?: {
      where?: Chartevents17WhereInput;
      orderBy?: Chartevents17OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents17ConnectionPromise;
  chartevents2s: (
    args?: {
      where?: Chartevents2WhereInput;
      orderBy?: Chartevents2OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents2>;
  chartevents2sConnection: (
    args?: {
      where?: Chartevents2WhereInput;
      orderBy?: Chartevents2OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents2ConnectionPromise;
  chartevents3s: (
    args?: {
      where?: Chartevents3WhereInput;
      orderBy?: Chartevents3OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents3>;
  chartevents3sConnection: (
    args?: {
      where?: Chartevents3WhereInput;
      orderBy?: Chartevents3OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents3ConnectionPromise;
  chartevents4s: (
    args?: {
      where?: Chartevents4WhereInput;
      orderBy?: Chartevents4OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents4>;
  chartevents4sConnection: (
    args?: {
      where?: Chartevents4WhereInput;
      orderBy?: Chartevents4OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents4ConnectionPromise;
  chartevents5s: (
    args?: {
      where?: Chartevents5WhereInput;
      orderBy?: Chartevents5OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents5>;
  chartevents5sConnection: (
    args?: {
      where?: Chartevents5WhereInput;
      orderBy?: Chartevents5OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents5ConnectionPromise;
  chartevents6s: (
    args?: {
      where?: Chartevents6WhereInput;
      orderBy?: Chartevents6OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents6>;
  chartevents6sConnection: (
    args?: {
      where?: Chartevents6WhereInput;
      orderBy?: Chartevents6OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents6ConnectionPromise;
  chartevents7s: (
    args?: {
      where?: Chartevents7WhereInput;
      orderBy?: Chartevents7OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents7>;
  chartevents7sConnection: (
    args?: {
      where?: Chartevents7WhereInput;
      orderBy?: Chartevents7OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents7ConnectionPromise;
  chartevents8s: (
    args?: {
      where?: Chartevents8WhereInput;
      orderBy?: Chartevents8OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents8>;
  chartevents8sConnection: (
    args?: {
      where?: Chartevents8WhereInput;
      orderBy?: Chartevents8OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents8ConnectionPromise;
  chartevents9s: (
    args?: {
      where?: Chartevents9WhereInput;
      orderBy?: Chartevents9OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Chartevents9>;
  chartevents9sConnection: (
    args?: {
      where?: Chartevents9WhereInput;
      orderBy?: Chartevents9OrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Chartevents9ConnectionPromise;
  cptevent: (where: CpteventWhereUniqueInput) => CpteventPromise;
  cptevents: (
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Cptevent>;
  cpteventsConnection: (
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CpteventConnectionPromise;
  dCpt: (where: DCptWhereUniqueInput) => DCptPromise;
  dCpts: (
    args?: {
      where?: DCptWhereInput;
      orderBy?: DCptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DCpt>;
  dCptsConnection: (
    args?: {
      where?: DCptWhereInput;
      orderBy?: DCptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DCptConnectionPromise;
  dIcdDiagnosis: (where: DIcdDiagnosisWhereUniqueInput) => DIcdDiagnosisPromise;
  dIcdDiagnoses: (
    args?: {
      where?: DIcdDiagnosisWhereInput;
      orderBy?: DIcdDiagnosisOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DIcdDiagnosis>;
  dIcdDiagnosesConnection: (
    args?: {
      where?: DIcdDiagnosisWhereInput;
      orderBy?: DIcdDiagnosisOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DIcdDiagnosisConnectionPromise;
  dIcdProcedure: (where: DIcdProcedureWhereUniqueInput) => DIcdProcedurePromise;
  dIcdProcedures: (
    args?: {
      where?: DIcdProcedureWhereInput;
      orderBy?: DIcdProcedureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DIcdProcedure>;
  dIcdProceduresConnection: (
    args?: {
      where?: DIcdProcedureWhereInput;
      orderBy?: DIcdProcedureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DIcdProcedureConnectionPromise;
  dItem: (where: DItemWhereUniqueInput) => DItemPromise;
  dItems: (
    args?: {
      where?: DItemWhereInput;
      orderBy?: DItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DItem>;
  dItemsConnection: (
    args?: {
      where?: DItemWhereInput;
      orderBy?: DItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DItemConnectionPromise;
  dLabitem: (where: DLabitemWhereUniqueInput) => DLabitemPromise;
  dLabitems: (
    args?: {
      where?: DLabitemWhereInput;
      orderBy?: DLabitemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DLabitem>;
  dLabitemsConnection: (
    args?: {
      where?: DLabitemWhereInput;
      orderBy?: DLabitemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DLabitemConnectionPromise;
  datetimeevent: (where: DatetimeeventWhereUniqueInput) => DatetimeeventPromise;
  datetimeevents: (
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Datetimeevent>;
  datetimeeventsConnection: (
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DatetimeeventConnectionPromise;
  diagnosesIcd: (where: DiagnosesIcdWhereUniqueInput) => DiagnosesIcdPromise;
  diagnosesIcds: (
    args?: {
      where?: DiagnosesIcdWhereInput;
      orderBy?: DiagnosesIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DiagnosesIcd>;
  diagnosesIcdsConnection: (
    args?: {
      where?: DiagnosesIcdWhereInput;
      orderBy?: DiagnosesIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DiagnosesIcdConnectionPromise;
  drgcode: (where: DrgcodeWhereUniqueInput) => DrgcodePromise;
  drgcodes: (
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Drgcode>;
  drgcodesConnection: (
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DrgcodeConnectionPromise;
  icustay: (where: IcustayWhereUniqueInput) => IcustayPromise;
  icustays: (
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Icustay>;
  icustaysConnection: (
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IcustayConnectionPromise;
  inputeventsCv: (where: InputeventsCvWhereUniqueInput) => InputeventsCvPromise;
  inputeventsCvs: (
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<InputeventsCv>;
  inputeventsCvsConnection: (
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InputeventsCvConnectionPromise;
  inputeventsMv: (where: InputeventsMvWhereUniqueInput) => InputeventsMvPromise;
  inputeventsMvs: (
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<InputeventsMv>;
  inputeventsMvsConnection: (
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InputeventsMvConnectionPromise;
  labevent: (where: LabeventWhereUniqueInput) => LabeventPromise;
  labevents: (
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Labevent>;
  labeventsConnection: (
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LabeventConnectionPromise;
  microbiologyevent: (
    where: MicrobiologyeventWhereUniqueInput
  ) => MicrobiologyeventPromise;
  microbiologyevents: (
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Microbiologyevent>;
  microbiologyeventsConnection: (
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MicrobiologyeventConnectionPromise;
  noteevent: (where: NoteeventWhereUniqueInput) => NoteeventPromise;
  noteevents: (
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Noteevent>;
  noteeventsConnection: (
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NoteeventConnectionPromise;
  outputevent: (where: OutputeventWhereUniqueInput) => OutputeventPromise;
  outputevents: (
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Outputevent>;
  outputeventsConnection: (
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OutputeventConnectionPromise;
  patient: (where: PatientWhereUniqueInput) => PatientPromise;
  patients: (
    args?: {
      where?: PatientWhereInput;
      orderBy?: PatientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Patient>;
  patientsConnection: (
    args?: {
      where?: PatientWhereInput;
      orderBy?: PatientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PatientConnectionPromise;
  prescription: (where: PrescriptionWhereUniqueInput) => PrescriptionPromise;
  prescriptions: (
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Prescription>;
  prescriptionsConnection: (
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PrescriptionConnectionPromise;
  procedureeventsMv: (
    where: ProcedureeventsMvWhereUniqueInput
  ) => ProcedureeventsMvPromise;
  procedureeventsMvs: (
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProcedureeventsMv>;
  procedureeventsMvsConnection: (
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProcedureeventsMvConnectionPromise;
  proceduresIcd: (where: ProceduresIcdWhereUniqueInput) => ProceduresIcdPromise;
  proceduresIcds: (
    args?: {
      where?: ProceduresIcdWhereInput;
      orderBy?: ProceduresIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProceduresIcd>;
  proceduresIcdsConnection: (
    args?: {
      where?: ProceduresIcdWhereInput;
      orderBy?: ProceduresIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProceduresIcdConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServicePromise;
  services: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Service>;
  servicesConnection: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceConnectionPromise;
  transfer: (where: TransferWhereUniqueInput) => TransferPromise;
  transfers: (
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Transfer>;
  transfersConnection: (
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TransferConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdmission: (data: AdmissionCreateInput) => AdmissionPromise;
  updateAdmission: (
    args: { data: AdmissionUpdateInput; where: AdmissionWhereUniqueInput }
  ) => AdmissionPromise;
  updateManyAdmissions: (
    args: {
      data: AdmissionUpdateManyMutationInput;
      where?: AdmissionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAdmission: (
    args: {
      where: AdmissionWhereUniqueInput;
      create: AdmissionCreateInput;
      update: AdmissionUpdateInput;
    }
  ) => AdmissionPromise;
  deleteAdmission: (where: AdmissionWhereUniqueInput) => AdmissionPromise;
  deleteManyAdmissions: (where?: AdmissionWhereInput) => BatchPayloadPromise;
  createCallout: (data: CalloutCreateInput) => CalloutPromise;
  updateCallout: (
    args: { data: CalloutUpdateInput; where: CalloutWhereUniqueInput }
  ) => CalloutPromise;
  updateManyCallouts: (
    args: { data: CalloutUpdateManyMutationInput; where?: CalloutWhereInput }
  ) => BatchPayloadPromise;
  upsertCallout: (
    args: {
      where: CalloutWhereUniqueInput;
      create: CalloutCreateInput;
      update: CalloutUpdateInput;
    }
  ) => CalloutPromise;
  deleteCallout: (where: CalloutWhereUniqueInput) => CalloutPromise;
  deleteManyCallouts: (where?: CalloutWhereInput) => BatchPayloadPromise;
  createCaregiver: (data: CaregiverCreateInput) => CaregiverPromise;
  updateCaregiver: (
    args: { data: CaregiverUpdateInput; where: CaregiverWhereUniqueInput }
  ) => CaregiverPromise;
  updateManyCaregivers: (
    args: {
      data: CaregiverUpdateManyMutationInput;
      where?: CaregiverWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCaregiver: (
    args: {
      where: CaregiverWhereUniqueInput;
      create: CaregiverCreateInput;
      update: CaregiverUpdateInput;
    }
  ) => CaregiverPromise;
  deleteCaregiver: (where: CaregiverWhereUniqueInput) => CaregiverPromise;
  deleteManyCaregivers: (where?: CaregiverWhereInput) => BatchPayloadPromise;
  createChartevent: (data: CharteventCreateInput) => CharteventPromise;
  updateChartevent: (
    args: { data: CharteventUpdateInput; where: CharteventWhereUniqueInput }
  ) => CharteventPromise;
  updateManyChartevents: (
    args: {
      data: CharteventUpdateManyMutationInput;
      where?: CharteventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertChartevent: (
    args: {
      where: CharteventWhereUniqueInput;
      create: CharteventCreateInput;
      update: CharteventUpdateInput;
    }
  ) => CharteventPromise;
  deleteChartevent: (where: CharteventWhereUniqueInput) => CharteventPromise;
  deleteManyChartevents: (where?: CharteventWhereInput) => BatchPayloadPromise;
  createChartevents1: (data: Chartevents1CreateInput) => Chartevents1Promise;
  updateManyChartevents1s: (
    args: {
      data: Chartevents1UpdateManyMutationInput;
      where?: Chartevents1WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents1s: (
    where?: Chartevents1WhereInput
  ) => BatchPayloadPromise;
  createChartevents10: (data: Chartevents10CreateInput) => Chartevents10Promise;
  updateManyChartevents10s: (
    args: {
      data: Chartevents10UpdateManyMutationInput;
      where?: Chartevents10WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents10s: (
    where?: Chartevents10WhereInput
  ) => BatchPayloadPromise;
  createChartevents11: (data: Chartevents11CreateInput) => Chartevents11Promise;
  updateManyChartevents11s: (
    args: {
      data: Chartevents11UpdateManyMutationInput;
      where?: Chartevents11WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents11s: (
    where?: Chartevents11WhereInput
  ) => BatchPayloadPromise;
  createChartevents12: (data: Chartevents12CreateInput) => Chartevents12Promise;
  updateManyChartevents12s: (
    args: {
      data: Chartevents12UpdateManyMutationInput;
      where?: Chartevents12WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents12s: (
    where?: Chartevents12WhereInput
  ) => BatchPayloadPromise;
  createChartevents13: (data: Chartevents13CreateInput) => Chartevents13Promise;
  updateManyChartevents13s: (
    args: {
      data: Chartevents13UpdateManyMutationInput;
      where?: Chartevents13WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents13s: (
    where?: Chartevents13WhereInput
  ) => BatchPayloadPromise;
  createChartevents14: (data: Chartevents14CreateInput) => Chartevents14Promise;
  updateManyChartevents14s: (
    args: {
      data: Chartevents14UpdateManyMutationInput;
      where?: Chartevents14WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents14s: (
    where?: Chartevents14WhereInput
  ) => BatchPayloadPromise;
  createChartevents15: (data: Chartevents15CreateInput) => Chartevents15Promise;
  updateManyChartevents15s: (
    args: {
      data: Chartevents15UpdateManyMutationInput;
      where?: Chartevents15WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents15s: (
    where?: Chartevents15WhereInput
  ) => BatchPayloadPromise;
  createChartevents16: (data: Chartevents16CreateInput) => Chartevents16Promise;
  updateManyChartevents16s: (
    args: {
      data: Chartevents16UpdateManyMutationInput;
      where?: Chartevents16WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents16s: (
    where?: Chartevents16WhereInput
  ) => BatchPayloadPromise;
  createChartevents17: (data: Chartevents17CreateInput) => Chartevents17Promise;
  updateManyChartevents17s: (
    args: {
      data: Chartevents17UpdateManyMutationInput;
      where?: Chartevents17WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents17s: (
    where?: Chartevents17WhereInput
  ) => BatchPayloadPromise;
  createChartevents2: (data: Chartevents2CreateInput) => Chartevents2Promise;
  updateManyChartevents2s: (
    args: {
      data: Chartevents2UpdateManyMutationInput;
      where?: Chartevents2WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents2s: (
    where?: Chartevents2WhereInput
  ) => BatchPayloadPromise;
  createChartevents3: (data: Chartevents3CreateInput) => Chartevents3Promise;
  updateManyChartevents3s: (
    args: {
      data: Chartevents3UpdateManyMutationInput;
      where?: Chartevents3WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents3s: (
    where?: Chartevents3WhereInput
  ) => BatchPayloadPromise;
  createChartevents4: (data: Chartevents4CreateInput) => Chartevents4Promise;
  updateManyChartevents4s: (
    args: {
      data: Chartevents4UpdateManyMutationInput;
      where?: Chartevents4WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents4s: (
    where?: Chartevents4WhereInput
  ) => BatchPayloadPromise;
  createChartevents5: (data: Chartevents5CreateInput) => Chartevents5Promise;
  updateManyChartevents5s: (
    args: {
      data: Chartevents5UpdateManyMutationInput;
      where?: Chartevents5WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents5s: (
    where?: Chartevents5WhereInput
  ) => BatchPayloadPromise;
  createChartevents6: (data: Chartevents6CreateInput) => Chartevents6Promise;
  updateManyChartevents6s: (
    args: {
      data: Chartevents6UpdateManyMutationInput;
      where?: Chartevents6WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents6s: (
    where?: Chartevents6WhereInput
  ) => BatchPayloadPromise;
  createChartevents7: (data: Chartevents7CreateInput) => Chartevents7Promise;
  updateManyChartevents7s: (
    args: {
      data: Chartevents7UpdateManyMutationInput;
      where?: Chartevents7WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents7s: (
    where?: Chartevents7WhereInput
  ) => BatchPayloadPromise;
  createChartevents8: (data: Chartevents8CreateInput) => Chartevents8Promise;
  updateManyChartevents8s: (
    args: {
      data: Chartevents8UpdateManyMutationInput;
      where?: Chartevents8WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents8s: (
    where?: Chartevents8WhereInput
  ) => BatchPayloadPromise;
  createChartevents9: (data: Chartevents9CreateInput) => Chartevents9Promise;
  updateManyChartevents9s: (
    args: {
      data: Chartevents9UpdateManyMutationInput;
      where?: Chartevents9WhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyChartevents9s: (
    where?: Chartevents9WhereInput
  ) => BatchPayloadPromise;
  createCptevent: (data: CpteventCreateInput) => CpteventPromise;
  updateCptevent: (
    args: { data: CpteventUpdateInput; where: CpteventWhereUniqueInput }
  ) => CpteventPromise;
  updateManyCptevents: (
    args: { data: CpteventUpdateManyMutationInput; where?: CpteventWhereInput }
  ) => BatchPayloadPromise;
  upsertCptevent: (
    args: {
      where: CpteventWhereUniqueInput;
      create: CpteventCreateInput;
      update: CpteventUpdateInput;
    }
  ) => CpteventPromise;
  deleteCptevent: (where: CpteventWhereUniqueInput) => CpteventPromise;
  deleteManyCptevents: (where?: CpteventWhereInput) => BatchPayloadPromise;
  createDCpt: (data: DCptCreateInput) => DCptPromise;
  updateDCpt: (
    args: { data: DCptUpdateInput; where: DCptWhereUniqueInput }
  ) => DCptPromise;
  updateManyDCpts: (
    args: { data: DCptUpdateManyMutationInput; where?: DCptWhereInput }
  ) => BatchPayloadPromise;
  upsertDCpt: (
    args: {
      where: DCptWhereUniqueInput;
      create: DCptCreateInput;
      update: DCptUpdateInput;
    }
  ) => DCptPromise;
  deleteDCpt: (where: DCptWhereUniqueInput) => DCptPromise;
  deleteManyDCpts: (where?: DCptWhereInput) => BatchPayloadPromise;
  createDIcdDiagnosis: (data: DIcdDiagnosisCreateInput) => DIcdDiagnosisPromise;
  updateDIcdDiagnosis: (
    args: {
      data: DIcdDiagnosisUpdateInput;
      where: DIcdDiagnosisWhereUniqueInput;
    }
  ) => DIcdDiagnosisPromise;
  updateManyDIcdDiagnoses: (
    args: {
      data: DIcdDiagnosisUpdateManyMutationInput;
      where?: DIcdDiagnosisWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDIcdDiagnosis: (
    args: {
      where: DIcdDiagnosisWhereUniqueInput;
      create: DIcdDiagnosisCreateInput;
      update: DIcdDiagnosisUpdateInput;
    }
  ) => DIcdDiagnosisPromise;
  deleteDIcdDiagnosis: (
    where: DIcdDiagnosisWhereUniqueInput
  ) => DIcdDiagnosisPromise;
  deleteManyDIcdDiagnoses: (
    where?: DIcdDiagnosisWhereInput
  ) => BatchPayloadPromise;
  createDIcdProcedure: (data: DIcdProcedureCreateInput) => DIcdProcedurePromise;
  updateDIcdProcedure: (
    args: {
      data: DIcdProcedureUpdateInput;
      where: DIcdProcedureWhereUniqueInput;
    }
  ) => DIcdProcedurePromise;
  updateManyDIcdProcedures: (
    args: {
      data: DIcdProcedureUpdateManyMutationInput;
      where?: DIcdProcedureWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDIcdProcedure: (
    args: {
      where: DIcdProcedureWhereUniqueInput;
      create: DIcdProcedureCreateInput;
      update: DIcdProcedureUpdateInput;
    }
  ) => DIcdProcedurePromise;
  deleteDIcdProcedure: (
    where: DIcdProcedureWhereUniqueInput
  ) => DIcdProcedurePromise;
  deleteManyDIcdProcedures: (
    where?: DIcdProcedureWhereInput
  ) => BatchPayloadPromise;
  createDItem: (data: DItemCreateInput) => DItemPromise;
  updateDItem: (
    args: { data: DItemUpdateInput; where: DItemWhereUniqueInput }
  ) => DItemPromise;
  updateManyDItems: (
    args: { data: DItemUpdateManyMutationInput; where?: DItemWhereInput }
  ) => BatchPayloadPromise;
  upsertDItem: (
    args: {
      where: DItemWhereUniqueInput;
      create: DItemCreateInput;
      update: DItemUpdateInput;
    }
  ) => DItemPromise;
  deleteDItem: (where: DItemWhereUniqueInput) => DItemPromise;
  deleteManyDItems: (where?: DItemWhereInput) => BatchPayloadPromise;
  createDLabitem: (data: DLabitemCreateInput) => DLabitemPromise;
  updateDLabitem: (
    args: { data: DLabitemUpdateInput; where: DLabitemWhereUniqueInput }
  ) => DLabitemPromise;
  updateManyDLabitems: (
    args: { data: DLabitemUpdateManyMutationInput; where?: DLabitemWhereInput }
  ) => BatchPayloadPromise;
  upsertDLabitem: (
    args: {
      where: DLabitemWhereUniqueInput;
      create: DLabitemCreateInput;
      update: DLabitemUpdateInput;
    }
  ) => DLabitemPromise;
  deleteDLabitem: (where: DLabitemWhereUniqueInput) => DLabitemPromise;
  deleteManyDLabitems: (where?: DLabitemWhereInput) => BatchPayloadPromise;
  createDatetimeevent: (data: DatetimeeventCreateInput) => DatetimeeventPromise;
  updateDatetimeevent: (
    args: {
      data: DatetimeeventUpdateInput;
      where: DatetimeeventWhereUniqueInput;
    }
  ) => DatetimeeventPromise;
  updateManyDatetimeevents: (
    args: {
      data: DatetimeeventUpdateManyMutationInput;
      where?: DatetimeeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDatetimeevent: (
    args: {
      where: DatetimeeventWhereUniqueInput;
      create: DatetimeeventCreateInput;
      update: DatetimeeventUpdateInput;
    }
  ) => DatetimeeventPromise;
  deleteDatetimeevent: (
    where: DatetimeeventWhereUniqueInput
  ) => DatetimeeventPromise;
  deleteManyDatetimeevents: (
    where?: DatetimeeventWhereInput
  ) => BatchPayloadPromise;
  createDiagnosesIcd: (data: DiagnosesIcdCreateInput) => DiagnosesIcdPromise;
  updateDiagnosesIcd: (
    args: { data: DiagnosesIcdUpdateInput; where: DiagnosesIcdWhereUniqueInput }
  ) => DiagnosesIcdPromise;
  updateManyDiagnosesIcds: (
    args: {
      data: DiagnosesIcdUpdateManyMutationInput;
      where?: DiagnosesIcdWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDiagnosesIcd: (
    args: {
      where: DiagnosesIcdWhereUniqueInput;
      create: DiagnosesIcdCreateInput;
      update: DiagnosesIcdUpdateInput;
    }
  ) => DiagnosesIcdPromise;
  deleteDiagnosesIcd: (
    where: DiagnosesIcdWhereUniqueInput
  ) => DiagnosesIcdPromise;
  deleteManyDiagnosesIcds: (
    where?: DiagnosesIcdWhereInput
  ) => BatchPayloadPromise;
  createDrgcode: (data: DrgcodeCreateInput) => DrgcodePromise;
  updateDrgcode: (
    args: { data: DrgcodeUpdateInput; where: DrgcodeWhereUniqueInput }
  ) => DrgcodePromise;
  updateManyDrgcodes: (
    args: { data: DrgcodeUpdateManyMutationInput; where?: DrgcodeWhereInput }
  ) => BatchPayloadPromise;
  upsertDrgcode: (
    args: {
      where: DrgcodeWhereUniqueInput;
      create: DrgcodeCreateInput;
      update: DrgcodeUpdateInput;
    }
  ) => DrgcodePromise;
  deleteDrgcode: (where: DrgcodeWhereUniqueInput) => DrgcodePromise;
  deleteManyDrgcodes: (where?: DrgcodeWhereInput) => BatchPayloadPromise;
  createIcustay: (data: IcustayCreateInput) => IcustayPromise;
  updateIcustay: (
    args: { data: IcustayUpdateInput; where: IcustayWhereUniqueInput }
  ) => IcustayPromise;
  updateManyIcustays: (
    args: { data: IcustayUpdateManyMutationInput; where?: IcustayWhereInput }
  ) => BatchPayloadPromise;
  upsertIcustay: (
    args: {
      where: IcustayWhereUniqueInput;
      create: IcustayCreateInput;
      update: IcustayUpdateInput;
    }
  ) => IcustayPromise;
  deleteIcustay: (where: IcustayWhereUniqueInput) => IcustayPromise;
  deleteManyIcustays: (where?: IcustayWhereInput) => BatchPayloadPromise;
  createInputeventsCv: (data: InputeventsCvCreateInput) => InputeventsCvPromise;
  updateInputeventsCv: (
    args: {
      data: InputeventsCvUpdateInput;
      where: InputeventsCvWhereUniqueInput;
    }
  ) => InputeventsCvPromise;
  updateManyInputeventsCvs: (
    args: {
      data: InputeventsCvUpdateManyMutationInput;
      where?: InputeventsCvWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInputeventsCv: (
    args: {
      where: InputeventsCvWhereUniqueInput;
      create: InputeventsCvCreateInput;
      update: InputeventsCvUpdateInput;
    }
  ) => InputeventsCvPromise;
  deleteInputeventsCv: (
    where: InputeventsCvWhereUniqueInput
  ) => InputeventsCvPromise;
  deleteManyInputeventsCvs: (
    where?: InputeventsCvWhereInput
  ) => BatchPayloadPromise;
  createInputeventsMv: (data: InputeventsMvCreateInput) => InputeventsMvPromise;
  updateInputeventsMv: (
    args: {
      data: InputeventsMvUpdateInput;
      where: InputeventsMvWhereUniqueInput;
    }
  ) => InputeventsMvPromise;
  updateManyInputeventsMvs: (
    args: {
      data: InputeventsMvUpdateManyMutationInput;
      where?: InputeventsMvWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInputeventsMv: (
    args: {
      where: InputeventsMvWhereUniqueInput;
      create: InputeventsMvCreateInput;
      update: InputeventsMvUpdateInput;
    }
  ) => InputeventsMvPromise;
  deleteInputeventsMv: (
    where: InputeventsMvWhereUniqueInput
  ) => InputeventsMvPromise;
  deleteManyInputeventsMvs: (
    where?: InputeventsMvWhereInput
  ) => BatchPayloadPromise;
  createLabevent: (data: LabeventCreateInput) => LabeventPromise;
  updateLabevent: (
    args: { data: LabeventUpdateInput; where: LabeventWhereUniqueInput }
  ) => LabeventPromise;
  updateManyLabevents: (
    args: { data: LabeventUpdateManyMutationInput; where?: LabeventWhereInput }
  ) => BatchPayloadPromise;
  upsertLabevent: (
    args: {
      where: LabeventWhereUniqueInput;
      create: LabeventCreateInput;
      update: LabeventUpdateInput;
    }
  ) => LabeventPromise;
  deleteLabevent: (where: LabeventWhereUniqueInput) => LabeventPromise;
  deleteManyLabevents: (where?: LabeventWhereInput) => BatchPayloadPromise;
  createMicrobiologyevent: (
    data: MicrobiologyeventCreateInput
  ) => MicrobiologyeventPromise;
  updateMicrobiologyevent: (
    args: {
      data: MicrobiologyeventUpdateInput;
      where: MicrobiologyeventWhereUniqueInput;
    }
  ) => MicrobiologyeventPromise;
  updateManyMicrobiologyevents: (
    args: {
      data: MicrobiologyeventUpdateManyMutationInput;
      where?: MicrobiologyeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMicrobiologyevent: (
    args: {
      where: MicrobiologyeventWhereUniqueInput;
      create: MicrobiologyeventCreateInput;
      update: MicrobiologyeventUpdateInput;
    }
  ) => MicrobiologyeventPromise;
  deleteMicrobiologyevent: (
    where: MicrobiologyeventWhereUniqueInput
  ) => MicrobiologyeventPromise;
  deleteManyMicrobiologyevents: (
    where?: MicrobiologyeventWhereInput
  ) => BatchPayloadPromise;
  createNoteevent: (data: NoteeventCreateInput) => NoteeventPromise;
  updateNoteevent: (
    args: { data: NoteeventUpdateInput; where: NoteeventWhereUniqueInput }
  ) => NoteeventPromise;
  updateManyNoteevents: (
    args: {
      data: NoteeventUpdateManyMutationInput;
      where?: NoteeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNoteevent: (
    args: {
      where: NoteeventWhereUniqueInput;
      create: NoteeventCreateInput;
      update: NoteeventUpdateInput;
    }
  ) => NoteeventPromise;
  deleteNoteevent: (where: NoteeventWhereUniqueInput) => NoteeventPromise;
  deleteManyNoteevents: (where?: NoteeventWhereInput) => BatchPayloadPromise;
  createOutputevent: (data: OutputeventCreateInput) => OutputeventPromise;
  updateOutputevent: (
    args: { data: OutputeventUpdateInput; where: OutputeventWhereUniqueInput }
  ) => OutputeventPromise;
  updateManyOutputevents: (
    args: {
      data: OutputeventUpdateManyMutationInput;
      where?: OutputeventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOutputevent: (
    args: {
      where: OutputeventWhereUniqueInput;
      create: OutputeventCreateInput;
      update: OutputeventUpdateInput;
    }
  ) => OutputeventPromise;
  deleteOutputevent: (where: OutputeventWhereUniqueInput) => OutputeventPromise;
  deleteManyOutputevents: (
    where?: OutputeventWhereInput
  ) => BatchPayloadPromise;
  createPatient: (data: PatientCreateInput) => PatientPromise;
  updatePatient: (
    args: { data: PatientUpdateInput; where: PatientWhereUniqueInput }
  ) => PatientPromise;
  updateManyPatients: (
    args: { data: PatientUpdateManyMutationInput; where?: PatientWhereInput }
  ) => BatchPayloadPromise;
  upsertPatient: (
    args: {
      where: PatientWhereUniqueInput;
      create: PatientCreateInput;
      update: PatientUpdateInput;
    }
  ) => PatientPromise;
  deletePatient: (where: PatientWhereUniqueInput) => PatientPromise;
  deleteManyPatients: (where?: PatientWhereInput) => BatchPayloadPromise;
  createPrescription: (data: PrescriptionCreateInput) => PrescriptionPromise;
  updatePrescription: (
    args: { data: PrescriptionUpdateInput; where: PrescriptionWhereUniqueInput }
  ) => PrescriptionPromise;
  updateManyPrescriptions: (
    args: {
      data: PrescriptionUpdateManyMutationInput;
      where?: PrescriptionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPrescription: (
    args: {
      where: PrescriptionWhereUniqueInput;
      create: PrescriptionCreateInput;
      update: PrescriptionUpdateInput;
    }
  ) => PrescriptionPromise;
  deletePrescription: (
    where: PrescriptionWhereUniqueInput
  ) => PrescriptionPromise;
  deleteManyPrescriptions: (
    where?: PrescriptionWhereInput
  ) => BatchPayloadPromise;
  createProcedureeventsMv: (
    data: ProcedureeventsMvCreateInput
  ) => ProcedureeventsMvPromise;
  updateProcedureeventsMv: (
    args: {
      data: ProcedureeventsMvUpdateInput;
      where: ProcedureeventsMvWhereUniqueInput;
    }
  ) => ProcedureeventsMvPromise;
  updateManyProcedureeventsMvs: (
    args: {
      data: ProcedureeventsMvUpdateManyMutationInput;
      where?: ProcedureeventsMvWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProcedureeventsMv: (
    args: {
      where: ProcedureeventsMvWhereUniqueInput;
      create: ProcedureeventsMvCreateInput;
      update: ProcedureeventsMvUpdateInput;
    }
  ) => ProcedureeventsMvPromise;
  deleteProcedureeventsMv: (
    where: ProcedureeventsMvWhereUniqueInput
  ) => ProcedureeventsMvPromise;
  deleteManyProcedureeventsMvs: (
    where?: ProcedureeventsMvWhereInput
  ) => BatchPayloadPromise;
  createProceduresIcd: (data: ProceduresIcdCreateInput) => ProceduresIcdPromise;
  updateProceduresIcd: (
    args: {
      data: ProceduresIcdUpdateInput;
      where: ProceduresIcdWhereUniqueInput;
    }
  ) => ProceduresIcdPromise;
  updateManyProceduresIcds: (
    args: {
      data: ProceduresIcdUpdateManyMutationInput;
      where?: ProceduresIcdWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProceduresIcd: (
    args: {
      where: ProceduresIcdWhereUniqueInput;
      create: ProceduresIcdCreateInput;
      update: ProceduresIcdUpdateInput;
    }
  ) => ProceduresIcdPromise;
  deleteProceduresIcd: (
    where: ProceduresIcdWhereUniqueInput
  ) => ProceduresIcdPromise;
  deleteManyProceduresIcds: (
    where?: ProceduresIcdWhereInput
  ) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (
    args: { data: ServiceUpdateInput; where: ServiceWhereUniqueInput }
  ) => ServicePromise;
  updateManyServices: (
    args: { data: ServiceUpdateManyMutationInput; where?: ServiceWhereInput }
  ) => BatchPayloadPromise;
  upsertService: (
    args: {
      where: ServiceWhereUniqueInput;
      create: ServiceCreateInput;
      update: ServiceUpdateInput;
    }
  ) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createTransfer: (data: TransferCreateInput) => TransferPromise;
  updateTransfer: (
    args: { data: TransferUpdateInput; where: TransferWhereUniqueInput }
  ) => TransferPromise;
  updateManyTransfers: (
    args: { data: TransferUpdateManyMutationInput; where?: TransferWhereInput }
  ) => BatchPayloadPromise;
  upsertTransfer: (
    args: {
      where: TransferWhereUniqueInput;
      create: TransferCreateInput;
      update: TransferUpdateInput;
    }
  ) => TransferPromise;
  deleteTransfer: (where: TransferWhereUniqueInput) => TransferPromise;
  deleteManyTransfers: (where?: TransferWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  admission: (
    where?: AdmissionSubscriptionWhereInput
  ) => AdmissionSubscriptionPayloadSubscription;
  callout: (
    where?: CalloutSubscriptionWhereInput
  ) => CalloutSubscriptionPayloadSubscription;
  caregiver: (
    where?: CaregiverSubscriptionWhereInput
  ) => CaregiverSubscriptionPayloadSubscription;
  chartevent: (
    where?: CharteventSubscriptionWhereInput
  ) => CharteventSubscriptionPayloadSubscription;
  chartevents1: (
    where?: Chartevents1SubscriptionWhereInput
  ) => Chartevents1SubscriptionPayloadSubscription;
  chartevents10: (
    where?: Chartevents10SubscriptionWhereInput
  ) => Chartevents10SubscriptionPayloadSubscription;
  chartevents11: (
    where?: Chartevents11SubscriptionWhereInput
  ) => Chartevents11SubscriptionPayloadSubscription;
  chartevents12: (
    where?: Chartevents12SubscriptionWhereInput
  ) => Chartevents12SubscriptionPayloadSubscription;
  chartevents13: (
    where?: Chartevents13SubscriptionWhereInput
  ) => Chartevents13SubscriptionPayloadSubscription;
  chartevents14: (
    where?: Chartevents14SubscriptionWhereInput
  ) => Chartevents14SubscriptionPayloadSubscription;
  chartevents15: (
    where?: Chartevents15SubscriptionWhereInput
  ) => Chartevents15SubscriptionPayloadSubscription;
  chartevents16: (
    where?: Chartevents16SubscriptionWhereInput
  ) => Chartevents16SubscriptionPayloadSubscription;
  chartevents17: (
    where?: Chartevents17SubscriptionWhereInput
  ) => Chartevents17SubscriptionPayloadSubscription;
  chartevents2: (
    where?: Chartevents2SubscriptionWhereInput
  ) => Chartevents2SubscriptionPayloadSubscription;
  chartevents3: (
    where?: Chartevents3SubscriptionWhereInput
  ) => Chartevents3SubscriptionPayloadSubscription;
  chartevents4: (
    where?: Chartevents4SubscriptionWhereInput
  ) => Chartevents4SubscriptionPayloadSubscription;
  chartevents5: (
    where?: Chartevents5SubscriptionWhereInput
  ) => Chartevents5SubscriptionPayloadSubscription;
  chartevents6: (
    where?: Chartevents6SubscriptionWhereInput
  ) => Chartevents6SubscriptionPayloadSubscription;
  chartevents7: (
    where?: Chartevents7SubscriptionWhereInput
  ) => Chartevents7SubscriptionPayloadSubscription;
  chartevents8: (
    where?: Chartevents8SubscriptionWhereInput
  ) => Chartevents8SubscriptionPayloadSubscription;
  chartevents9: (
    where?: Chartevents9SubscriptionWhereInput
  ) => Chartevents9SubscriptionPayloadSubscription;
  cptevent: (
    where?: CpteventSubscriptionWhereInput
  ) => CpteventSubscriptionPayloadSubscription;
  dCpt: (
    where?: DCptSubscriptionWhereInput
  ) => DCptSubscriptionPayloadSubscription;
  dIcdDiagnosis: (
    where?: DIcdDiagnosisSubscriptionWhereInput
  ) => DIcdDiagnosisSubscriptionPayloadSubscription;
  dIcdProcedure: (
    where?: DIcdProcedureSubscriptionWhereInput
  ) => DIcdProcedureSubscriptionPayloadSubscription;
  dItem: (
    where?: DItemSubscriptionWhereInput
  ) => DItemSubscriptionPayloadSubscription;
  dLabitem: (
    where?: DLabitemSubscriptionWhereInput
  ) => DLabitemSubscriptionPayloadSubscription;
  datetimeevent: (
    where?: DatetimeeventSubscriptionWhereInput
  ) => DatetimeeventSubscriptionPayloadSubscription;
  diagnosesIcd: (
    where?: DiagnosesIcdSubscriptionWhereInput
  ) => DiagnosesIcdSubscriptionPayloadSubscription;
  drgcode: (
    where?: DrgcodeSubscriptionWhereInput
  ) => DrgcodeSubscriptionPayloadSubscription;
  icustay: (
    where?: IcustaySubscriptionWhereInput
  ) => IcustaySubscriptionPayloadSubscription;
  inputeventsCv: (
    where?: InputeventsCvSubscriptionWhereInput
  ) => InputeventsCvSubscriptionPayloadSubscription;
  inputeventsMv: (
    where?: InputeventsMvSubscriptionWhereInput
  ) => InputeventsMvSubscriptionPayloadSubscription;
  labevent: (
    where?: LabeventSubscriptionWhereInput
  ) => LabeventSubscriptionPayloadSubscription;
  microbiologyevent: (
    where?: MicrobiologyeventSubscriptionWhereInput
  ) => MicrobiologyeventSubscriptionPayloadSubscription;
  noteevent: (
    where?: NoteeventSubscriptionWhereInput
  ) => NoteeventSubscriptionPayloadSubscription;
  outputevent: (
    where?: OutputeventSubscriptionWhereInput
  ) => OutputeventSubscriptionPayloadSubscription;
  patient: (
    where?: PatientSubscriptionWhereInput
  ) => PatientSubscriptionPayloadSubscription;
  prescription: (
    where?: PrescriptionSubscriptionWhereInput
  ) => PrescriptionSubscriptionPayloadSubscription;
  procedureeventsMv: (
    where?: ProcedureeventsMvSubscriptionWhereInput
  ) => ProcedureeventsMvSubscriptionPayloadSubscription;
  proceduresIcd: (
    where?: ProceduresIcdSubscriptionWhereInput
  ) => ProceduresIcdSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  transfer: (
    where?: TransferSubscriptionWhereInput
  ) => TransferSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DrgcodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "drg_code_ASC"
  | "drg_code_DESC"
  | "drg_mortality_ASC"
  | "drg_mortality_DESC"
  | "drg_severity_ASC"
  | "drg_severity_DESC"
  | "drg_type_ASC"
  | "drg_type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LabeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "flag_ASC"
  | "flag_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents16OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PatientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "dod_ASC"
  | "dod_DESC"
  | "dod_hosp_ASC"
  | "dod_hosp_DESC"
  | "dod_ssn_ASC"
  | "dod_ssn_DESC"
  | "expire_flag_ASC"
  | "expire_flag_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents15OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "abbreviation_ASC"
  | "abbreviation_DESC"
  | "category_ASC"
  | "category_DESC"
  | "conceptid_ASC"
  | "conceptid_DESC"
  | "dbsource_ASC"
  | "dbsource_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "label_ASC"
  | "label_DESC"
  | "linksto_ASC"
  | "linksto_DESC"
  | "param_type_ASC"
  | "param_type_DESC"
  | "unitname_ASC"
  | "unitname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents14OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CalloutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "acknowledge_status_ASC"
  | "acknowledge_status_DESC"
  | "acknowledgetime_ASC"
  | "acknowledgetime_DESC"
  | "callout_outcome_ASC"
  | "callout_outcome_DESC"
  | "callout_service_ASC"
  | "callout_service_DESC"
  | "callout_status_ASC"
  | "callout_status_DESC"
  | "callout_wardid_ASC"
  | "callout_wardid_DESC"
  | "createtime_ASC"
  | "createtime_DESC"
  | "curr_careunit_ASC"
  | "curr_careunit_DESC"
  | "curr_wardid_ASC"
  | "curr_wardid_DESC"
  | "currentreservationtime_ASC"
  | "currentreservationtime_DESC"
  | "discharge_wardid_ASC"
  | "discharge_wardid_DESC"
  | "firstreservationtime_ASC"
  | "firstreservationtime_DESC"
  | "outcometime_ASC"
  | "outcometime_DESC"
  | "request_cdiff_ASC"
  | "request_cdiff_DESC"
  | "request_mrsa_ASC"
  | "request_mrsa_DESC"
  | "request_resp_ASC"
  | "request_resp_DESC"
  | "request_tele_ASC"
  | "request_tele_DESC"
  | "request_vre_ASC"
  | "request_vre_DESC"
  | "submit_careunit_ASC"
  | "submit_careunit_DESC"
  | "submit_wardid_ASC"
  | "submit_wardid_DESC"
  | "updatetime_ASC"
  | "updatetime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents13OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DCptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "codesuffix_ASC"
  | "codesuffix_DESC"
  | "maxcodeinsubsection_ASC"
  | "maxcodeinsubsection_DESC"
  | "mincodeinsubsection_ASC"
  | "mincodeinsubsection_DESC"
  | "sectionheader_ASC"
  | "sectionheader_DESC"
  | "sectionrange_ASC"
  | "sectionrange_DESC"
  | "subsectionheader_ASC"
  | "subsectionheader_DESC"
  | "subsectionrange_ASC"
  | "subsectionrange_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents12OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CharteventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents11OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents7OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents10OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents6OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents1OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DatetimeeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IcustayOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dbsource_ASC"
  | "dbsource_DESC"
  | "first_careunit_ASC"
  | "first_careunit_DESC"
  | "first_wardid_ASC"
  | "first_wardid_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "intime_ASC"
  | "intime_DESC"
  | "last_careunit_ASC"
  | "last_careunit_DESC"
  | "last_wardid_ASC"
  | "last_wardid_DESC"
  | "los_ASC"
  | "los_DESC"
  | "outtime_ASC"
  | "outtime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents3OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CaregiverOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cgid_ASC"
  | "cgid_DESC"
  | "description_ASC"
  | "description_DESC"
  | "label_ASC"
  | "label_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents2OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InputeventsCvOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "amountuom_ASC"
  | "amountuom_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "linkorderid_ASC"
  | "linkorderid_DESC"
  | "newbottle_ASC"
  | "newbottle_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "originalamount_ASC"
  | "originalamount_DESC"
  | "originalamountuom_ASC"
  | "originalamountuom_DESC"
  | "originalrate_ASC"
  | "originalrate_DESC"
  | "originalrateuom_ASC"
  | "originalrateuom_DESC"
  | "originalroute_ASC"
  | "originalroute_DESC"
  | "originalsite_ASC"
  | "originalsite_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "rateuom_ASC"
  | "rateuom_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AdmissionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "admission_location_ASC"
  | "admission_location_DESC"
  | "admission_type_ASC"
  | "admission_type_DESC"
  | "admittime_ASC"
  | "admittime_DESC"
  | "deathtime_ASC"
  | "deathtime_DESC"
  | "diagnosis_ASC"
  | "diagnosis_DESC"
  | "discharge_location_ASC"
  | "discharge_location_DESC"
  | "dischtime_ASC"
  | "dischtime_DESC"
  | "edouttime_ASC"
  | "edouttime_DESC"
  | "edregtime_ASC"
  | "edregtime_DESC"
  | "ethnicity_ASC"
  | "ethnicity_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "has_chartevents_data_ASC"
  | "has_chartevents_data_DESC"
  | "hospital_expire_flag_ASC"
  | "hospital_expire_flag_DESC"
  | "insurance_ASC"
  | "insurance_DESC"
  | "language_ASC"
  | "language_DESC"
  | "marital_status_ASC"
  | "marital_status_DESC"
  | "religion_ASC"
  | "religion_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DIcdProcedureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "long_title_ASC"
  | "long_title_DESC"
  | "short_title_ASC"
  | "short_title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InputeventsMvOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "amountuom_ASC"
  | "amountuom_DESC"
  | "cancelreason_ASC"
  | "cancelreason_DESC"
  | "comments_canceledby_ASC"
  | "comments_canceledby_DESC"
  | "comments_date_ASC"
  | "comments_date_DESC"
  | "comments_editedby_ASC"
  | "comments_editedby_DESC"
  | "continueinnextdept_ASC"
  | "continueinnextdept_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "isopenbag_ASC"
  | "isopenbag_DESC"
  | "linkorderid_ASC"
  | "linkorderid_DESC"
  | "ordercategorydescription_ASC"
  | "ordercategorydescription_DESC"
  | "ordercategoryname_ASC"
  | "ordercategoryname_DESC"
  | "ordercomponenttypedescription_ASC"
  | "ordercomponenttypedescription_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "originalamount_ASC"
  | "originalamount_DESC"
  | "originalrate_ASC"
  | "originalrate_DESC"
  | "patientweight_ASC"
  | "patientweight_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "rateuom_ASC"
  | "rateuom_DESC"
  | "secondaryordercategoryname_ASC"
  | "secondaryordercategoryname_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "statusdescription_ASC"
  | "statusdescription_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "totalamount_ASC"
  | "totalamount_DESC"
  | "totalamountuom_ASC"
  | "totalamountuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents9OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "curr_service_ASC"
  | "curr_service_DESC"
  | "prev_service_ASC"
  | "prev_service_DESC"
  | "transfertime_ASC"
  | "transfertime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CpteventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "chartdate_ASC"
  | "chartdate_DESC"
  | "costcenter_ASC"
  | "costcenter_DESC"
  | "cpt_cd_ASC"
  | "cpt_cd_DESC"
  | "cpt_number_ASC"
  | "cpt_number_DESC"
  | "cpt_suffix_ASC"
  | "cpt_suffix_DESC"
  | "description_ASC"
  | "description_DESC"
  | "sectionheader_ASC"
  | "sectionheader_DESC"
  | "subsectionheader_ASC"
  | "subsectionheader_DESC"
  | "ticket_id_seq_ASC"
  | "ticket_id_seq_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OutputeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "iserror_ASC"
  | "iserror_DESC"
  | "newbottle_ASC"
  | "newbottle_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents4OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProceduresIcdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "seq_num_ASC"
  | "seq_num_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents17OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PrescriptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dose_unit_rx_ASC"
  | "dose_unit_rx_DESC"
  | "dose_val_rx_ASC"
  | "dose_val_rx_DESC"
  | "drug_ASC"
  | "drug_DESC"
  | "drug_name_generic_ASC"
  | "drug_name_generic_DESC"
  | "drug_name_poe_ASC"
  | "drug_name_poe_DESC"
  | "drug_type_ASC"
  | "drug_type_DESC"
  | "enddate_ASC"
  | "enddate_DESC"
  | "form_unit_disp_ASC"
  | "form_unit_disp_DESC"
  | "form_val_disp_ASC"
  | "form_val_disp_DESC"
  | "formulary_drug_cd_ASC"
  | "formulary_drug_cd_DESC"
  | "gsn_ASC"
  | "gsn_DESC"
  | "ndc_ASC"
  | "ndc_DESC"
  | "prod_strength_ASC"
  | "prod_strength_DESC"
  | "route_ASC"
  | "route_DESC"
  | "startdate_ASC"
  | "startdate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DIcdDiagnosisOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "long_title_ASC"
  | "long_title_DESC"
  | "short_title_ASC"
  | "short_title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TransferOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "curr_careunit_ASC"
  | "curr_careunit_DESC"
  | "curr_wardid_ASC"
  | "curr_wardid_DESC"
  | "dbsource_ASC"
  | "dbsource_DESC"
  | "eventtype_ASC"
  | "eventtype_DESC"
  | "intime_ASC"
  | "intime_DESC"
  | "los_ASC"
  | "los_DESC"
  | "outtime_ASC"
  | "outtime_DESC"
  | "prev_careunit_ASC"
  | "prev_careunit_DESC"
  | "prev_wardid_ASC"
  | "prev_wardid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MicrobiologyeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ab_name_ASC"
  | "ab_name_DESC"
  | "chartdate_ASC"
  | "chartdate_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "dilution_comparison_ASC"
  | "dilution_comparison_DESC"
  | "dilution_text_ASC"
  | "dilution_text_DESC"
  | "dilution_value_ASC"
  | "dilution_value_DESC"
  | "interpretation_ASC"
  | "interpretation_DESC"
  | "isolate_num_ASC"
  | "isolate_num_DESC"
  | "org_name_ASC"
  | "org_name_DESC"
  | "spec_type_desc_ASC"
  | "spec_type_desc_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProcedureeventsMvOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cancelreason_ASC"
  | "cancelreason_DESC"
  | "comments_canceledby_ASC"
  | "comments_canceledby_DESC"
  | "comments_date_ASC"
  | "comments_date_DESC"
  | "comments_editedby_ASC"
  | "comments_editedby_DESC"
  | "continueinnextdept_ASC"
  | "continueinnextdept_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "isopenbag_ASC"
  | "isopenbag_DESC"
  | "linkorderid_ASC"
  | "linkorderid_DESC"
  | "location_ASC"
  | "location_DESC"
  | "locationcategory_ASC"
  | "locationcategory_DESC"
  | "ordercategorydescription_ASC"
  | "ordercategorydescription_DESC"
  | "ordercategoryname_ASC"
  | "ordercategoryname_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "secondaryordercategoryname_ASC"
  | "secondaryordercategoryname_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "statusdescription_ASC"
  | "statusdescription_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NoteeventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "chartdate_ASC"
  | "chartdate_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "description_ASC"
  | "description_DESC"
  | "iserror_ASC"
  | "iserror_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents8OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DLabitemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "fluid_ASC"
  | "fluid_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "label_ASC"
  | "label_DESC"
  | "loinc_code_ASC"
  | "loinc_code_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DiagnosesIcdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icd9_code_ASC"
  | "icd9_code_DESC"
  | "seq_num_ASC"
  | "seq_num_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Chartevents5OrderByInput =
  | "cgid_ASC"
  | "cgid_DESC"
  | "charttime_ASC"
  | "charttime_DESC"
  | "error_ASC"
  | "error_DESC"
  | "hadm_id_ASC"
  | "hadm_id_DESC"
  | "icustay_id_ASC"
  | "icustay_id_DESC"
  | "itemid_ASC"
  | "itemid_DESC"
  | "resultstatus_ASC"
  | "resultstatus_DESC"
  | "row_id_ASC"
  | "row_id_DESC"
  | "stopped_ASC"
  | "stopped_DESC"
  | "storetime_ASC"
  | "storetime_DESC"
  | "subject_id_ASC"
  | "subject_id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "valuenum_ASC"
  | "valuenum_DESC"
  | "valueuom_ASC"
  | "valueuom_DESC"
  | "warning_ASC"
  | "warning_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CharteventUpdateManyDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export type AdmissionWhereUniqueInput = AtLeastOne<{
  id: UUID;
  hadm_id?: Int;
}>;

export interface DrgcodeUpdateWithWhereUniqueNestedInput {
  where: DrgcodeWhereUniqueInput;
  data: DrgcodeUpdateDataInput;
}

export interface LabeventWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  flag?: String;
  flag_not?: String;
  flag_in?: String[] | String;
  flag_not_in?: String[] | String;
  flag_lt?: String;
  flag_lte?: String;
  flag_gt?: String;
  flag_gte?: String;
  flag_contains?: String;
  flag_not_contains?: String;
  flag_starts_with?: String;
  flag_not_starts_with?: String;
  flag_ends_with?: String;
  flag_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: LabeventWhereInput[] | LabeventWhereInput;
  OR?: LabeventWhereInput[] | LabeventWhereInput;
  NOT?: LabeventWhereInput[] | LabeventWhereInput;
}

export interface Chartevents1UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface IcustayUpdateManyDataInput {
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outtime?: DateTimeInput;
}

export type IcustayWhereUniqueInput = AtLeastOne<{
  id: UUID;
  icustay_id?: Int;
}>;

export interface DrgcodeUpdateDataInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface Chartevents1CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceWhereInput;
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  NOT?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
}

export interface CharteventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProceduresIcdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProceduresIcdWhereInput;
  AND?:
    | ProceduresIcdSubscriptionWhereInput[]
    | ProceduresIcdSubscriptionWhereInput;
  OR?:
    | ProceduresIcdSubscriptionWhereInput[]
    | ProceduresIcdSubscriptionWhereInput;
  NOT?:
    | ProceduresIcdSubscriptionWhereInput[]
    | ProceduresIcdSubscriptionWhereInput;
}

export interface CharteventUpdateInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProceduresIcdWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: ProceduresIcdWhereInput[] | ProceduresIcdWhereInput;
  OR?: ProceduresIcdWhereInput[] | ProceduresIcdWhereInput;
  NOT?: ProceduresIcdWhereInput[] | ProceduresIcdWhereInput;
}

export type InputeventsCvWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface PatientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PatientWhereInput;
  AND?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
  OR?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
  NOT?: PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput;
}

export interface CaregiverUpdateManyMutationInput {
  cgid?: Int;
  description?: String;
  label?: String;
}

export interface OutputeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OutputeventWhereInput;
  AND?: OutputeventSubscriptionWhereInput[] | OutputeventSubscriptionWhereInput;
  OR?: OutputeventSubscriptionWhereInput[] | OutputeventSubscriptionWhereInput;
  NOT?: OutputeventSubscriptionWhereInput[] | OutputeventSubscriptionWhereInput;
}

export interface CaregiverUpdateInput {
  cgid?: Int;
  chartevents?: CharteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  description?: String;
  inputevents_cv?: InputeventsCvUpdateManyInput;
  inputevents_mv?: InputeventsMvUpdateManyInput;
  label?: String;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  procedureevents_mv?: ProcedureeventsMvUpdateManyInput;
}

export interface AdmissionWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  admission_location?: String;
  admission_location_not?: String;
  admission_location_in?: String[] | String;
  admission_location_not_in?: String[] | String;
  admission_location_lt?: String;
  admission_location_lte?: String;
  admission_location_gt?: String;
  admission_location_gte?: String;
  admission_location_contains?: String;
  admission_location_not_contains?: String;
  admission_location_starts_with?: String;
  admission_location_not_starts_with?: String;
  admission_location_ends_with?: String;
  admission_location_not_ends_with?: String;
  admission_type?: String;
  admission_type_not?: String;
  admission_type_in?: String[] | String;
  admission_type_not_in?: String[] | String;
  admission_type_lt?: String;
  admission_type_lte?: String;
  admission_type_gt?: String;
  admission_type_gte?: String;
  admission_type_contains?: String;
  admission_type_not_contains?: String;
  admission_type_starts_with?: String;
  admission_type_not_starts_with?: String;
  admission_type_ends_with?: String;
  admission_type_not_ends_with?: String;
  admittime?: DateTimeInput;
  admittime_not?: DateTimeInput;
  admittime_in?: DateTimeInput[] | DateTimeInput;
  admittime_not_in?: DateTimeInput[] | DateTimeInput;
  admittime_lt?: DateTimeInput;
  admittime_lte?: DateTimeInput;
  admittime_gt?: DateTimeInput;
  admittime_gte?: DateTimeInput;
  callout_every?: CalloutWhereInput;
  callout_some?: CalloutWhereInput;
  callout_none?: CalloutWhereInput;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  cptevents_every?: CpteventWhereInput;
  cptevents_some?: CpteventWhereInput;
  cptevents_none?: CpteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  deathtime?: DateTimeInput;
  deathtime_not?: DateTimeInput;
  deathtime_in?: DateTimeInput[] | DateTimeInput;
  deathtime_not_in?: DateTimeInput[] | DateTimeInput;
  deathtime_lt?: DateTimeInput;
  deathtime_lte?: DateTimeInput;
  deathtime_gt?: DateTimeInput;
  deathtime_gte?: DateTimeInput;
  diagnoses_icd_every?: DiagnosesIcdWhereInput;
  diagnoses_icd_some?: DiagnosesIcdWhereInput;
  diagnoses_icd_none?: DiagnosesIcdWhereInput;
  diagnosis?: String;
  diagnosis_not?: String;
  diagnosis_in?: String[] | String;
  diagnosis_not_in?: String[] | String;
  diagnosis_lt?: String;
  diagnosis_lte?: String;
  diagnosis_gt?: String;
  diagnosis_gte?: String;
  diagnosis_contains?: String;
  diagnosis_not_contains?: String;
  diagnosis_starts_with?: String;
  diagnosis_not_starts_with?: String;
  diagnosis_ends_with?: String;
  diagnosis_not_ends_with?: String;
  discharge_location?: String;
  discharge_location_not?: String;
  discharge_location_in?: String[] | String;
  discharge_location_not_in?: String[] | String;
  discharge_location_lt?: String;
  discharge_location_lte?: String;
  discharge_location_gt?: String;
  discharge_location_gte?: String;
  discharge_location_contains?: String;
  discharge_location_not_contains?: String;
  discharge_location_starts_with?: String;
  discharge_location_not_starts_with?: String;
  discharge_location_ends_with?: String;
  discharge_location_not_ends_with?: String;
  dischtime?: DateTimeInput;
  dischtime_not?: DateTimeInput;
  dischtime_in?: DateTimeInput[] | DateTimeInput;
  dischtime_not_in?: DateTimeInput[] | DateTimeInput;
  dischtime_lt?: DateTimeInput;
  dischtime_lte?: DateTimeInput;
  dischtime_gt?: DateTimeInput;
  dischtime_gte?: DateTimeInput;
  drgcodes_every?: DrgcodeWhereInput;
  drgcodes_some?: DrgcodeWhereInput;
  drgcodes_none?: DrgcodeWhereInput;
  edouttime?: DateTimeInput;
  edouttime_not?: DateTimeInput;
  edouttime_in?: DateTimeInput[] | DateTimeInput;
  edouttime_not_in?: DateTimeInput[] | DateTimeInput;
  edouttime_lt?: DateTimeInput;
  edouttime_lte?: DateTimeInput;
  edouttime_gt?: DateTimeInput;
  edouttime_gte?: DateTimeInput;
  edregtime?: DateTimeInput;
  edregtime_not?: DateTimeInput;
  edregtime_in?: DateTimeInput[] | DateTimeInput;
  edregtime_not_in?: DateTimeInput[] | DateTimeInput;
  edregtime_lt?: DateTimeInput;
  edregtime_lte?: DateTimeInput;
  edregtime_gt?: DateTimeInput;
  edregtime_gte?: DateTimeInput;
  ethnicity?: String;
  ethnicity_not?: String;
  ethnicity_in?: String[] | String;
  ethnicity_not_in?: String[] | String;
  ethnicity_lt?: String;
  ethnicity_lte?: String;
  ethnicity_gt?: String;
  ethnicity_gte?: String;
  ethnicity_contains?: String;
  ethnicity_not_contains?: String;
  ethnicity_starts_with?: String;
  ethnicity_not_starts_with?: String;
  ethnicity_ends_with?: String;
  ethnicity_not_ends_with?: String;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  has_chartevents_data?: Int;
  has_chartevents_data_not?: Int;
  has_chartevents_data_in?: Int[] | Int;
  has_chartevents_data_not_in?: Int[] | Int;
  has_chartevents_data_lt?: Int;
  has_chartevents_data_lte?: Int;
  has_chartevents_data_gt?: Int;
  has_chartevents_data_gte?: Int;
  hospital_expire_flag?: Int;
  hospital_expire_flag_not?: Int;
  hospital_expire_flag_in?: Int[] | Int;
  hospital_expire_flag_not_in?: Int[] | Int;
  hospital_expire_flag_lt?: Int;
  hospital_expire_flag_lte?: Int;
  hospital_expire_flag_gt?: Int;
  hospital_expire_flag_gte?: Int;
  icustays_every?: IcustayWhereInput;
  icustays_some?: IcustayWhereInput;
  icustays_none?: IcustayWhereInput;
  inputevents_cv_every?: InputeventsCvWhereInput;
  inputevents_cv_some?: InputeventsCvWhereInput;
  inputevents_cv_none?: InputeventsCvWhereInput;
  inputevents_mv_every?: InputeventsMvWhereInput;
  inputevents_mv_some?: InputeventsMvWhereInput;
  inputevents_mv_none?: InputeventsMvWhereInput;
  insurance?: String;
  insurance_not?: String;
  insurance_in?: String[] | String;
  insurance_not_in?: String[] | String;
  insurance_lt?: String;
  insurance_lte?: String;
  insurance_gt?: String;
  insurance_gte?: String;
  insurance_contains?: String;
  insurance_not_contains?: String;
  insurance_starts_with?: String;
  insurance_not_starts_with?: String;
  insurance_ends_with?: String;
  insurance_not_ends_with?: String;
  labevents_every?: LabeventWhereInput;
  labevents_some?: LabeventWhereInput;
  labevents_none?: LabeventWhereInput;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  marital_status?: String;
  marital_status_not?: String;
  marital_status_in?: String[] | String;
  marital_status_not_in?: String[] | String;
  marital_status_lt?: String;
  marital_status_lte?: String;
  marital_status_gt?: String;
  marital_status_gte?: String;
  marital_status_contains?: String;
  marital_status_not_contains?: String;
  marital_status_starts_with?: String;
  marital_status_not_starts_with?: String;
  marital_status_ends_with?: String;
  marital_status_not_ends_with?: String;
  microbiologyevents_every?: MicrobiologyeventWhereInput;
  microbiologyevents_some?: MicrobiologyeventWhereInput;
  microbiologyevents_none?: MicrobiologyeventWhereInput;
  noteevents_every?: NoteeventWhereInput;
  noteevents_some?: NoteeventWhereInput;
  noteevents_none?: NoteeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  prescriptions_every?: PrescriptionWhereInput;
  prescriptions_some?: PrescriptionWhereInput;
  prescriptions_none?: PrescriptionWhereInput;
  procedureevents_mv_every?: ProcedureeventsMvWhereInput;
  procedureevents_mv_some?: ProcedureeventsMvWhereInput;
  procedureevents_mv_none?: ProcedureeventsMvWhereInput;
  procedures_icd_every?: ProceduresIcdWhereInput;
  procedures_icd_some?: ProceduresIcdWhereInput;
  procedures_icd_none?: ProceduresIcdWhereInput;
  religion?: String;
  religion_not?: String;
  religion_in?: String[] | String;
  religion_not_in?: String[] | String;
  religion_lt?: String;
  religion_lte?: String;
  religion_gt?: String;
  religion_gte?: String;
  religion_contains?: String;
  religion_not_contains?: String;
  religion_starts_with?: String;
  religion_not_starts_with?: String;
  religion_ends_with?: String;
  religion_not_ends_with?: String;
  services_every?: ServiceWhereInput;
  services_some?: ServiceWhereInput;
  services_none?: ServiceWhereInput;
  transfers_every?: TransferWhereInput;
  transfers_some?: TransferWhereInput;
  transfers_none?: TransferWhereInput;
  AND?: AdmissionWhereInput[] | AdmissionWhereInput;
  OR?: AdmissionWhereInput[] | AdmissionWhereInput;
  NOT?: AdmissionWhereInput[] | AdmissionWhereInput;
}

export interface CaregiverCreateInput {
  cgid: Int;
  chartevents?: CharteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  description?: String;
  inputevents_cv?: InputeventsCvCreateManyInput;
  inputevents_mv?: InputeventsMvCreateManyInput;
  label?: String;
  noteevents?: NoteeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  procedureevents_mv?: ProcedureeventsMvCreateManyInput;
}

export interface LabeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LabeventWhereInput;
  AND?: LabeventSubscriptionWhereInput[] | LabeventSubscriptionWhereInput;
  OR?: LabeventSubscriptionWhereInput[] | LabeventSubscriptionWhereInput;
  NOT?: LabeventSubscriptionWhereInput[] | LabeventSubscriptionWhereInput;
}

export type InputeventsMvWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface InputeventsCvSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InputeventsCvWhereInput;
  AND?:
    | InputeventsCvSubscriptionWhereInput[]
    | InputeventsCvSubscriptionWhereInput;
  OR?:
    | InputeventsCvSubscriptionWhereInput[]
    | InputeventsCvSubscriptionWhereInput;
  NOT?:
    | InputeventsCvSubscriptionWhereInput[]
    | InputeventsCvSubscriptionWhereInput;
}

export interface CalloutUpdateManyMutationInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface DrgcodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DrgcodeWhereInput;
  AND?: DrgcodeSubscriptionWhereInput[] | DrgcodeSubscriptionWhereInput;
  OR?: DrgcodeSubscriptionWhereInput[] | DrgcodeSubscriptionWhereInput;
  NOT?: DrgcodeSubscriptionWhereInput[] | DrgcodeSubscriptionWhereInput;
}

export interface CalloutUpdateInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface DiagnosesIcdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DiagnosesIcdWhereInput;
  AND?:
    | DiagnosesIcdSubscriptionWhereInput[]
    | DiagnosesIcdSubscriptionWhereInput;
  OR?:
    | DiagnosesIcdSubscriptionWhereInput[]
    | DiagnosesIcdSubscriptionWhereInput;
  NOT?:
    | DiagnosesIcdSubscriptionWhereInput[]
    | DiagnosesIcdSubscriptionWhereInput;
}

export interface AdmissionUpdateManyMutationInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  deathtime?: DateTimeInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  insurance?: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface DLabitemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DLabitemWhereInput;
  AND?: DLabitemSubscriptionWhereInput[] | DLabitemSubscriptionWhereInput;
  OR?: DLabitemSubscriptionWhereInput[] | DLabitemSubscriptionWhereInput;
  NOT?: DLabitemSubscriptionWhereInput[] | DLabitemSubscriptionWhereInput;
}

export type LabeventWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface DItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DItemWhereInput;
  AND?: DItemSubscriptionWhereInput[] | DItemSubscriptionWhereInput;
  OR?: DItemSubscriptionWhereInput[] | DItemSubscriptionWhereInput;
  NOT?: DItemSubscriptionWhereInput[] | DItemSubscriptionWhereInput;
}

export interface ServiceUpdateManyDataInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface DIcdProcedureSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DIcdProcedureWhereInput;
  AND?:
    | DIcdProcedureSubscriptionWhereInput[]
    | DIcdProcedureSubscriptionWhereInput;
  OR?:
    | DIcdProcedureSubscriptionWhereInput[]
    | DIcdProcedureSubscriptionWhereInput;
  NOT?:
    | DIcdProcedureSubscriptionWhereInput[]
    | DIcdProcedureSubscriptionWhereInput;
}

export interface ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput;
  data: ServiceUpdateManyDataInput;
}

export interface DCptSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DCptWhereInput;
  AND?: DCptSubscriptionWhereInput[] | DCptSubscriptionWhereInput;
  OR?: DCptSubscriptionWhereInput[] | DCptSubscriptionWhereInput;
  NOT?: DCptSubscriptionWhereInput[] | DCptSubscriptionWhereInput;
}

export interface ServiceScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  curr_service?: String;
  curr_service_not?: String;
  curr_service_in?: String[] | String;
  curr_service_not_in?: String[] | String;
  curr_service_lt?: String;
  curr_service_lte?: String;
  curr_service_gt?: String;
  curr_service_gte?: String;
  curr_service_contains?: String;
  curr_service_not_contains?: String;
  curr_service_starts_with?: String;
  curr_service_not_starts_with?: String;
  curr_service_ends_with?: String;
  curr_service_not_ends_with?: String;
  prev_service?: String;
  prev_service_not?: String;
  prev_service_in?: String[] | String;
  prev_service_not_in?: String[] | String;
  prev_service_lt?: String;
  prev_service_lte?: String;
  prev_service_gt?: String;
  prev_service_gte?: String;
  prev_service_contains?: String;
  prev_service_not_contains?: String;
  prev_service_starts_with?: String;
  prev_service_not_starts_with?: String;
  prev_service_ends_with?: String;
  prev_service_not_ends_with?: String;
  transfertime?: DateTimeInput;
  transfertime_not?: DateTimeInput;
  transfertime_in?: DateTimeInput[] | DateTimeInput;
  transfertime_not_in?: DateTimeInput[] | DateTimeInput;
  transfertime_lt?: DateTimeInput;
  transfertime_lte?: DateTimeInput;
  transfertime_gt?: DateTimeInput;
  transfertime_gte?: DateTimeInput;
  AND?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  OR?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  NOT?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
}

export type CharteventWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type MicrobiologyeventWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface Chartevents8SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents8WhereInput;
  AND?:
    | Chartevents8SubscriptionWhereInput[]
    | Chartevents8SubscriptionWhereInput;
  OR?:
    | Chartevents8SubscriptionWhereInput[]
    | Chartevents8SubscriptionWhereInput;
  NOT?:
    | Chartevents8SubscriptionWhereInput[]
    | Chartevents8SubscriptionWhereInput;
}

export interface ServiceUpsertWithWhereUniqueNestedInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateDataInput;
  create: ServiceCreateInput;
}

export interface Chartevents1WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents1WhereInput[] | Chartevents1WhereInput;
  OR?: Chartevents1WhereInput[] | Chartevents1WhereInput;
  NOT?: Chartevents1WhereInput[] | Chartevents1WhereInput;
}

export interface ServiceUpdateDataInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface Chartevents6SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents6WhereInput;
  AND?:
    | Chartevents6SubscriptionWhereInput[]
    | Chartevents6SubscriptionWhereInput;
  OR?:
    | Chartevents6SubscriptionWhereInput[]
    | Chartevents6SubscriptionWhereInput;
  NOT?:
    | Chartevents6SubscriptionWhereInput[]
    | Chartevents6SubscriptionWhereInput;
}

export interface ServiceUpdateWithWhereUniqueNestedInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateDataInput;
}

export interface Chartevents4SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents4WhereInput;
  AND?:
    | Chartevents4SubscriptionWhereInput[]
    | Chartevents4SubscriptionWhereInput;
  OR?:
    | Chartevents4SubscriptionWhereInput[]
    | Chartevents4SubscriptionWhereInput;
  NOT?:
    | Chartevents4SubscriptionWhereInput[]
    | Chartevents4SubscriptionWhereInput;
}

export type NoteeventWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface Chartevents10WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents10WhereInput[] | Chartevents10WhereInput;
  OR?: Chartevents10WhereInput[] | Chartevents10WhereInput;
  NOT?: Chartevents10WhereInput[] | Chartevents10WhereInput;
}

export interface ServiceUpdateManyInput {
  create?: ServiceCreateInput[] | ServiceCreateInput;
  update?:
    | ServiceUpdateWithWhereUniqueNestedInput[]
    | ServiceUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ServiceUpsertWithWhereUniqueNestedInput[]
    | ServiceUpsertWithWhereUniqueNestedInput;
  delete?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  set?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  disconnect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  deleteMany?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  updateMany?:
    | ServiceUpdateManyWithWhereNestedInput[]
    | ServiceUpdateManyWithWhereNestedInput;
}

export interface Chartevents2SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents2WhereInput;
  AND?:
    | Chartevents2SubscriptionWhereInput[]
    | Chartevents2SubscriptionWhereInput;
  OR?:
    | Chartevents2SubscriptionWhereInput[]
    | Chartevents2SubscriptionWhereInput;
  NOT?:
    | Chartevents2SubscriptionWhereInput[]
    | Chartevents2SubscriptionWhereInput;
}

export interface ProceduresIcdUpdateManyDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface Chartevents16SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents16WhereInput;
  AND?:
    | Chartevents16SubscriptionWhereInput[]
    | Chartevents16SubscriptionWhereInput;
  OR?:
    | Chartevents16SubscriptionWhereInput[]
    | Chartevents16SubscriptionWhereInput;
  NOT?:
    | Chartevents16SubscriptionWhereInput[]
    | Chartevents16SubscriptionWhereInput;
}

export interface ProceduresIcdUpdateManyWithWhereNestedInput {
  where: ProceduresIcdScalarWhereInput;
  data: ProceduresIcdUpdateManyDataInput;
}

export interface Chartevents11WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents11WhereInput[] | Chartevents11WhereInput;
  OR?: Chartevents11WhereInput[] | Chartevents11WhereInput;
  NOT?: Chartevents11WhereInput[] | Chartevents11WhereInput;
}

export type OutputeventWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface Chartevents14SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents14WhereInput;
  AND?:
    | Chartevents14SubscriptionWhereInput[]
    | Chartevents14SubscriptionWhereInput;
  OR?:
    | Chartevents14SubscriptionWhereInput[]
    | Chartevents14SubscriptionWhereInput;
  NOT?:
    | Chartevents14SubscriptionWhereInput[]
    | Chartevents14SubscriptionWhereInput;
}

export interface ProceduresIcdScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: ProceduresIcdScalarWhereInput[] | ProceduresIcdScalarWhereInput;
  OR?: ProceduresIcdScalarWhereInput[] | ProceduresIcdScalarWhereInput;
  NOT?: ProceduresIcdScalarWhereInput[] | ProceduresIcdScalarWhereInput;
}

export interface Chartevents12SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents12WhereInput;
  AND?:
    | Chartevents12SubscriptionWhereInput[]
    | Chartevents12SubscriptionWhereInput;
  OR?:
    | Chartevents12SubscriptionWhereInput[]
    | Chartevents12SubscriptionWhereInput;
  NOT?:
    | Chartevents12SubscriptionWhereInput[]
    | Chartevents12SubscriptionWhereInput;
}

export interface ProceduresIcdUpsertWithWhereUniqueNestedInput {
  where: ProceduresIcdWhereUniqueInput;
  update: ProceduresIcdUpdateDataInput;
  create: ProceduresIcdCreateInput;
}

export interface Chartevents12WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents12WhereInput[] | Chartevents12WhereInput;
  OR?: Chartevents12WhereInput[] | Chartevents12WhereInput;
  NOT?: Chartevents12WhereInput[] | Chartevents12WhereInput;
}

export interface ProceduresIcdUpdateDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface Chartevents10SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents10WhereInput;
  AND?:
    | Chartevents10SubscriptionWhereInput[]
    | Chartevents10SubscriptionWhereInput;
  OR?:
    | Chartevents10SubscriptionWhereInput[]
    | Chartevents10SubscriptionWhereInput;
  NOT?:
    | Chartevents10SubscriptionWhereInput[]
    | Chartevents10SubscriptionWhereInput;
}

export type PatientWhereUniqueInput = AtLeastOne<{
  id: UUID;
  subject_id?: Int;
}>;

export interface CharteventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CharteventWhereInput;
  AND?: CharteventSubscriptionWhereInput[] | CharteventSubscriptionWhereInput;
  OR?: CharteventSubscriptionWhereInput[] | CharteventSubscriptionWhereInput;
  NOT?: CharteventSubscriptionWhereInput[] | CharteventSubscriptionWhereInput;
}

export interface ProceduresIcdUpdateWithWhereUniqueNestedInput {
  where: ProceduresIcdWhereUniqueInput;
  data: ProceduresIcdUpdateDataInput;
}

export interface Chartevents13WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents13WhereInput[] | Chartevents13WhereInput;
  OR?: Chartevents13WhereInput[] | Chartevents13WhereInput;
  NOT?: Chartevents13WhereInput[] | Chartevents13WhereInput;
}

export interface PatientWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  admissions_every?: AdmissionWhereInput;
  admissions_some?: AdmissionWhereInput;
  admissions_none?: AdmissionWhereInput;
  callout_every?: CalloutWhereInput;
  callout_some?: CalloutWhereInput;
  callout_none?: CalloutWhereInput;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  cptevents_every?: CpteventWhereInput;
  cptevents_some?: CpteventWhereInput;
  cptevents_none?: CpteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  diagnoses_icd_every?: DiagnosesIcdWhereInput;
  diagnoses_icd_some?: DiagnosesIcdWhereInput;
  diagnoses_icd_none?: DiagnosesIcdWhereInput;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  dod?: DateTimeInput;
  dod_not?: DateTimeInput;
  dod_in?: DateTimeInput[] | DateTimeInput;
  dod_not_in?: DateTimeInput[] | DateTimeInput;
  dod_lt?: DateTimeInput;
  dod_lte?: DateTimeInput;
  dod_gt?: DateTimeInput;
  dod_gte?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_hosp_not?: DateTimeInput;
  dod_hosp_in?: DateTimeInput[] | DateTimeInput;
  dod_hosp_not_in?: DateTimeInput[] | DateTimeInput;
  dod_hosp_lt?: DateTimeInput;
  dod_hosp_lte?: DateTimeInput;
  dod_hosp_gt?: DateTimeInput;
  dod_hosp_gte?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  dod_ssn_not?: DateTimeInput;
  dod_ssn_in?: DateTimeInput[] | DateTimeInput;
  dod_ssn_not_in?: DateTimeInput[] | DateTimeInput;
  dod_ssn_lt?: DateTimeInput;
  dod_ssn_lte?: DateTimeInput;
  dod_ssn_gt?: DateTimeInput;
  dod_ssn_gte?: DateTimeInput;
  drgcodes_every?: DrgcodeWhereInput;
  drgcodes_some?: DrgcodeWhereInput;
  drgcodes_none?: DrgcodeWhereInput;
  expire_flag?: Int;
  expire_flag_not?: Int;
  expire_flag_in?: Int[] | Int;
  expire_flag_not_in?: Int[] | Int;
  expire_flag_lt?: Int;
  expire_flag_lte?: Int;
  expire_flag_gt?: Int;
  expire_flag_gte?: Int;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  icustays_every?: IcustayWhereInput;
  icustays_some?: IcustayWhereInput;
  icustays_none?: IcustayWhereInput;
  inputevents_cv_every?: InputeventsCvWhereInput;
  inputevents_cv_some?: InputeventsCvWhereInput;
  inputevents_cv_none?: InputeventsCvWhereInput;
  inputevents_mv_every?: InputeventsMvWhereInput;
  inputevents_mv_some?: InputeventsMvWhereInput;
  inputevents_mv_none?: InputeventsMvWhereInput;
  labevents_every?: LabeventWhereInput;
  labevents_some?: LabeventWhereInput;
  labevents_none?: LabeventWhereInput;
  microbiologyevents_every?: MicrobiologyeventWhereInput;
  microbiologyevents_some?: MicrobiologyeventWhereInput;
  microbiologyevents_none?: MicrobiologyeventWhereInput;
  noteevents_every?: NoteeventWhereInput;
  noteevents_some?: NoteeventWhereInput;
  noteevents_none?: NoteeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  prescriptions_every?: PrescriptionWhereInput;
  prescriptions_some?: PrescriptionWhereInput;
  prescriptions_none?: PrescriptionWhereInput;
  procedureevents_mv_every?: ProcedureeventsMvWhereInput;
  procedureevents_mv_some?: ProcedureeventsMvWhereInput;
  procedureevents_mv_none?: ProcedureeventsMvWhereInput;
  procedures_icd_every?: ProceduresIcdWhereInput;
  procedures_icd_some?: ProceduresIcdWhereInput;
  procedures_icd_none?: ProceduresIcdWhereInput;
  services_every?: ServiceWhereInput;
  services_some?: ServiceWhereInput;
  services_none?: ServiceWhereInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  transfers_every?: TransferWhereInput;
  transfers_some?: TransferWhereInput;
  transfers_none?: TransferWhereInput;
  AND?: PatientWhereInput[] | PatientWhereInput;
  OR?: PatientWhereInput[] | PatientWhereInput;
  NOT?: PatientWhereInput[] | PatientWhereInput;
}

export interface CalloutSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CalloutWhereInput;
  AND?: CalloutSubscriptionWhereInput[] | CalloutSubscriptionWhereInput;
  OR?: CalloutSubscriptionWhereInput[] | CalloutSubscriptionWhereInput;
  NOT?: CalloutSubscriptionWhereInput[] | CalloutSubscriptionWhereInput;
}

export interface ProceduresIcdUpdateManyInput {
  create?: ProceduresIcdCreateInput[] | ProceduresIcdCreateInput;
  update?:
    | ProceduresIcdUpdateWithWhereUniqueNestedInput[]
    | ProceduresIcdUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ProceduresIcdUpsertWithWhereUniqueNestedInput[]
    | ProceduresIcdUpsertWithWhereUniqueNestedInput;
  delete?: ProceduresIcdWhereUniqueInput[] | ProceduresIcdWhereUniqueInput;
  connect?: ProceduresIcdWhereUniqueInput[] | ProceduresIcdWhereUniqueInput;
  set?: ProceduresIcdWhereUniqueInput[] | ProceduresIcdWhereUniqueInput;
  disconnect?: ProceduresIcdWhereUniqueInput[] | ProceduresIcdWhereUniqueInput;
  deleteMany?: ProceduresIcdScalarWhereInput[] | ProceduresIcdScalarWhereInput;
  updateMany?:
    | ProceduresIcdUpdateManyWithWhereNestedInput[]
    | ProceduresIcdUpdateManyWithWhereNestedInput;
}

export interface TransferUpdateManyMutationInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface NoteeventUpdateManyDataInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface Chartevents14WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents14WhereInput[] | Chartevents14WhereInput;
  OR?: Chartevents14WhereInput[] | Chartevents14WhereInput;
  NOT?: Chartevents14WhereInput[] | Chartevents14WhereInput;
}

export interface NoteeventUpdateManyWithWhereNestedInput {
  where: NoteeventScalarWhereInput;
  data: NoteeventUpdateManyDataInput;
}

export interface ServiceUpdateManyMutationInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface NoteeventScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  iserror?: String;
  iserror_not?: String;
  iserror_in?: String[] | String;
  iserror_not_in?: String[] | String;
  iserror_lt?: String;
  iserror_lte?: String;
  iserror_gt?: String;
  iserror_gte?: String;
  iserror_contains?: String;
  iserror_not_contains?: String;
  iserror_starts_with?: String;
  iserror_not_starts_with?: String;
  iserror_ends_with?: String;
  iserror_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
  OR?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
  NOT?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
}

export interface ProceduresIcdUpdateManyMutationInput {
  icd9_code?: String;
  seq_num?: Int;
}

export type PrescriptionWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface Chartevents15WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents15WhereInput[] | Chartevents15WhereInput;
  OR?: Chartevents15WhereInput[] | Chartevents15WhereInput;
  NOT?: Chartevents15WhereInput[] | Chartevents15WhereInput;
}

export interface NoteeventUpsertWithWhereUniqueNestedInput {
  where: NoteeventWhereUniqueInput;
  update: NoteeventUpdateDataInput;
  create: NoteeventCreateInput;
}

export interface ProcedureeventsMvUpdateManyMutationInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface NoteeventUpdateDataInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface PrescriptionUpdateManyMutationInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface NoteeventUpdateWithWhereUniqueNestedInput {
  where: NoteeventWhereUniqueInput;
  data: NoteeventUpdateDataInput;
}

export interface Chartevents16WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents16WhereInput[] | Chartevents16WhereInput;
  OR?: Chartevents16WhereInput[] | Chartevents16WhereInput;
  NOT?: Chartevents16WhereInput[] | Chartevents16WhereInput;
}

export type ProcedureeventsMvWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface AdmissionUpdateManyDataInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  deathtime?: DateTimeInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  insurance?: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface NoteeventUpdateManyInput {
  create?: NoteeventCreateInput[] | NoteeventCreateInput;
  update?:
    | NoteeventUpdateWithWhereUniqueNestedInput[]
    | NoteeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | NoteeventUpsertWithWhereUniqueNestedInput[]
    | NoteeventUpsertWithWhereUniqueNestedInput;
  delete?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  connect?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  set?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  disconnect?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
  deleteMany?: NoteeventScalarWhereInput[] | NoteeventScalarWhereInput;
  updateMany?:
    | NoteeventUpdateManyWithWhereNestedInput[]
    | NoteeventUpdateManyWithWhereNestedInput;
}

export interface AdmissionScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  admission_location?: String;
  admission_location_not?: String;
  admission_location_in?: String[] | String;
  admission_location_not_in?: String[] | String;
  admission_location_lt?: String;
  admission_location_lte?: String;
  admission_location_gt?: String;
  admission_location_gte?: String;
  admission_location_contains?: String;
  admission_location_not_contains?: String;
  admission_location_starts_with?: String;
  admission_location_not_starts_with?: String;
  admission_location_ends_with?: String;
  admission_location_not_ends_with?: String;
  admission_type?: String;
  admission_type_not?: String;
  admission_type_in?: String[] | String;
  admission_type_not_in?: String[] | String;
  admission_type_lt?: String;
  admission_type_lte?: String;
  admission_type_gt?: String;
  admission_type_gte?: String;
  admission_type_contains?: String;
  admission_type_not_contains?: String;
  admission_type_starts_with?: String;
  admission_type_not_starts_with?: String;
  admission_type_ends_with?: String;
  admission_type_not_ends_with?: String;
  admittime?: DateTimeInput;
  admittime_not?: DateTimeInput;
  admittime_in?: DateTimeInput[] | DateTimeInput;
  admittime_not_in?: DateTimeInput[] | DateTimeInput;
  admittime_lt?: DateTimeInput;
  admittime_lte?: DateTimeInput;
  admittime_gt?: DateTimeInput;
  admittime_gte?: DateTimeInput;
  deathtime?: DateTimeInput;
  deathtime_not?: DateTimeInput;
  deathtime_in?: DateTimeInput[] | DateTimeInput;
  deathtime_not_in?: DateTimeInput[] | DateTimeInput;
  deathtime_lt?: DateTimeInput;
  deathtime_lte?: DateTimeInput;
  deathtime_gt?: DateTimeInput;
  deathtime_gte?: DateTimeInput;
  diagnosis?: String;
  diagnosis_not?: String;
  diagnosis_in?: String[] | String;
  diagnosis_not_in?: String[] | String;
  diagnosis_lt?: String;
  diagnosis_lte?: String;
  diagnosis_gt?: String;
  diagnosis_gte?: String;
  diagnosis_contains?: String;
  diagnosis_not_contains?: String;
  diagnosis_starts_with?: String;
  diagnosis_not_starts_with?: String;
  diagnosis_ends_with?: String;
  diagnosis_not_ends_with?: String;
  discharge_location?: String;
  discharge_location_not?: String;
  discharge_location_in?: String[] | String;
  discharge_location_not_in?: String[] | String;
  discharge_location_lt?: String;
  discharge_location_lte?: String;
  discharge_location_gt?: String;
  discharge_location_gte?: String;
  discharge_location_contains?: String;
  discharge_location_not_contains?: String;
  discharge_location_starts_with?: String;
  discharge_location_not_starts_with?: String;
  discharge_location_ends_with?: String;
  discharge_location_not_ends_with?: String;
  dischtime?: DateTimeInput;
  dischtime_not?: DateTimeInput;
  dischtime_in?: DateTimeInput[] | DateTimeInput;
  dischtime_not_in?: DateTimeInput[] | DateTimeInput;
  dischtime_lt?: DateTimeInput;
  dischtime_lte?: DateTimeInput;
  dischtime_gt?: DateTimeInput;
  dischtime_gte?: DateTimeInput;
  edouttime?: DateTimeInput;
  edouttime_not?: DateTimeInput;
  edouttime_in?: DateTimeInput[] | DateTimeInput;
  edouttime_not_in?: DateTimeInput[] | DateTimeInput;
  edouttime_lt?: DateTimeInput;
  edouttime_lte?: DateTimeInput;
  edouttime_gt?: DateTimeInput;
  edouttime_gte?: DateTimeInput;
  edregtime?: DateTimeInput;
  edregtime_not?: DateTimeInput;
  edregtime_in?: DateTimeInput[] | DateTimeInput;
  edregtime_not_in?: DateTimeInput[] | DateTimeInput;
  edregtime_lt?: DateTimeInput;
  edregtime_lte?: DateTimeInput;
  edregtime_gt?: DateTimeInput;
  edregtime_gte?: DateTimeInput;
  ethnicity?: String;
  ethnicity_not?: String;
  ethnicity_in?: String[] | String;
  ethnicity_not_in?: String[] | String;
  ethnicity_lt?: String;
  ethnicity_lte?: String;
  ethnicity_gt?: String;
  ethnicity_gte?: String;
  ethnicity_contains?: String;
  ethnicity_not_contains?: String;
  ethnicity_starts_with?: String;
  ethnicity_not_starts_with?: String;
  ethnicity_ends_with?: String;
  ethnicity_not_ends_with?: String;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  has_chartevents_data?: Int;
  has_chartevents_data_not?: Int;
  has_chartevents_data_in?: Int[] | Int;
  has_chartevents_data_not_in?: Int[] | Int;
  has_chartevents_data_lt?: Int;
  has_chartevents_data_lte?: Int;
  has_chartevents_data_gt?: Int;
  has_chartevents_data_gte?: Int;
  hospital_expire_flag?: Int;
  hospital_expire_flag_not?: Int;
  hospital_expire_flag_in?: Int[] | Int;
  hospital_expire_flag_not_in?: Int[] | Int;
  hospital_expire_flag_lt?: Int;
  hospital_expire_flag_lte?: Int;
  hospital_expire_flag_gt?: Int;
  hospital_expire_flag_gte?: Int;
  insurance?: String;
  insurance_not?: String;
  insurance_in?: String[] | String;
  insurance_not_in?: String[] | String;
  insurance_lt?: String;
  insurance_lte?: String;
  insurance_gt?: String;
  insurance_gte?: String;
  insurance_contains?: String;
  insurance_not_contains?: String;
  insurance_starts_with?: String;
  insurance_not_starts_with?: String;
  insurance_ends_with?: String;
  insurance_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  marital_status?: String;
  marital_status_not?: String;
  marital_status_in?: String[] | String;
  marital_status_not_in?: String[] | String;
  marital_status_lt?: String;
  marital_status_lte?: String;
  marital_status_gt?: String;
  marital_status_gte?: String;
  marital_status_contains?: String;
  marital_status_not_contains?: String;
  marital_status_starts_with?: String;
  marital_status_not_starts_with?: String;
  marital_status_ends_with?: String;
  marital_status_not_ends_with?: String;
  religion?: String;
  religion_not?: String;
  religion_in?: String[] | String;
  religion_not_in?: String[] | String;
  religion_lt?: String;
  religion_lte?: String;
  religion_gt?: String;
  religion_gte?: String;
  religion_contains?: String;
  religion_not_contains?: String;
  religion_starts_with?: String;
  religion_not_starts_with?: String;
  religion_ends_with?: String;
  religion_not_ends_with?: String;
  AND?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
  OR?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
  NOT?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
}

export interface MicrobiologyeventUpdateManyDataInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface Chartevents17WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents17WhereInput[] | Chartevents17WhereInput;
  OR?: Chartevents17WhereInput[] | Chartevents17WhereInput;
  NOT?: Chartevents17WhereInput[] | Chartevents17WhereInput;
}

export interface MicrobiologyeventUpdateManyWithWhereNestedInput {
  where: MicrobiologyeventScalarWhereInput;
  data: MicrobiologyeventUpdateManyDataInput;
}

export interface AdmissionUpdateDataInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  callout?: CalloutUpdateManyInput;
  chartevents?: CharteventUpdateManyInput;
  cptevents?: CpteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  deathtime?: DateTimeInput;
  diagnoses_icd?: DiagnosesIcdUpdateManyInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  drgcodes?: DrgcodeUpdateManyInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  icustays?: IcustayUpdateManyInput;
  inputevents_cv?: InputeventsCvUpdateManyInput;
  inputevents_mv?: InputeventsMvUpdateManyInput;
  insurance?: String;
  labevents?: LabeventUpdateManyInput;
  language?: String;
  marital_status?: String;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: ProcedureeventsMvUpdateManyInput;
  procedures_icd?: ProceduresIcdUpdateManyInput;
  religion?: String;
  services?: ServiceUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export type ProceduresIcdWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface AdmissionUpdateManyInput {
  create?: AdmissionCreateInput[] | AdmissionCreateInput;
  update?:
    | AdmissionUpdateWithWhereUniqueNestedInput[]
    | AdmissionUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AdmissionUpsertWithWhereUniqueNestedInput[]
    | AdmissionUpsertWithWhereUniqueNestedInput;
  delete?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  connect?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  set?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  disconnect?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
  deleteMany?: AdmissionScalarWhereInput[] | AdmissionScalarWhereInput;
  updateMany?:
    | AdmissionUpdateManyWithWhereNestedInput[]
    | AdmissionUpdateManyWithWhereNestedInput;
}

export interface MicrobiologyeventScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  ab_name?: String;
  ab_name_not?: String;
  ab_name_in?: String[] | String;
  ab_name_not_in?: String[] | String;
  ab_name_lt?: String;
  ab_name_lte?: String;
  ab_name_gt?: String;
  ab_name_gte?: String;
  ab_name_contains?: String;
  ab_name_not_contains?: String;
  ab_name_starts_with?: String;
  ab_name_not_starts_with?: String;
  ab_name_ends_with?: String;
  ab_name_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  dilution_comparison?: String;
  dilution_comparison_not?: String;
  dilution_comparison_in?: String[] | String;
  dilution_comparison_not_in?: String[] | String;
  dilution_comparison_lt?: String;
  dilution_comparison_lte?: String;
  dilution_comparison_gt?: String;
  dilution_comparison_gte?: String;
  dilution_comparison_contains?: String;
  dilution_comparison_not_contains?: String;
  dilution_comparison_starts_with?: String;
  dilution_comparison_not_starts_with?: String;
  dilution_comparison_ends_with?: String;
  dilution_comparison_not_ends_with?: String;
  dilution_text?: String;
  dilution_text_not?: String;
  dilution_text_in?: String[] | String;
  dilution_text_not_in?: String[] | String;
  dilution_text_lt?: String;
  dilution_text_lte?: String;
  dilution_text_gt?: String;
  dilution_text_gte?: String;
  dilution_text_contains?: String;
  dilution_text_not_contains?: String;
  dilution_text_starts_with?: String;
  dilution_text_not_starts_with?: String;
  dilution_text_ends_with?: String;
  dilution_text_not_ends_with?: String;
  dilution_value?: Float;
  dilution_value_not?: Float;
  dilution_value_in?: Float[] | Float;
  dilution_value_not_in?: Float[] | Float;
  dilution_value_lt?: Float;
  dilution_value_lte?: Float;
  dilution_value_gt?: Float;
  dilution_value_gte?: Float;
  interpretation?: String;
  interpretation_not?: String;
  interpretation_in?: String[] | String;
  interpretation_not_in?: String[] | String;
  interpretation_lt?: String;
  interpretation_lte?: String;
  interpretation_gt?: String;
  interpretation_gte?: String;
  interpretation_contains?: String;
  interpretation_not_contains?: String;
  interpretation_starts_with?: String;
  interpretation_not_starts_with?: String;
  interpretation_ends_with?: String;
  interpretation_not_ends_with?: String;
  isolate_num?: Int;
  isolate_num_not?: Int;
  isolate_num_in?: Int[] | Int;
  isolate_num_not_in?: Int[] | Int;
  isolate_num_lt?: Int;
  isolate_num_lte?: Int;
  isolate_num_gt?: Int;
  isolate_num_gte?: Int;
  org_name?: String;
  org_name_not?: String;
  org_name_in?: String[] | String;
  org_name_not_in?: String[] | String;
  org_name_lt?: String;
  org_name_lte?: String;
  org_name_gt?: String;
  org_name_gte?: String;
  org_name_contains?: String;
  org_name_not_contains?: String;
  org_name_starts_with?: String;
  org_name_not_starts_with?: String;
  org_name_ends_with?: String;
  org_name_not_ends_with?: String;
  spec_type_desc?: String;
  spec_type_desc_not?: String;
  spec_type_desc_in?: String[] | String;
  spec_type_desc_not_in?: String[] | String;
  spec_type_desc_lt?: String;
  spec_type_desc_lte?: String;
  spec_type_desc_gt?: String;
  spec_type_desc_gte?: String;
  spec_type_desc_contains?: String;
  spec_type_desc_not_contains?: String;
  spec_type_desc_starts_with?: String;
  spec_type_desc_not_starts_with?: String;
  spec_type_desc_ends_with?: String;
  spec_type_desc_not_ends_with?: String;
  AND?: MicrobiologyeventScalarWhereInput[] | MicrobiologyeventScalarWhereInput;
  OR?: MicrobiologyeventScalarWhereInput[] | MicrobiologyeventScalarWhereInput;
  NOT?: MicrobiologyeventScalarWhereInput[] | MicrobiologyeventScalarWhereInput;
}

export interface Chartevents2WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents2WhereInput[] | Chartevents2WhereInput;
  OR?: Chartevents2WhereInput[] | Chartevents2WhereInput;
  NOT?: Chartevents2WhereInput[] | Chartevents2WhereInput;
}

export interface MicrobiologyeventUpsertWithWhereUniqueNestedInput {
  where: MicrobiologyeventWhereUniqueInput;
  update: MicrobiologyeventUpdateDataInput;
  create: MicrobiologyeventCreateInput;
}

export interface PatientCreateInput {
  admissions?: AdmissionCreateManyInput;
  callout?: CalloutCreateManyInput;
  chartevents?: CharteventCreateManyInput;
  cptevents?: CpteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  diagnoses_icd?: DiagnosesIcdCreateManyInput;
  dob: DateTimeInput;
  dod?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  drgcodes?: DrgcodeCreateManyInput;
  expire_flag: Int;
  gender: String;
  icustays?: IcustayCreateManyInput;
  inputevents_cv?: InputeventsCvCreateManyInput;
  inputevents_mv?: InputeventsMvCreateManyInput;
  labevents?: LabeventCreateManyInput;
  microbiologyevents?: MicrobiologyeventCreateManyInput;
  noteevents?: NoteeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  prescriptions?: PrescriptionCreateManyInput;
  procedureevents_mv?: ProcedureeventsMvCreateManyInput;
  procedures_icd?: ProceduresIcdCreateManyInput;
  services?: ServiceCreateManyInput;
  subject_id: Int;
  transfers?: TransferCreateManyInput;
}

export interface MicrobiologyeventUpdateDataInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface OutputeventUpdateInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface Chartevents3WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents3WhereInput[] | Chartevents3WhereInput;
  OR?: Chartevents3WhereInput[] | Chartevents3WhereInput;
  NOT?: Chartevents3WhereInput[] | Chartevents3WhereInput;
}

export interface MicrobiologyeventUpdateWithWhereUniqueNestedInput {
  where: MicrobiologyeventWhereUniqueInput;
  data: MicrobiologyeventUpdateDataInput;
}

export interface NoteeventUpdateInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface MicrobiologyeventUpdateManyInput {
  create?: MicrobiologyeventCreateInput[] | MicrobiologyeventCreateInput;
  update?:
    | MicrobiologyeventUpdateWithWhereUniqueNestedInput[]
    | MicrobiologyeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | MicrobiologyeventUpsertWithWhereUniqueNestedInput[]
    | MicrobiologyeventUpsertWithWhereUniqueNestedInput;
  delete?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
  connect?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
  set?: MicrobiologyeventWhereUniqueInput[] | MicrobiologyeventWhereUniqueInput;
  disconnect?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
  deleteMany?:
    | MicrobiologyeventScalarWhereInput[]
    | MicrobiologyeventScalarWhereInput;
  updateMany?:
    | MicrobiologyeventUpdateManyWithWhereNestedInput[]
    | MicrobiologyeventUpdateManyWithWhereNestedInput;
}

export interface MicrobiologyeventUpdateInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface LabeventUpdateManyDataInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface Chartevents4WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents4WhereInput[] | Chartevents4WhereInput;
  OR?: Chartevents4WhereInput[] | Chartevents4WhereInput;
  NOT?: Chartevents4WhereInput[] | Chartevents4WhereInput;
}

export type TransferWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface InputeventsMvUpdateManyMutationInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface LabeventUpdateManyWithWhereNestedInput {
  where: LabeventScalarWhereInput;
  data: LabeventUpdateManyDataInput;
}

export interface InputeventsCvUpdateManyMutationInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface LabeventScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  flag?: String;
  flag_not?: String;
  flag_in?: String[] | String;
  flag_not_in?: String[] | String;
  flag_lt?: String;
  flag_lte?: String;
  flag_gt?: String;
  flag_gte?: String;
  flag_contains?: String;
  flag_not_contains?: String;
  flag_starts_with?: String;
  flag_not_starts_with?: String;
  flag_ends_with?: String;
  flag_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
  OR?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
  NOT?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
}

export interface Chartevents5WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents5WhereInput[] | Chartevents5WhereInput;
  OR?: Chartevents5WhereInput[] | Chartevents5WhereInput;
  NOT?: Chartevents5WhereInput[] | Chartevents5WhereInput;
}

export interface LabeventUpsertWithWhereUniqueNestedInput {
  where: LabeventWhereUniqueInput;
  update: LabeventUpdateDataInput;
  create: LabeventCreateInput;
}

export interface IcustayUpdateManyMutationInput {
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outtime?: DateTimeInput;
}

export interface LabeventUpdateDataInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface DrgcodeUpdateManyMutationInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface Chartevents6WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents6WhereInput[] | Chartevents6WhereInput;
  OR?: Chartevents6WhereInput[] | Chartevents6WhereInput;
  NOT?: Chartevents6WhereInput[] | Chartevents6WhereInput;
}

export interface DiagnosesIcdUpdateInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface AdmissionCreateInput {
  admission_location: String;
  admission_type: String;
  admittime: DateTimeInput;
  callout?: CalloutCreateManyInput;
  chartevents?: CharteventCreateManyInput;
  cptevents?: CpteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  deathtime?: DateTimeInput;
  diagnoses_icd?: DiagnosesIcdCreateManyInput;
  diagnosis?: String;
  discharge_location: String;
  dischtime: DateTimeInput;
  drgcodes?: DrgcodeCreateManyInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity: String;
  hadm_id: Int;
  has_chartevents_data: Int;
  hospital_expire_flag?: Int;
  icustays?: IcustayCreateManyInput;
  inputevents_cv?: InputeventsCvCreateManyInput;
  inputevents_mv?: InputeventsMvCreateManyInput;
  insurance: String;
  labevents?: LabeventCreateManyInput;
  language?: String;
  marital_status?: String;
  microbiologyevents?: MicrobiologyeventCreateManyInput;
  noteevents?: NoteeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  prescriptions?: PrescriptionCreateManyInput;
  procedureevents_mv?: ProcedureeventsMvCreateManyInput;
  procedures_icd?: ProceduresIcdCreateManyInput;
  religion?: String;
  services?: ServiceCreateManyInput;
  transfers?: TransferCreateManyInput;
}

export interface DatetimeeventUpdateInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface CalloutCreateManyInput {
  create?: CalloutCreateInput[] | CalloutCreateInput;
  connect?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
}

export interface Chartevents7WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents7WhereInput[] | Chartevents7WhereInput;
  OR?: Chartevents7WhereInput[] | Chartevents7WhereInput;
  NOT?: Chartevents7WhereInput[] | Chartevents7WhereInput;
}

export interface CalloutCreateInput {
  acknowledge_status: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome: String;
  callout_service: String;
  callout_status: String;
  callout_wardid?: Int;
  createtime: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime: DateTimeInput;
  request_cdiff: Int;
  request_mrsa: Int;
  request_resp: Int;
  request_tele: Int;
  request_vre: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime: DateTimeInput;
}

export interface DLabitemUpdateInput {
  category?: String;
  fluid?: String;
  itemid?: Int;
  label?: String;
  labevents?: LabeventUpdateManyInput;
  loinc_code?: String;
}

export interface CharteventCreateManyInput {
  create?: CharteventCreateInput[] | CharteventCreateInput;
  connect?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
}

export interface DItemUpdateManyMutationInput {
  abbreviation?: String;
  category?: String;
  conceptid?: Int;
  dbsource?: String;
  itemid?: Int;
  label?: String;
  linksto?: String;
  param_type?: String;
  unitname?: String;
}

export interface CharteventCreateInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents8WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents8WhereInput[] | Chartevents8WhereInput;
  OR?: Chartevents8WhereInput[] | Chartevents8WhereInput;
  NOT?: Chartevents8WhereInput[] | Chartevents8WhereInput;
}

export interface CpteventCreateManyInput {
  create?: CpteventCreateInput[] | CpteventCreateInput;
  connect?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
}

export interface DIcdProcedureUpdateManyMutationInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface CpteventCreateInput {
  chartdate?: DateTimeInput;
  costcenter: String;
  cpt_cd: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface DIcdProcedureCreateInput {
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface DatetimeeventCreateManyInput {
  create?: DatetimeeventCreateInput[] | DatetimeeventCreateInput;
  connect?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
}

export interface Chartevents9WhereInput {
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  hadm_id?: Int;
  hadm_id_not?: Int;
  hadm_id_in?: Int[] | Int;
  hadm_id_not_in?: Int[] | Int;
  hadm_id_lt?: Int;
  hadm_id_lte?: Int;
  hadm_id_gt?: Int;
  hadm_id_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  row_id?: Int;
  row_id_not?: Int;
  row_id_in?: Int[] | Int;
  row_id_not_in?: Int[] | Int;
  row_id_lt?: Int;
  row_id_lte?: Int;
  row_id_gt?: Int;
  row_id_gte?: Int;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  subject_id?: Int;
  subject_id_not?: Int;
  subject_id_in?: Int[] | Int;
  subject_id_not_in?: Int[] | Int;
  subject_id_lt?: Int;
  subject_id_lte?: Int;
  subject_id_gt?: Int;
  subject_id_gte?: Int;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: Chartevents9WhereInput[] | Chartevents9WhereInput;
  OR?: Chartevents9WhereInput[] | Chartevents9WhereInput;
  NOT?: Chartevents9WhereInput[] | Chartevents9WhereInput;
}

export interface DatetimeeventCreateInput {
  charttime: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime: DateTimeInput;
  value?: DateTimeInput;
  valueuom: String;
  warning?: Int;
}

export interface DIcdDiagnosisCreateInput {
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface DiagnosesIcdCreateManyInput {
  create?: DiagnosesIcdCreateInput[] | DiagnosesIcdCreateInput;
  connect?: DiagnosesIcdWhereUniqueInput[] | DiagnosesIcdWhereUniqueInput;
}

export interface DCptUpdateInput {
  category?: Int;
  codesuffix?: String;
  maxcodeinsubsection?: Int;
  mincodeinsubsection?: Int;
  sectionheader?: String;
  sectionrange?: String;
  subsectionheader?: String;
  subsectionrange?: String;
}

export interface DiagnosesIcdCreateInput {
  icd9_code?: String;
  seq_num?: Int;
}

export type CpteventWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface DrgcodeCreateManyInput {
  create?: DrgcodeCreateInput[] | DrgcodeCreateInput;
  connect?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
}

export interface CpteventUpdateInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface DrgcodeCreateInput {
  description?: String;
  drg_code: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type: String;
}

export type DCptWhereUniqueInput = AtLeastOne<{
  id: UUID;
  subsectionrange?: String;
}>;

export interface IcustayCreateManyInput {
  create?: IcustayCreateInput[] | IcustayCreateInput;
  connect?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
}

export interface DCptWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  category?: Int;
  category_not?: Int;
  category_in?: Int[] | Int;
  category_not_in?: Int[] | Int;
  category_lt?: Int;
  category_lte?: Int;
  category_gt?: Int;
  category_gte?: Int;
  codesuffix?: String;
  codesuffix_not?: String;
  codesuffix_in?: String[] | String;
  codesuffix_not_in?: String[] | String;
  codesuffix_lt?: String;
  codesuffix_lte?: String;
  codesuffix_gt?: String;
  codesuffix_gte?: String;
  codesuffix_contains?: String;
  codesuffix_not_contains?: String;
  codesuffix_starts_with?: String;
  codesuffix_not_starts_with?: String;
  codesuffix_ends_with?: String;
  codesuffix_not_ends_with?: String;
  maxcodeinsubsection?: Int;
  maxcodeinsubsection_not?: Int;
  maxcodeinsubsection_in?: Int[] | Int;
  maxcodeinsubsection_not_in?: Int[] | Int;
  maxcodeinsubsection_lt?: Int;
  maxcodeinsubsection_lte?: Int;
  maxcodeinsubsection_gt?: Int;
  maxcodeinsubsection_gte?: Int;
  mincodeinsubsection?: Int;
  mincodeinsubsection_not?: Int;
  mincodeinsubsection_in?: Int[] | Int;
  mincodeinsubsection_not_in?: Int[] | Int;
  mincodeinsubsection_lt?: Int;
  mincodeinsubsection_lte?: Int;
  mincodeinsubsection_gt?: Int;
  mincodeinsubsection_gte?: Int;
  sectionheader?: String;
  sectionheader_not?: String;
  sectionheader_in?: String[] | String;
  sectionheader_not_in?: String[] | String;
  sectionheader_lt?: String;
  sectionheader_lte?: String;
  sectionheader_gt?: String;
  sectionheader_gte?: String;
  sectionheader_contains?: String;
  sectionheader_not_contains?: String;
  sectionheader_starts_with?: String;
  sectionheader_not_starts_with?: String;
  sectionheader_ends_with?: String;
  sectionheader_not_ends_with?: String;
  sectionrange?: String;
  sectionrange_not?: String;
  sectionrange_in?: String[] | String;
  sectionrange_not_in?: String[] | String;
  sectionrange_lt?: String;
  sectionrange_lte?: String;
  sectionrange_gt?: String;
  sectionrange_gte?: String;
  sectionrange_contains?: String;
  sectionrange_not_contains?: String;
  sectionrange_starts_with?: String;
  sectionrange_not_starts_with?: String;
  sectionrange_ends_with?: String;
  sectionrange_not_ends_with?: String;
  subsectionheader?: String;
  subsectionheader_not?: String;
  subsectionheader_in?: String[] | String;
  subsectionheader_not_in?: String[] | String;
  subsectionheader_lt?: String;
  subsectionheader_lte?: String;
  subsectionheader_gt?: String;
  subsectionheader_gte?: String;
  subsectionheader_contains?: String;
  subsectionheader_not_contains?: String;
  subsectionheader_starts_with?: String;
  subsectionheader_not_starts_with?: String;
  subsectionheader_ends_with?: String;
  subsectionheader_not_ends_with?: String;
  subsectionrange?: String;
  subsectionrange_not?: String;
  subsectionrange_in?: String[] | String;
  subsectionrange_not_in?: String[] | String;
  subsectionrange_lt?: String;
  subsectionrange_lte?: String;
  subsectionrange_gt?: String;
  subsectionrange_gte?: String;
  subsectionrange_contains?: String;
  subsectionrange_not_contains?: String;
  subsectionrange_starts_with?: String;
  subsectionrange_not_starts_with?: String;
  subsectionrange_ends_with?: String;
  subsectionrange_not_ends_with?: String;
  AND?: DCptWhereInput[] | DCptWhereInput;
  OR?: DCptWhereInput[] | DCptWhereInput;
  NOT?: DCptWhereInput[] | DCptWhereInput;
}

export interface IcustayCreateInput {
  chartevents?: CharteventCreateManyInput;
  datetimeevents?: DatetimeeventCreateManyInput;
  dbsource: String;
  first_careunit: String;
  first_wardid: Int;
  icustay_id: Int;
  inputevents_cv?: InputeventsCvCreateManyInput;
  inputevents_mv?: InputeventsMvCreateManyInput;
  intime: DateTimeInput;
  last_careunit: String;
  last_wardid: Int;
  los?: Float;
  outputevents?: OutputeventCreateManyInput;
  outtime?: DateTimeInput;
  prescriptions?: PrescriptionCreateManyInput;
  procedureevents_mv?: ProcedureeventsMvCreateManyInput;
  transfers?: TransferCreateManyInput;
}

export interface Chartevents8UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface InputeventsCvCreateManyInput {
  create?: InputeventsCvCreateInput[] | InputeventsCvCreateInput;
  connect?: InputeventsCvWhereUniqueInput[] | InputeventsCvWhereUniqueInput;
}

export interface Chartevents7UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface InputeventsCvCreateInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface Chartevents7CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface InputeventsMvCreateManyInput {
  create?: InputeventsMvCreateInput[] | InputeventsMvCreateInput;
  connect?: InputeventsMvWhereUniqueInput[] | InputeventsMvWhereUniqueInput;
}

export interface Chartevents6UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface InputeventsMvCreateInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface Chartevents5UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventCreateManyInput {
  create?: OutputeventCreateInput[] | OutputeventCreateInput;
  connect?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
}

export type DIcdProcedureWhereUniqueInput = AtLeastOne<{
  id: UUID;
  icd9_code?: String;
}>;

export interface OutputeventCreateInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface DIcdProcedureWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  long_title?: String;
  long_title_not?: String;
  long_title_in?: String[] | String;
  long_title_not_in?: String[] | String;
  long_title_lt?: String;
  long_title_lte?: String;
  long_title_gt?: String;
  long_title_gte?: String;
  long_title_contains?: String;
  long_title_not_contains?: String;
  long_title_starts_with?: String;
  long_title_not_starts_with?: String;
  long_title_ends_with?: String;
  long_title_not_ends_with?: String;
  short_title?: String;
  short_title_not?: String;
  short_title_in?: String[] | String;
  short_title_not_in?: String[] | String;
  short_title_lt?: String;
  short_title_lte?: String;
  short_title_gt?: String;
  short_title_gte?: String;
  short_title_contains?: String;
  short_title_not_contains?: String;
  short_title_starts_with?: String;
  short_title_not_starts_with?: String;
  short_title_ends_with?: String;
  short_title_not_ends_with?: String;
  AND?: DIcdProcedureWhereInput[] | DIcdProcedureWhereInput;
  OR?: DIcdProcedureWhereInput[] | DIcdProcedureWhereInput;
  NOT?: DIcdProcedureWhereInput[] | DIcdProcedureWhereInput;
}

export interface PrescriptionCreateManyInput {
  create?: PrescriptionCreateInput[] | PrescriptionCreateInput;
  connect?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
}

export interface Chartevents4CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface PrescriptionCreateInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface Chartevents3CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProcedureeventsMvCreateManyInput {
  create?: ProcedureeventsMvCreateInput[] | ProcedureeventsMvCreateInput;
  connect?:
    | ProcedureeventsMvWhereUniqueInput[]
    | ProcedureeventsMvWhereUniqueInput;
}

export interface Chartevents2UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProcedureeventsMvCreateInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface Chartevents2CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface TransferCreateManyInput {
  create?: TransferCreateInput[] | TransferCreateInput;
  connect?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
}

export interface Chartevents17CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface TransferCreateInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export type DLabitemWhereUniqueInput = AtLeastOne<{
  id: UUID;
  itemid?: Int;
}>;

export interface LabeventCreateManyInput {
  create?: LabeventCreateInput[] | LabeventCreateInput;
  connect?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
}

export interface DLabitemWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  fluid?: String;
  fluid_not?: String;
  fluid_in?: String[] | String;
  fluid_not_in?: String[] | String;
  fluid_lt?: String;
  fluid_lte?: String;
  fluid_gt?: String;
  fluid_gte?: String;
  fluid_contains?: String;
  fluid_not_contains?: String;
  fluid_starts_with?: String;
  fluid_not_starts_with?: String;
  fluid_ends_with?: String;
  fluid_not_ends_with?: String;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  labevents_every?: LabeventWhereInput;
  labevents_some?: LabeventWhereInput;
  labevents_none?: LabeventWhereInput;
  loinc_code?: String;
  loinc_code_not?: String;
  loinc_code_in?: String[] | String;
  loinc_code_not_in?: String[] | String;
  loinc_code_lt?: String;
  loinc_code_lte?: String;
  loinc_code_gt?: String;
  loinc_code_gte?: String;
  loinc_code_contains?: String;
  loinc_code_not_contains?: String;
  loinc_code_starts_with?: String;
  loinc_code_not_starts_with?: String;
  loinc_code_ends_with?: String;
  loinc_code_not_ends_with?: String;
  AND?: DLabitemWhereInput[] | DLabitemWhereInput;
  OR?: DLabitemWhereInput[] | DLabitemWhereInput;
  NOT?: DLabitemWhereInput[] | DLabitemWhereInput;
}

export interface LabeventCreateInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface Chartevents15CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface MicrobiologyeventCreateManyInput {
  create?: MicrobiologyeventCreateInput[] | MicrobiologyeventCreateInput;
  connect?:
    | MicrobiologyeventWhereUniqueInput[]
    | MicrobiologyeventWhereUniqueInput;
}

export interface Chartevents14CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface MicrobiologyeventCreateInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface Chartevents13UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface NoteeventCreateManyInput {
  create?: NoteeventCreateInput[] | NoteeventCreateInput;
  connect?: NoteeventWhereUniqueInput[] | NoteeventWhereUniqueInput;
}

export interface Chartevents12UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface NoteeventCreateInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface Chartevents12CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProceduresIcdCreateManyInput {
  create?: ProceduresIcdCreateInput[] | ProceduresIcdCreateInput;
  connect?: ProceduresIcdWhereUniqueInput[] | ProceduresIcdWhereUniqueInput;
}

export interface Chartevents11CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProceduresIcdCreateInput {
  icd9_code: String;
  seq_num: Int;
}

export interface Chartevents10UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ServiceCreateManyInput {
  create?: ServiceCreateInput[] | ServiceCreateInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
}

export interface TransferSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TransferWhereInput;
  AND?: TransferSubscriptionWhereInput[] | TransferSubscriptionWhereInput;
  OR?: TransferSubscriptionWhereInput[] | TransferSubscriptionWhereInput;
  NOT?: TransferSubscriptionWhereInput[] | TransferSubscriptionWhereInput;
}

export interface ServiceCreateInput {
  curr_service?: String;
  prev_service?: String;
  transfertime: DateTimeInput;
}

export interface ProcedureeventsMvSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProcedureeventsMvWhereInput;
  AND?:
    | ProcedureeventsMvSubscriptionWhereInput[]
    | ProcedureeventsMvSubscriptionWhereInput;
  OR?:
    | ProcedureeventsMvSubscriptionWhereInput[]
    | ProcedureeventsMvSubscriptionWhereInput;
  NOT?:
    | ProcedureeventsMvSubscriptionWhereInput[]
    | ProcedureeventsMvSubscriptionWhereInput;
}

export interface AdmissionUpdateInput {
  admission_location?: String;
  admission_type?: String;
  admittime?: DateTimeInput;
  callout?: CalloutUpdateManyInput;
  chartevents?: CharteventUpdateManyInput;
  cptevents?: CpteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  deathtime?: DateTimeInput;
  diagnoses_icd?: DiagnosesIcdUpdateManyInput;
  diagnosis?: String;
  discharge_location?: String;
  dischtime?: DateTimeInput;
  drgcodes?: DrgcodeUpdateManyInput;
  edouttime?: DateTimeInput;
  edregtime?: DateTimeInput;
  ethnicity?: String;
  hadm_id?: Int;
  has_chartevents_data?: Int;
  hospital_expire_flag?: Int;
  icustays?: IcustayUpdateManyInput;
  inputevents_cv?: InputeventsCvUpdateManyInput;
  inputevents_mv?: InputeventsMvUpdateManyInput;
  insurance?: String;
  labevents?: LabeventUpdateManyInput;
  language?: String;
  marital_status?: String;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: ProcedureeventsMvUpdateManyInput;
  procedures_icd?: ProceduresIcdUpdateManyInput;
  religion?: String;
  services?: ServiceUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export interface ServiceWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  curr_service?: String;
  curr_service_not?: String;
  curr_service_in?: String[] | String;
  curr_service_not_in?: String[] | String;
  curr_service_lt?: String;
  curr_service_lte?: String;
  curr_service_gt?: String;
  curr_service_gte?: String;
  curr_service_contains?: String;
  curr_service_not_contains?: String;
  curr_service_starts_with?: String;
  curr_service_not_starts_with?: String;
  curr_service_ends_with?: String;
  curr_service_not_ends_with?: String;
  prev_service?: String;
  prev_service_not?: String;
  prev_service_in?: String[] | String;
  prev_service_not_in?: String[] | String;
  prev_service_lt?: String;
  prev_service_lte?: String;
  prev_service_gt?: String;
  prev_service_gte?: String;
  prev_service_contains?: String;
  prev_service_not_contains?: String;
  prev_service_starts_with?: String;
  prev_service_not_starts_with?: String;
  prev_service_ends_with?: String;
  prev_service_not_ends_with?: String;
  transfertime?: DateTimeInput;
  transfertime_not?: DateTimeInput;
  transfertime_in?: DateTimeInput[] | DateTimeInput;
  transfertime_not_in?: DateTimeInput[] | DateTimeInput;
  transfertime_lt?: DateTimeInput;
  transfertime_lte?: DateTimeInput;
  transfertime_gt?: DateTimeInput;
  transfertime_gte?: DateTimeInput;
  AND?: ServiceWhereInput[] | ServiceWhereInput;
  OR?: ServiceWhereInput[] | ServiceWhereInput;
  NOT?: ServiceWhereInput[] | ServiceWhereInput;
}

export interface CalloutUpdateManyInput {
  create?: CalloutCreateInput[] | CalloutCreateInput;
  update?:
    | CalloutUpdateWithWhereUniqueNestedInput[]
    | CalloutUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CalloutUpsertWithWhereUniqueNestedInput[]
    | CalloutUpsertWithWhereUniqueNestedInput;
  delete?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  connect?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  set?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  disconnect?: CalloutWhereUniqueInput[] | CalloutWhereUniqueInput;
  deleteMany?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
  updateMany?:
    | CalloutUpdateManyWithWhereNestedInput[]
    | CalloutUpdateManyWithWhereNestedInput;
}

export interface MicrobiologyeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MicrobiologyeventWhereInput;
  AND?:
    | MicrobiologyeventSubscriptionWhereInput[]
    | MicrobiologyeventSubscriptionWhereInput;
  OR?:
    | MicrobiologyeventSubscriptionWhereInput[]
    | MicrobiologyeventSubscriptionWhereInput;
  NOT?:
    | MicrobiologyeventSubscriptionWhereInput[]
    | MicrobiologyeventSubscriptionWhereInput;
}

export interface CalloutUpdateWithWhereUniqueNestedInput {
  where: CalloutWhereUniqueInput;
  data: CalloutUpdateDataInput;
}

export interface IcustaySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IcustayWhereInput;
  AND?: IcustaySubscriptionWhereInput[] | IcustaySubscriptionWhereInput;
  OR?: IcustaySubscriptionWhereInput[] | IcustaySubscriptionWhereInput;
  NOT?: IcustaySubscriptionWhereInput[] | IcustaySubscriptionWhereInput;
}

export interface CalloutUpdateDataInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface DatetimeeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DatetimeeventWhereInput;
  AND?:
    | DatetimeeventSubscriptionWhereInput[]
    | DatetimeeventSubscriptionWhereInput;
  OR?:
    | DatetimeeventSubscriptionWhereInput[]
    | DatetimeeventSubscriptionWhereInput;
  NOT?:
    | DatetimeeventSubscriptionWhereInput[]
    | DatetimeeventSubscriptionWhereInput;
}

export interface CalloutUpsertWithWhereUniqueNestedInput {
  where: CalloutWhereUniqueInput;
  update: CalloutUpdateDataInput;
  create: CalloutCreateInput;
}

export interface CaregiverWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  cgid?: Int;
  cgid_not?: Int;
  cgid_in?: Int[] | Int;
  cgid_not_in?: Int[] | Int;
  cgid_lt?: Int;
  cgid_lte?: Int;
  cgid_gt?: Int;
  cgid_gte?: Int;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  inputevents_cv_every?: InputeventsCvWhereInput;
  inputevents_cv_some?: InputeventsCvWhereInput;
  inputevents_cv_none?: InputeventsCvWhereInput;
  inputevents_mv_every?: InputeventsMvWhereInput;
  inputevents_mv_some?: InputeventsMvWhereInput;
  inputevents_mv_none?: InputeventsMvWhereInput;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  noteevents_every?: NoteeventWhereInput;
  noteevents_some?: NoteeventWhereInput;
  noteevents_none?: NoteeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  procedureevents_mv_every?: ProcedureeventsMvWhereInput;
  procedureevents_mv_some?: ProcedureeventsMvWhereInput;
  procedureevents_mv_none?: ProcedureeventsMvWhereInput;
  AND?: CaregiverWhereInput[] | CaregiverWhereInput;
  OR?: CaregiverWhereInput[] | CaregiverWhereInput;
  NOT?: CaregiverWhereInput[] | CaregiverWhereInput;
}

export interface CalloutScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  acknowledge_status?: String;
  acknowledge_status_not?: String;
  acknowledge_status_in?: String[] | String;
  acknowledge_status_not_in?: String[] | String;
  acknowledge_status_lt?: String;
  acknowledge_status_lte?: String;
  acknowledge_status_gt?: String;
  acknowledge_status_gte?: String;
  acknowledge_status_contains?: String;
  acknowledge_status_not_contains?: String;
  acknowledge_status_starts_with?: String;
  acknowledge_status_not_starts_with?: String;
  acknowledge_status_ends_with?: String;
  acknowledge_status_not_ends_with?: String;
  acknowledgetime?: DateTimeInput;
  acknowledgetime_not?: DateTimeInput;
  acknowledgetime_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_not_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_lt?: DateTimeInput;
  acknowledgetime_lte?: DateTimeInput;
  acknowledgetime_gt?: DateTimeInput;
  acknowledgetime_gte?: DateTimeInput;
  callout_outcome?: String;
  callout_outcome_not?: String;
  callout_outcome_in?: String[] | String;
  callout_outcome_not_in?: String[] | String;
  callout_outcome_lt?: String;
  callout_outcome_lte?: String;
  callout_outcome_gt?: String;
  callout_outcome_gte?: String;
  callout_outcome_contains?: String;
  callout_outcome_not_contains?: String;
  callout_outcome_starts_with?: String;
  callout_outcome_not_starts_with?: String;
  callout_outcome_ends_with?: String;
  callout_outcome_not_ends_with?: String;
  callout_service?: String;
  callout_service_not?: String;
  callout_service_in?: String[] | String;
  callout_service_not_in?: String[] | String;
  callout_service_lt?: String;
  callout_service_lte?: String;
  callout_service_gt?: String;
  callout_service_gte?: String;
  callout_service_contains?: String;
  callout_service_not_contains?: String;
  callout_service_starts_with?: String;
  callout_service_not_starts_with?: String;
  callout_service_ends_with?: String;
  callout_service_not_ends_with?: String;
  callout_status?: String;
  callout_status_not?: String;
  callout_status_in?: String[] | String;
  callout_status_not_in?: String[] | String;
  callout_status_lt?: String;
  callout_status_lte?: String;
  callout_status_gt?: String;
  callout_status_gte?: String;
  callout_status_contains?: String;
  callout_status_not_contains?: String;
  callout_status_starts_with?: String;
  callout_status_not_starts_with?: String;
  callout_status_ends_with?: String;
  callout_status_not_ends_with?: String;
  callout_wardid?: Int;
  callout_wardid_not?: Int;
  callout_wardid_in?: Int[] | Int;
  callout_wardid_not_in?: Int[] | Int;
  callout_wardid_lt?: Int;
  callout_wardid_lte?: Int;
  callout_wardid_gt?: Int;
  callout_wardid_gte?: Int;
  createtime?: DateTimeInput;
  createtime_not?: DateTimeInput;
  createtime_in?: DateTimeInput[] | DateTimeInput;
  createtime_not_in?: DateTimeInput[] | DateTimeInput;
  createtime_lt?: DateTimeInput;
  createtime_lte?: DateTimeInput;
  createtime_gt?: DateTimeInput;
  createtime_gte?: DateTimeInput;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  currentreservationtime?: DateTimeInput;
  currentreservationtime_not?: DateTimeInput;
  currentreservationtime_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_lt?: DateTimeInput;
  currentreservationtime_lte?: DateTimeInput;
  currentreservationtime_gt?: DateTimeInput;
  currentreservationtime_gte?: DateTimeInput;
  discharge_wardid?: Int;
  discharge_wardid_not?: Int;
  discharge_wardid_in?: Int[] | Int;
  discharge_wardid_not_in?: Int[] | Int;
  discharge_wardid_lt?: Int;
  discharge_wardid_lte?: Int;
  discharge_wardid_gt?: Int;
  discharge_wardid_gte?: Int;
  firstreservationtime?: DateTimeInput;
  firstreservationtime_not?: DateTimeInput;
  firstreservationtime_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_lt?: DateTimeInput;
  firstreservationtime_lte?: DateTimeInput;
  firstreservationtime_gt?: DateTimeInput;
  firstreservationtime_gte?: DateTimeInput;
  outcometime?: DateTimeInput;
  outcometime_not?: DateTimeInput;
  outcometime_in?: DateTimeInput[] | DateTimeInput;
  outcometime_not_in?: DateTimeInput[] | DateTimeInput;
  outcometime_lt?: DateTimeInput;
  outcometime_lte?: DateTimeInput;
  outcometime_gt?: DateTimeInput;
  outcometime_gte?: DateTimeInput;
  request_cdiff?: Int;
  request_cdiff_not?: Int;
  request_cdiff_in?: Int[] | Int;
  request_cdiff_not_in?: Int[] | Int;
  request_cdiff_lt?: Int;
  request_cdiff_lte?: Int;
  request_cdiff_gt?: Int;
  request_cdiff_gte?: Int;
  request_mrsa?: Int;
  request_mrsa_not?: Int;
  request_mrsa_in?: Int[] | Int;
  request_mrsa_not_in?: Int[] | Int;
  request_mrsa_lt?: Int;
  request_mrsa_lte?: Int;
  request_mrsa_gt?: Int;
  request_mrsa_gte?: Int;
  request_resp?: Int;
  request_resp_not?: Int;
  request_resp_in?: Int[] | Int;
  request_resp_not_in?: Int[] | Int;
  request_resp_lt?: Int;
  request_resp_lte?: Int;
  request_resp_gt?: Int;
  request_resp_gte?: Int;
  request_tele?: Int;
  request_tele_not?: Int;
  request_tele_in?: Int[] | Int;
  request_tele_not_in?: Int[] | Int;
  request_tele_lt?: Int;
  request_tele_lte?: Int;
  request_tele_gt?: Int;
  request_tele_gte?: Int;
  request_vre?: Int;
  request_vre_not?: Int;
  request_vre_in?: Int[] | Int;
  request_vre_not_in?: Int[] | Int;
  request_vre_lt?: Int;
  request_vre_lte?: Int;
  request_vre_gt?: Int;
  request_vre_gte?: Int;
  submit_careunit?: String;
  submit_careunit_not?: String;
  submit_careunit_in?: String[] | String;
  submit_careunit_not_in?: String[] | String;
  submit_careunit_lt?: String;
  submit_careunit_lte?: String;
  submit_careunit_gt?: String;
  submit_careunit_gte?: String;
  submit_careunit_contains?: String;
  submit_careunit_not_contains?: String;
  submit_careunit_starts_with?: String;
  submit_careunit_not_starts_with?: String;
  submit_careunit_ends_with?: String;
  submit_careunit_not_ends_with?: String;
  submit_wardid?: Int;
  submit_wardid_not?: Int;
  submit_wardid_in?: Int[] | Int;
  submit_wardid_not_in?: Int[] | Int;
  submit_wardid_lt?: Int;
  submit_wardid_lte?: Int;
  submit_wardid_gt?: Int;
  submit_wardid_gte?: Int;
  updatetime?: DateTimeInput;
  updatetime_not?: DateTimeInput;
  updatetime_in?: DateTimeInput[] | DateTimeInput;
  updatetime_not_in?: DateTimeInput[] | DateTimeInput;
  updatetime_lt?: DateTimeInput;
  updatetime_lte?: DateTimeInput;
  updatetime_gt?: DateTimeInput;
  updatetime_gte?: DateTimeInput;
  AND?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
  OR?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
  NOT?: CalloutScalarWhereInput[] | CalloutScalarWhereInput;
}

export interface CpteventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CpteventWhereInput;
  AND?: CpteventSubscriptionWhereInput[] | CpteventSubscriptionWhereInput;
  OR?: CpteventSubscriptionWhereInput[] | CpteventSubscriptionWhereInput;
  NOT?: CpteventSubscriptionWhereInput[] | CpteventSubscriptionWhereInput;
}

export interface CalloutUpdateManyWithWhereNestedInput {
  where: CalloutScalarWhereInput;
  data: CalloutUpdateManyDataInput;
}

export interface Chartevents7SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents7WhereInput;
  AND?:
    | Chartevents7SubscriptionWhereInput[]
    | Chartevents7SubscriptionWhereInput;
  OR?:
    | Chartevents7SubscriptionWhereInput[]
    | Chartevents7SubscriptionWhereInput;
  NOT?:
    | Chartevents7SubscriptionWhereInput[]
    | Chartevents7SubscriptionWhereInput;
}

export interface CalloutUpdateManyDataInput {
  acknowledge_status?: String;
  acknowledgetime?: DateTimeInput;
  callout_outcome?: String;
  callout_service?: String;
  callout_status?: String;
  callout_wardid?: Int;
  createtime?: DateTimeInput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeInput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeInput;
  outcometime?: DateTimeInput;
  request_cdiff?: Int;
  request_mrsa?: Int;
  request_resp?: Int;
  request_tele?: Int;
  request_vre?: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime?: DateTimeInput;
}

export interface Chartevents5SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents5WhereInput;
  AND?:
    | Chartevents5SubscriptionWhereInput[]
    | Chartevents5SubscriptionWhereInput;
  OR?:
    | Chartevents5SubscriptionWhereInput[]
    | Chartevents5SubscriptionWhereInput;
  NOT?:
    | Chartevents5SubscriptionWhereInput[]
    | Chartevents5SubscriptionWhereInput;
}

export interface CharteventUpdateManyInput {
  create?: CharteventCreateInput[] | CharteventCreateInput;
  update?:
    | CharteventUpdateWithWhereUniqueNestedInput[]
    | CharteventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CharteventUpsertWithWhereUniqueNestedInput[]
    | CharteventUpsertWithWhereUniqueNestedInput;
  delete?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  connect?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  set?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  disconnect?: CharteventWhereUniqueInput[] | CharteventWhereUniqueInput;
  deleteMany?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
  updateMany?:
    | CharteventUpdateManyWithWhereNestedInput[]
    | CharteventUpdateManyWithWhereNestedInput;
}

export interface ProcedureeventsMvWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  locationcategory?: String;
  locationcategory_not?: String;
  locationcategory_in?: String[] | String;
  locationcategory_not_in?: String[] | String;
  locationcategory_lt?: String;
  locationcategory_lte?: String;
  locationcategory_gt?: String;
  locationcategory_gte?: String;
  locationcategory_contains?: String;
  locationcategory_not_contains?: String;
  locationcategory_starts_with?: String;
  locationcategory_not_starts_with?: String;
  locationcategory_ends_with?: String;
  locationcategory_not_ends_with?: String;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: ProcedureeventsMvWhereInput[] | ProcedureeventsMvWhereInput;
  OR?: ProcedureeventsMvWhereInput[] | ProcedureeventsMvWhereInput;
  NOT?: ProcedureeventsMvWhereInput[] | ProcedureeventsMvWhereInput;
}

export interface CharteventUpdateWithWhereUniqueNestedInput {
  where: CharteventWhereUniqueInput;
  data: CharteventUpdateDataInput;
}

export interface Chartevents15SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents15WhereInput;
  AND?:
    | Chartevents15SubscriptionWhereInput[]
    | Chartevents15SubscriptionWhereInput;
  OR?:
    | Chartevents15SubscriptionWhereInput[]
    | Chartevents15SubscriptionWhereInput;
  NOT?:
    | Chartevents15SubscriptionWhereInput[]
    | Chartevents15SubscriptionWhereInput;
}

export interface CharteventUpdateDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents13SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents13WhereInput;
  AND?:
    | Chartevents13SubscriptionWhereInput[]
    | Chartevents13SubscriptionWhereInput;
  OR?:
    | Chartevents13SubscriptionWhereInput[]
    | Chartevents13SubscriptionWhereInput;
  NOT?:
    | Chartevents13SubscriptionWhereInput[]
    | Chartevents13SubscriptionWhereInput;
}

export interface CharteventUpsertWithWhereUniqueNestedInput {
  where: CharteventWhereUniqueInput;
  update: CharteventUpdateDataInput;
  create: CharteventCreateInput;
}

export interface OutputeventWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  iserror?: Int;
  iserror_not?: Int;
  iserror_in?: Int[] | Int;
  iserror_not_in?: Int[] | Int;
  iserror_lt?: Int;
  iserror_lte?: Int;
  iserror_gt?: Int;
  iserror_gte?: Int;
  newbottle?: String;
  newbottle_not?: String;
  newbottle_in?: String[] | String;
  newbottle_not_in?: String[] | String;
  newbottle_lt?: String;
  newbottle_lte?: String;
  newbottle_gt?: String;
  newbottle_gte?: String;
  newbottle_contains?: String;
  newbottle_not_contains?: String;
  newbottle_starts_with?: String;
  newbottle_not_starts_with?: String;
  newbottle_ends_with?: String;
  newbottle_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: OutputeventWhereInput[] | OutputeventWhereInput;
  OR?: OutputeventWhereInput[] | OutputeventWhereInput;
  NOT?: OutputeventWhereInput[] | OutputeventWhereInput;
}

export interface CharteventScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
  OR?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
  NOT?: CharteventScalarWhereInput[] | CharteventScalarWhereInput;
}

export interface CaregiverSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CaregiverWhereInput;
  AND?: CaregiverSubscriptionWhereInput[] | CaregiverSubscriptionWhereInput;
  OR?: CaregiverSubscriptionWhereInput[] | CaregiverSubscriptionWhereInput;
  NOT?: CaregiverSubscriptionWhereInput[] | CaregiverSubscriptionWhereInput;
}

export interface CharteventUpdateManyWithWhereNestedInput {
  where: CharteventScalarWhereInput;
  data: CharteventUpdateManyDataInput;
}

export interface AdmissionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AdmissionWhereInput;
  AND?: AdmissionSubscriptionWhereInput[] | AdmissionSubscriptionWhereInput;
  OR?: AdmissionSubscriptionWhereInput[] | AdmissionSubscriptionWhereInput;
  NOT?: AdmissionSubscriptionWhereInput[] | AdmissionSubscriptionWhereInput;
}

export interface LabeventUpdateWithWhereUniqueNestedInput {
  where: LabeventWhereUniqueInput;
  data: LabeventUpdateDataInput;
}

export interface InputeventsCvWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  newbottle?: Int;
  newbottle_not?: Int;
  newbottle_in?: Int[] | Int;
  newbottle_not_in?: Int[] | Int;
  newbottle_lt?: Int;
  newbottle_lte?: Int;
  newbottle_gt?: Int;
  newbottle_gte?: Int;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalamountuom?: String;
  originalamountuom_not?: String;
  originalamountuom_in?: String[] | String;
  originalamountuom_not_in?: String[] | String;
  originalamountuom_lt?: String;
  originalamountuom_lte?: String;
  originalamountuom_gt?: String;
  originalamountuom_gte?: String;
  originalamountuom_contains?: String;
  originalamountuom_not_contains?: String;
  originalamountuom_starts_with?: String;
  originalamountuom_not_starts_with?: String;
  originalamountuom_ends_with?: String;
  originalamountuom_not_ends_with?: String;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  originalrateuom?: String;
  originalrateuom_not?: String;
  originalrateuom_in?: String[] | String;
  originalrateuom_not_in?: String[] | String;
  originalrateuom_lt?: String;
  originalrateuom_lte?: String;
  originalrateuom_gt?: String;
  originalrateuom_gte?: String;
  originalrateuom_contains?: String;
  originalrateuom_not_contains?: String;
  originalrateuom_starts_with?: String;
  originalrateuom_not_starts_with?: String;
  originalrateuom_ends_with?: String;
  originalrateuom_not_ends_with?: String;
  originalroute?: String;
  originalroute_not?: String;
  originalroute_in?: String[] | String;
  originalroute_not_in?: String[] | String;
  originalroute_lt?: String;
  originalroute_lte?: String;
  originalroute_gt?: String;
  originalroute_gte?: String;
  originalroute_contains?: String;
  originalroute_not_contains?: String;
  originalroute_starts_with?: String;
  originalroute_not_starts_with?: String;
  originalroute_ends_with?: String;
  originalroute_not_ends_with?: String;
  originalsite?: String;
  originalsite_not?: String;
  originalsite_in?: String[] | String;
  originalsite_not_in?: String[] | String;
  originalsite_lt?: String;
  originalsite_lte?: String;
  originalsite_gt?: String;
  originalsite_gte?: String;
  originalsite_contains?: String;
  originalsite_not_contains?: String;
  originalsite_starts_with?: String;
  originalsite_not_starts_with?: String;
  originalsite_ends_with?: String;
  originalsite_not_ends_with?: String;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  AND?: InputeventsCvWhereInput[] | InputeventsCvWhereInput;
  OR?: InputeventsCvWhereInput[] | InputeventsCvWhereInput;
  NOT?: InputeventsCvWhereInput[] | InputeventsCvWhereInput;
}

export interface CpteventUpdateManyInput {
  create?: CpteventCreateInput[] | CpteventCreateInput;
  update?:
    | CpteventUpdateWithWhereUniqueNestedInput[]
    | CpteventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CpteventUpsertWithWhereUniqueNestedInput[]
    | CpteventUpsertWithWhereUniqueNestedInput;
  delete?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  connect?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  set?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  disconnect?: CpteventWhereUniqueInput[] | CpteventWhereUniqueInput;
  deleteMany?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
  updateMany?:
    | CpteventUpdateManyWithWhereNestedInput[]
    | CpteventUpdateManyWithWhereNestedInput;
}

export interface ProceduresIcdUpdateInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface CpteventUpdateWithWhereUniqueNestedInput {
  where: CpteventWhereUniqueInput;
  data: CpteventUpdateDataInput;
}

export interface ProcedureeventsMvUpdateInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface CpteventUpdateDataInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface PatientUpdateManyMutationInput {
  dob?: DateTimeInput;
  dod?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  expire_flag?: Int;
  gender?: String;
  subject_id?: Int;
}

export interface CpteventUpsertWithWhereUniqueNestedInput {
  where: CpteventWhereUniqueInput;
  update: CpteventUpdateDataInput;
  create: CpteventCreateInput;
}

export interface AdmissionUpsertWithWhereUniqueNestedInput {
  where: AdmissionWhereUniqueInput;
  update: AdmissionUpdateDataInput;
  create: AdmissionCreateInput;
}

export interface CpteventScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  costcenter?: String;
  costcenter_not?: String;
  costcenter_in?: String[] | String;
  costcenter_not_in?: String[] | String;
  costcenter_lt?: String;
  costcenter_lte?: String;
  costcenter_gt?: String;
  costcenter_gte?: String;
  costcenter_contains?: String;
  costcenter_not_contains?: String;
  costcenter_starts_with?: String;
  costcenter_not_starts_with?: String;
  costcenter_ends_with?: String;
  costcenter_not_ends_with?: String;
  cpt_cd?: String;
  cpt_cd_not?: String;
  cpt_cd_in?: String[] | String;
  cpt_cd_not_in?: String[] | String;
  cpt_cd_lt?: String;
  cpt_cd_lte?: String;
  cpt_cd_gt?: String;
  cpt_cd_gte?: String;
  cpt_cd_contains?: String;
  cpt_cd_not_contains?: String;
  cpt_cd_starts_with?: String;
  cpt_cd_not_starts_with?: String;
  cpt_cd_ends_with?: String;
  cpt_cd_not_ends_with?: String;
  cpt_number?: Int;
  cpt_number_not?: Int;
  cpt_number_in?: Int[] | Int;
  cpt_number_not_in?: Int[] | Int;
  cpt_number_lt?: Int;
  cpt_number_lte?: Int;
  cpt_number_gt?: Int;
  cpt_number_gte?: Int;
  cpt_suffix?: String;
  cpt_suffix_not?: String;
  cpt_suffix_in?: String[] | String;
  cpt_suffix_not_in?: String[] | String;
  cpt_suffix_lt?: String;
  cpt_suffix_lte?: String;
  cpt_suffix_gt?: String;
  cpt_suffix_gte?: String;
  cpt_suffix_contains?: String;
  cpt_suffix_not_contains?: String;
  cpt_suffix_starts_with?: String;
  cpt_suffix_not_starts_with?: String;
  cpt_suffix_ends_with?: String;
  cpt_suffix_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  sectionheader?: String;
  sectionheader_not?: String;
  sectionheader_in?: String[] | String;
  sectionheader_not_in?: String[] | String;
  sectionheader_lt?: String;
  sectionheader_lte?: String;
  sectionheader_gt?: String;
  sectionheader_gte?: String;
  sectionheader_contains?: String;
  sectionheader_not_contains?: String;
  sectionheader_starts_with?: String;
  sectionheader_not_starts_with?: String;
  sectionheader_ends_with?: String;
  sectionheader_not_ends_with?: String;
  subsectionheader?: String;
  subsectionheader_not?: String;
  subsectionheader_in?: String[] | String;
  subsectionheader_not_in?: String[] | String;
  subsectionheader_lt?: String;
  subsectionheader_lte?: String;
  subsectionheader_gt?: String;
  subsectionheader_gte?: String;
  subsectionheader_contains?: String;
  subsectionheader_not_contains?: String;
  subsectionheader_starts_with?: String;
  subsectionheader_not_starts_with?: String;
  subsectionheader_ends_with?: String;
  subsectionheader_not_ends_with?: String;
  ticket_id_seq?: Int;
  ticket_id_seq_not?: Int;
  ticket_id_seq_in?: Int[] | Int;
  ticket_id_seq_not_in?: Int[] | Int;
  ticket_id_seq_lt?: Int;
  ticket_id_seq_lte?: Int;
  ticket_id_seq_gt?: Int;
  ticket_id_seq_gte?: Int;
  AND?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
  OR?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
  NOT?: CpteventScalarWhereInput[] | CpteventScalarWhereInput;
}

export interface AdmissionUpdateWithWhereUniqueNestedInput {
  where: AdmissionWhereUniqueInput;
  data: AdmissionUpdateDataInput;
}

export interface CpteventUpdateManyWithWhereNestedInput {
  where: CpteventScalarWhereInput;
  data: CpteventUpdateManyDataInput;
}

export interface AdmissionCreateManyInput {
  create?: AdmissionCreateInput[] | AdmissionCreateInput;
  connect?: AdmissionWhereUniqueInput[] | AdmissionWhereUniqueInput;
}

export interface CpteventUpdateManyDataInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface NoteeventUpdateManyMutationInput {
  category?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeInput;
  text?: String;
}

export interface DatetimeeventUpdateManyInput {
  create?: DatetimeeventCreateInput[] | DatetimeeventCreateInput;
  update?:
    | DatetimeeventUpdateWithWhereUniqueNestedInput[]
    | DatetimeeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DatetimeeventUpsertWithWhereUniqueNestedInput[]
    | DatetimeeventUpsertWithWhereUniqueNestedInput;
  delete?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  connect?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  set?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  disconnect?: DatetimeeventWhereUniqueInput[] | DatetimeeventWhereUniqueInput;
  deleteMany?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
  updateMany?:
    | DatetimeeventUpdateManyWithWhereNestedInput[]
    | DatetimeeventUpdateManyWithWhereNestedInput;
}

export interface MicrobiologyeventUpdateManyMutationInput {
  ab_name?: String;
  chartdate?: DateTimeInput;
  charttime?: DateTimeInput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface DatetimeeventUpdateWithWhereUniqueNestedInput {
  where: DatetimeeventWhereUniqueInput;
  data: DatetimeeventUpdateDataInput;
}

export interface LabeventUpdateInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface DatetimeeventUpdateDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface InputeventsCvUpdateInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface DatetimeeventUpsertWithWhereUniqueNestedInput {
  where: DatetimeeventWhereUniqueInput;
  update: DatetimeeventUpdateDataInput;
  create: DatetimeeventCreateInput;
}

export interface IcustayUpdateInput {
  chartevents?: CharteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  inputevents_cv?: InputeventsCvUpdateManyInput;
  inputevents_mv?: InputeventsMvUpdateManyInput;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outputevents?: OutputeventUpdateManyInput;
  outtime?: DateTimeInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: ProcedureeventsMvUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export interface DatetimeeventScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: DateTimeInput;
  value_not?: DateTimeInput;
  value_in?: DateTimeInput[] | DateTimeInput;
  value_not_in?: DateTimeInput[] | DateTimeInput;
  value_lt?: DateTimeInput;
  value_lte?: DateTimeInput;
  value_gt?: DateTimeInput;
  value_gte?: DateTimeInput;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
  OR?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
  NOT?: DatetimeeventScalarWhereInput[] | DatetimeeventScalarWhereInput;
}

export interface DiagnosesIcdUpdateManyMutationInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface DatetimeeventUpdateManyWithWhereNestedInput {
  where: DatetimeeventScalarWhereInput;
  data: DatetimeeventUpdateManyDataInput;
}

export interface DLabitemUpdateManyMutationInput {
  category?: String;
  fluid?: String;
  itemid?: Int;
  label?: String;
  loinc_code?: String;
}

export interface DatetimeeventUpdateManyDataInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface DLabitemCreateInput {
  category: String;
  fluid: String;
  itemid: Int;
  label: String;
  labevents?: LabeventCreateManyInput;
  loinc_code?: String;
}

export interface DiagnosesIcdUpdateManyInput {
  create?: DiagnosesIcdCreateInput[] | DiagnosesIcdCreateInput;
  update?:
    | DiagnosesIcdUpdateWithWhereUniqueNestedInput[]
    | DiagnosesIcdUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DiagnosesIcdUpsertWithWhereUniqueNestedInput[]
    | DiagnosesIcdUpsertWithWhereUniqueNestedInput;
  delete?: DiagnosesIcdWhereUniqueInput[] | DiagnosesIcdWhereUniqueInput;
  connect?: DiagnosesIcdWhereUniqueInput[] | DiagnosesIcdWhereUniqueInput;
  set?: DiagnosesIcdWhereUniqueInput[] | DiagnosesIcdWhereUniqueInput;
  disconnect?: DiagnosesIcdWhereUniqueInput[] | DiagnosesIcdWhereUniqueInput;
  deleteMany?: DiagnosesIcdScalarWhereInput[] | DiagnosesIcdScalarWhereInput;
  updateMany?:
    | DiagnosesIcdUpdateManyWithWhereNestedInput[]
    | DiagnosesIcdUpdateManyWithWhereNestedInput;
}

export interface DItemCreateInput {
  abbreviation?: String;
  category?: String;
  chartevents?: CharteventCreateManyInput;
  conceptid?: Int;
  datetimeevents?: DatetimeeventCreateManyInput;
  dbsource?: String;
  inputevents_mv?: InputeventsMvCreateManyInput;
  itemid: Int;
  label?: String;
  linksto?: String;
  microbiologyevents?: MicrobiologyeventCreateManyInput;
  outputevents?: OutputeventCreateManyInput;
  param_type?: String;
  procedureevents_mv?: ProcedureeventsMvCreateManyInput;
  unitname?: String;
}

export interface DiagnosesIcdUpdateWithWhereUniqueNestedInput {
  where: DiagnosesIcdWhereUniqueInput;
  data: DiagnosesIcdUpdateDataInput;
}

export interface DIcdDiagnosisUpdateManyMutationInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface DiagnosesIcdUpdateDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface DCptUpdateManyMutationInput {
  category?: Int;
  codesuffix?: String;
  maxcodeinsubsection?: Int;
  mincodeinsubsection?: Int;
  sectionheader?: String;
  sectionrange?: String;
  subsectionheader?: String;
  subsectionrange?: String;
}

export interface DiagnosesIcdUpsertWithWhereUniqueNestedInput {
  where: DiagnosesIcdWhereUniqueInput;
  update: DiagnosesIcdUpdateDataInput;
  create: DiagnosesIcdCreateInput;
}

export interface CpteventUpdateManyMutationInput {
  chartdate?: DateTimeInput;
  costcenter?: String;
  cpt_cd?: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface DiagnosesIcdScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: DiagnosesIcdScalarWhereInput[] | DiagnosesIcdScalarWhereInput;
  OR?: DiagnosesIcdScalarWhereInput[] | DiagnosesIcdScalarWhereInput;
  NOT?: DiagnosesIcdScalarWhereInput[] | DiagnosesIcdScalarWhereInput;
}

export interface Chartevents9CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DiagnosesIcdUpdateManyWithWhereNestedInput {
  where: DiagnosesIcdScalarWhereInput;
  data: DiagnosesIcdUpdateManyDataInput;
}

export interface Chartevents8CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DiagnosesIcdUpdateManyDataInput {
  icd9_code?: String;
  seq_num?: Int;
}

export interface DIcdDiagnosisWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  long_title?: String;
  long_title_not?: String;
  long_title_in?: String[] | String;
  long_title_not_in?: String[] | String;
  long_title_lt?: String;
  long_title_lte?: String;
  long_title_gt?: String;
  long_title_gte?: String;
  long_title_contains?: String;
  long_title_not_contains?: String;
  long_title_starts_with?: String;
  long_title_not_starts_with?: String;
  long_title_ends_with?: String;
  long_title_not_ends_with?: String;
  short_title?: String;
  short_title_not?: String;
  short_title_in?: String[] | String;
  short_title_not_in?: String[] | String;
  short_title_lt?: String;
  short_title_lte?: String;
  short_title_gt?: String;
  short_title_gte?: String;
  short_title_contains?: String;
  short_title_not_contains?: String;
  short_title_starts_with?: String;
  short_title_not_starts_with?: String;
  short_title_ends_with?: String;
  short_title_not_ends_with?: String;
  AND?: DIcdDiagnosisWhereInput[] | DIcdDiagnosisWhereInput;
  OR?: DIcdDiagnosisWhereInput[] | DIcdDiagnosisWhereInput;
  NOT?: DIcdDiagnosisWhereInput[] | DIcdDiagnosisWhereInput;
}

export interface DrgcodeUpdateManyInput {
  create?: DrgcodeCreateInput[] | DrgcodeCreateInput;
  update?:
    | DrgcodeUpdateWithWhereUniqueNestedInput[]
    | DrgcodeUpdateWithWhereUniqueNestedInput;
  upsert?:
    | DrgcodeUpsertWithWhereUniqueNestedInput[]
    | DrgcodeUpsertWithWhereUniqueNestedInput;
  delete?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  connect?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  set?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  disconnect?: DrgcodeWhereUniqueInput[] | DrgcodeWhereUniqueInput;
  deleteMany?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
  updateMany?:
    | DrgcodeUpdateManyWithWhereNestedInput[]
    | DrgcodeUpdateManyWithWhereNestedInput;
}

export interface Chartevents5CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface LabeventUpdateManyInput {
  create?: LabeventCreateInput[] | LabeventCreateInput;
  update?:
    | LabeventUpdateWithWhereUniqueNestedInput[]
    | LabeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | LabeventUpsertWithWhereUniqueNestedInput[]
    | LabeventUpsertWithWhereUniqueNestedInput;
  delete?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  connect?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  set?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  disconnect?: LabeventWhereUniqueInput[] | LabeventWhereUniqueInput;
  deleteMany?: LabeventScalarWhereInput[] | LabeventScalarWhereInput;
  updateMany?:
    | LabeventUpdateManyWithWhereNestedInput[]
    | LabeventUpdateManyWithWhereNestedInput;
}

export interface CalloutWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  acknowledge_status?: String;
  acknowledge_status_not?: String;
  acknowledge_status_in?: String[] | String;
  acknowledge_status_not_in?: String[] | String;
  acknowledge_status_lt?: String;
  acknowledge_status_lte?: String;
  acknowledge_status_gt?: String;
  acknowledge_status_gte?: String;
  acknowledge_status_contains?: String;
  acknowledge_status_not_contains?: String;
  acknowledge_status_starts_with?: String;
  acknowledge_status_not_starts_with?: String;
  acknowledge_status_ends_with?: String;
  acknowledge_status_not_ends_with?: String;
  acknowledgetime?: DateTimeInput;
  acknowledgetime_not?: DateTimeInput;
  acknowledgetime_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_not_in?: DateTimeInput[] | DateTimeInput;
  acknowledgetime_lt?: DateTimeInput;
  acknowledgetime_lte?: DateTimeInput;
  acknowledgetime_gt?: DateTimeInput;
  acknowledgetime_gte?: DateTimeInput;
  callout_outcome?: String;
  callout_outcome_not?: String;
  callout_outcome_in?: String[] | String;
  callout_outcome_not_in?: String[] | String;
  callout_outcome_lt?: String;
  callout_outcome_lte?: String;
  callout_outcome_gt?: String;
  callout_outcome_gte?: String;
  callout_outcome_contains?: String;
  callout_outcome_not_contains?: String;
  callout_outcome_starts_with?: String;
  callout_outcome_not_starts_with?: String;
  callout_outcome_ends_with?: String;
  callout_outcome_not_ends_with?: String;
  callout_service?: String;
  callout_service_not?: String;
  callout_service_in?: String[] | String;
  callout_service_not_in?: String[] | String;
  callout_service_lt?: String;
  callout_service_lte?: String;
  callout_service_gt?: String;
  callout_service_gte?: String;
  callout_service_contains?: String;
  callout_service_not_contains?: String;
  callout_service_starts_with?: String;
  callout_service_not_starts_with?: String;
  callout_service_ends_with?: String;
  callout_service_not_ends_with?: String;
  callout_status?: String;
  callout_status_not?: String;
  callout_status_in?: String[] | String;
  callout_status_not_in?: String[] | String;
  callout_status_lt?: String;
  callout_status_lte?: String;
  callout_status_gt?: String;
  callout_status_gte?: String;
  callout_status_contains?: String;
  callout_status_not_contains?: String;
  callout_status_starts_with?: String;
  callout_status_not_starts_with?: String;
  callout_status_ends_with?: String;
  callout_status_not_ends_with?: String;
  callout_wardid?: Int;
  callout_wardid_not?: Int;
  callout_wardid_in?: Int[] | Int;
  callout_wardid_not_in?: Int[] | Int;
  callout_wardid_lt?: Int;
  callout_wardid_lte?: Int;
  callout_wardid_gt?: Int;
  callout_wardid_gte?: Int;
  createtime?: DateTimeInput;
  createtime_not?: DateTimeInput;
  createtime_in?: DateTimeInput[] | DateTimeInput;
  createtime_not_in?: DateTimeInput[] | DateTimeInput;
  createtime_lt?: DateTimeInput;
  createtime_lte?: DateTimeInput;
  createtime_gt?: DateTimeInput;
  createtime_gte?: DateTimeInput;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  currentreservationtime?: DateTimeInput;
  currentreservationtime_not?: DateTimeInput;
  currentreservationtime_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  currentreservationtime_lt?: DateTimeInput;
  currentreservationtime_lte?: DateTimeInput;
  currentreservationtime_gt?: DateTimeInput;
  currentreservationtime_gte?: DateTimeInput;
  discharge_wardid?: Int;
  discharge_wardid_not?: Int;
  discharge_wardid_in?: Int[] | Int;
  discharge_wardid_not_in?: Int[] | Int;
  discharge_wardid_lt?: Int;
  discharge_wardid_lte?: Int;
  discharge_wardid_gt?: Int;
  discharge_wardid_gte?: Int;
  firstreservationtime?: DateTimeInput;
  firstreservationtime_not?: DateTimeInput;
  firstreservationtime_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_not_in?: DateTimeInput[] | DateTimeInput;
  firstreservationtime_lt?: DateTimeInput;
  firstreservationtime_lte?: DateTimeInput;
  firstreservationtime_gt?: DateTimeInput;
  firstreservationtime_gte?: DateTimeInput;
  outcometime?: DateTimeInput;
  outcometime_not?: DateTimeInput;
  outcometime_in?: DateTimeInput[] | DateTimeInput;
  outcometime_not_in?: DateTimeInput[] | DateTimeInput;
  outcometime_lt?: DateTimeInput;
  outcometime_lte?: DateTimeInput;
  outcometime_gt?: DateTimeInput;
  outcometime_gte?: DateTimeInput;
  request_cdiff?: Int;
  request_cdiff_not?: Int;
  request_cdiff_in?: Int[] | Int;
  request_cdiff_not_in?: Int[] | Int;
  request_cdiff_lt?: Int;
  request_cdiff_lte?: Int;
  request_cdiff_gt?: Int;
  request_cdiff_gte?: Int;
  request_mrsa?: Int;
  request_mrsa_not?: Int;
  request_mrsa_in?: Int[] | Int;
  request_mrsa_not_in?: Int[] | Int;
  request_mrsa_lt?: Int;
  request_mrsa_lte?: Int;
  request_mrsa_gt?: Int;
  request_mrsa_gte?: Int;
  request_resp?: Int;
  request_resp_not?: Int;
  request_resp_in?: Int[] | Int;
  request_resp_not_in?: Int[] | Int;
  request_resp_lt?: Int;
  request_resp_lte?: Int;
  request_resp_gt?: Int;
  request_resp_gte?: Int;
  request_tele?: Int;
  request_tele_not?: Int;
  request_tele_in?: Int[] | Int;
  request_tele_not_in?: Int[] | Int;
  request_tele_lt?: Int;
  request_tele_lte?: Int;
  request_tele_gt?: Int;
  request_tele_gte?: Int;
  request_vre?: Int;
  request_vre_not?: Int;
  request_vre_in?: Int[] | Int;
  request_vre_not_in?: Int[] | Int;
  request_vre_lt?: Int;
  request_vre_lte?: Int;
  request_vre_gt?: Int;
  request_vre_gte?: Int;
  submit_careunit?: String;
  submit_careunit_not?: String;
  submit_careunit_in?: String[] | String;
  submit_careunit_not_in?: String[] | String;
  submit_careunit_lt?: String;
  submit_careunit_lte?: String;
  submit_careunit_gt?: String;
  submit_careunit_gte?: String;
  submit_careunit_contains?: String;
  submit_careunit_not_contains?: String;
  submit_careunit_starts_with?: String;
  submit_careunit_not_starts_with?: String;
  submit_careunit_ends_with?: String;
  submit_careunit_not_ends_with?: String;
  submit_wardid?: Int;
  submit_wardid_not?: Int;
  submit_wardid_in?: Int[] | Int;
  submit_wardid_not_in?: Int[] | Int;
  submit_wardid_lt?: Int;
  submit_wardid_lte?: Int;
  submit_wardid_gt?: Int;
  submit_wardid_gte?: Int;
  updatetime?: DateTimeInput;
  updatetime_not?: DateTimeInput;
  updatetime_in?: DateTimeInput[] | DateTimeInput;
  updatetime_not_in?: DateTimeInput[] | DateTimeInput;
  updatetime_lt?: DateTimeInput;
  updatetime_lte?: DateTimeInput;
  updatetime_gt?: DateTimeInput;
  updatetime_gte?: DateTimeInput;
  AND?: CalloutWhereInput[] | CalloutWhereInput;
  OR?: CalloutWhereInput[] | CalloutWhereInput;
  NOT?: CalloutWhereInput[] | CalloutWhereInput;
}

export interface MicrobiologyeventWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  ab_name?: String;
  ab_name_not?: String;
  ab_name_in?: String[] | String;
  ab_name_not_in?: String[] | String;
  ab_name_lt?: String;
  ab_name_lte?: String;
  ab_name_gt?: String;
  ab_name_gte?: String;
  ab_name_contains?: String;
  ab_name_not_contains?: String;
  ab_name_starts_with?: String;
  ab_name_not_starts_with?: String;
  ab_name_ends_with?: String;
  ab_name_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  dilution_comparison?: String;
  dilution_comparison_not?: String;
  dilution_comparison_in?: String[] | String;
  dilution_comparison_not_in?: String[] | String;
  dilution_comparison_lt?: String;
  dilution_comparison_lte?: String;
  dilution_comparison_gt?: String;
  dilution_comparison_gte?: String;
  dilution_comparison_contains?: String;
  dilution_comparison_not_contains?: String;
  dilution_comparison_starts_with?: String;
  dilution_comparison_not_starts_with?: String;
  dilution_comparison_ends_with?: String;
  dilution_comparison_not_ends_with?: String;
  dilution_text?: String;
  dilution_text_not?: String;
  dilution_text_in?: String[] | String;
  dilution_text_not_in?: String[] | String;
  dilution_text_lt?: String;
  dilution_text_lte?: String;
  dilution_text_gt?: String;
  dilution_text_gte?: String;
  dilution_text_contains?: String;
  dilution_text_not_contains?: String;
  dilution_text_starts_with?: String;
  dilution_text_not_starts_with?: String;
  dilution_text_ends_with?: String;
  dilution_text_not_ends_with?: String;
  dilution_value?: Float;
  dilution_value_not?: Float;
  dilution_value_in?: Float[] | Float;
  dilution_value_not_in?: Float[] | Float;
  dilution_value_lt?: Float;
  dilution_value_lte?: Float;
  dilution_value_gt?: Float;
  dilution_value_gte?: Float;
  interpretation?: String;
  interpretation_not?: String;
  interpretation_in?: String[] | String;
  interpretation_not_in?: String[] | String;
  interpretation_lt?: String;
  interpretation_lte?: String;
  interpretation_gt?: String;
  interpretation_gte?: String;
  interpretation_contains?: String;
  interpretation_not_contains?: String;
  interpretation_starts_with?: String;
  interpretation_not_starts_with?: String;
  interpretation_ends_with?: String;
  interpretation_not_ends_with?: String;
  isolate_num?: Int;
  isolate_num_not?: Int;
  isolate_num_in?: Int[] | Int;
  isolate_num_not_in?: Int[] | Int;
  isolate_num_lt?: Int;
  isolate_num_lte?: Int;
  isolate_num_gt?: Int;
  isolate_num_gte?: Int;
  org_name?: String;
  org_name_not?: String;
  org_name_in?: String[] | String;
  org_name_not_in?: String[] | String;
  org_name_lt?: String;
  org_name_lte?: String;
  org_name_gt?: String;
  org_name_gte?: String;
  org_name_contains?: String;
  org_name_not_contains?: String;
  org_name_starts_with?: String;
  org_name_not_starts_with?: String;
  org_name_ends_with?: String;
  org_name_not_ends_with?: String;
  spec_type_desc?: String;
  spec_type_desc_not?: String;
  spec_type_desc_in?: String[] | String;
  spec_type_desc_not_in?: String[] | String;
  spec_type_desc_lt?: String;
  spec_type_desc_lte?: String;
  spec_type_desc_gt?: String;
  spec_type_desc_gte?: String;
  spec_type_desc_contains?: String;
  spec_type_desc_not_contains?: String;
  spec_type_desc_starts_with?: String;
  spec_type_desc_not_starts_with?: String;
  spec_type_desc_ends_with?: String;
  spec_type_desc_not_ends_with?: String;
  AND?: MicrobiologyeventWhereInput[] | MicrobiologyeventWhereInput;
  OR?: MicrobiologyeventWhereInput[] | MicrobiologyeventWhereInput;
  NOT?: MicrobiologyeventWhereInput[] | MicrobiologyeventWhereInput;
}

export type DItemWhereUniqueInput = AtLeastOne<{
  id: UUID;
  itemid?: Int;
}>;

export interface DrgcodeUpsertWithWhereUniqueNestedInput {
  where: DrgcodeWhereUniqueInput;
  update: DrgcodeUpdateDataInput;
  create: DrgcodeCreateInput;
}

export interface Chartevents17UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DrgcodeScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  drg_code?: String;
  drg_code_not?: String;
  drg_code_in?: String[] | String;
  drg_code_not_in?: String[] | String;
  drg_code_lt?: String;
  drg_code_lte?: String;
  drg_code_gt?: String;
  drg_code_gte?: String;
  drg_code_contains?: String;
  drg_code_not_contains?: String;
  drg_code_starts_with?: String;
  drg_code_not_starts_with?: String;
  drg_code_ends_with?: String;
  drg_code_not_ends_with?: String;
  drg_mortality?: Int;
  drg_mortality_not?: Int;
  drg_mortality_in?: Int[] | Int;
  drg_mortality_not_in?: Int[] | Int;
  drg_mortality_lt?: Int;
  drg_mortality_lte?: Int;
  drg_mortality_gt?: Int;
  drg_mortality_gte?: Int;
  drg_severity?: Int;
  drg_severity_not?: Int;
  drg_severity_in?: Int[] | Int;
  drg_severity_not_in?: Int[] | Int;
  drg_severity_lt?: Int;
  drg_severity_lte?: Int;
  drg_severity_gt?: Int;
  drg_severity_gte?: Int;
  drg_type?: String;
  drg_type_not?: String;
  drg_type_in?: String[] | String;
  drg_type_not_in?: String[] | String;
  drg_type_lt?: String;
  drg_type_lte?: String;
  drg_type_gt?: String;
  drg_type_gte?: String;
  drg_type_contains?: String;
  drg_type_not_contains?: String;
  drg_type_starts_with?: String;
  drg_type_not_starts_with?: String;
  drg_type_ends_with?: String;
  drg_type_not_ends_with?: String;
  AND?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
  OR?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
  NOT?: DrgcodeScalarWhereInput[] | DrgcodeScalarWhereInput;
}

export interface Chartevents16CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DrgcodeUpdateManyWithWhereNestedInput {
  where: DrgcodeScalarWhereInput;
  data: DrgcodeUpdateManyDataInput;
}

export interface Chartevents14UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface DrgcodeUpdateManyDataInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface Chartevents13CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface IcustayUpdateManyInput {
  create?: IcustayCreateInput[] | IcustayCreateInput;
  update?:
    | IcustayUpdateWithWhereUniqueNestedInput[]
    | IcustayUpdateWithWhereUniqueNestedInput;
  upsert?:
    | IcustayUpsertWithWhereUniqueNestedInput[]
    | IcustayUpsertWithWhereUniqueNestedInput;
  delete?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  connect?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  set?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  disconnect?: IcustayWhereUniqueInput[] | IcustayWhereUniqueInput;
  deleteMany?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
  updateMany?:
    | IcustayUpdateManyWithWhereNestedInput[]
    | IcustayUpdateManyWithWhereNestedInput;
}

export interface Chartevents11UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface IcustayUpdateWithWhereUniqueNestedInput {
  where: IcustayWhereUniqueInput;
  data: IcustayUpdateDataInput;
}

export interface Chartevents10CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface IcustayUpdateDataInput {
  chartevents?: CharteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  dbsource?: String;
  first_careunit?: String;
  first_wardid?: Int;
  icustay_id?: Int;
  inputevents_cv?: InputeventsCvUpdateManyInput;
  inputevents_mv?: InputeventsMvUpdateManyInput;
  intime?: DateTimeInput;
  last_careunit?: String;
  last_wardid?: Int;
  los?: Float;
  outputevents?: OutputeventUpdateManyInput;
  outtime?: DateTimeInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: ProcedureeventsMvUpdateManyInput;
  transfers?: TransferUpdateManyInput;
}

export interface PrescriptionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PrescriptionWhereInput;
  AND?:
    | PrescriptionSubscriptionWhereInput[]
    | PrescriptionSubscriptionWhereInput;
  OR?:
    | PrescriptionSubscriptionWhereInput[]
    | PrescriptionSubscriptionWhereInput;
  NOT?:
    | PrescriptionSubscriptionWhereInput[]
    | PrescriptionSubscriptionWhereInput;
}

export interface InputeventsCvUpdateManyInput {
  create?: InputeventsCvCreateInput[] | InputeventsCvCreateInput;
  update?:
    | InputeventsCvUpdateWithWhereUniqueNestedInput[]
    | InputeventsCvUpdateWithWhereUniqueNestedInput;
  upsert?:
    | InputeventsCvUpsertWithWhereUniqueNestedInput[]
    | InputeventsCvUpsertWithWhereUniqueNestedInput;
  delete?: InputeventsCvWhereUniqueInput[] | InputeventsCvWhereUniqueInput;
  connect?: InputeventsCvWhereUniqueInput[] | InputeventsCvWhereUniqueInput;
  set?: InputeventsCvWhereUniqueInput[] | InputeventsCvWhereUniqueInput;
  disconnect?: InputeventsCvWhereUniqueInput[] | InputeventsCvWhereUniqueInput;
  deleteMany?: InputeventsCvScalarWhereInput[] | InputeventsCvScalarWhereInput;
  updateMany?:
    | InputeventsCvUpdateManyWithWhereNestedInput[]
    | InputeventsCvUpdateManyWithWhereNestedInput;
}

export interface InputeventsMvSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InputeventsMvWhereInput;
  AND?:
    | InputeventsMvSubscriptionWhereInput[]
    | InputeventsMvSubscriptionWhereInput;
  OR?:
    | InputeventsMvSubscriptionWhereInput[]
    | InputeventsMvSubscriptionWhereInput;
  NOT?:
    | InputeventsMvSubscriptionWhereInput[]
    | InputeventsMvSubscriptionWhereInput;
}

export interface InputeventsCvUpdateWithWhereUniqueNestedInput {
  where: InputeventsCvWhereUniqueInput;
  data: InputeventsCvUpdateDataInput;
}

export type CaregiverWhereUniqueInput = AtLeastOne<{
  id: UUID;
  cgid?: Int;
}>;

export interface InputeventsCvUpdateDataInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface Chartevents9SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents9WhereInput;
  AND?:
    | Chartevents9SubscriptionWhereInput[]
    | Chartevents9SubscriptionWhereInput;
  OR?:
    | Chartevents9SubscriptionWhereInput[]
    | Chartevents9SubscriptionWhereInput;
  NOT?:
    | Chartevents9SubscriptionWhereInput[]
    | Chartevents9SubscriptionWhereInput;
}

export interface InputeventsCvUpsertWithWhereUniqueNestedInput {
  where: InputeventsCvWhereUniqueInput;
  update: InputeventsCvUpdateDataInput;
  create: InputeventsCvCreateInput;
}

export interface Chartevents3SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents3WhereInput;
  AND?:
    | Chartevents3SubscriptionWhereInput[]
    | Chartevents3SubscriptionWhereInput;
  OR?:
    | Chartevents3SubscriptionWhereInput[]
    | Chartevents3SubscriptionWhereInput;
  NOT?:
    | Chartevents3SubscriptionWhereInput[]
    | Chartevents3SubscriptionWhereInput;
}

export interface InputeventsCvScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  newbottle?: Int;
  newbottle_not?: Int;
  newbottle_in?: Int[] | Int;
  newbottle_not_in?: Int[] | Int;
  newbottle_lt?: Int;
  newbottle_lte?: Int;
  newbottle_gt?: Int;
  newbottle_gte?: Int;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalamountuom?: String;
  originalamountuom_not?: String;
  originalamountuom_in?: String[] | String;
  originalamountuom_not_in?: String[] | String;
  originalamountuom_lt?: String;
  originalamountuom_lte?: String;
  originalamountuom_gt?: String;
  originalamountuom_gte?: String;
  originalamountuom_contains?: String;
  originalamountuom_not_contains?: String;
  originalamountuom_starts_with?: String;
  originalamountuom_not_starts_with?: String;
  originalamountuom_ends_with?: String;
  originalamountuom_not_ends_with?: String;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  originalrateuom?: String;
  originalrateuom_not?: String;
  originalrateuom_in?: String[] | String;
  originalrateuom_not_in?: String[] | String;
  originalrateuom_lt?: String;
  originalrateuom_lte?: String;
  originalrateuom_gt?: String;
  originalrateuom_gte?: String;
  originalrateuom_contains?: String;
  originalrateuom_not_contains?: String;
  originalrateuom_starts_with?: String;
  originalrateuom_not_starts_with?: String;
  originalrateuom_ends_with?: String;
  originalrateuom_not_ends_with?: String;
  originalroute?: String;
  originalroute_not?: String;
  originalroute_in?: String[] | String;
  originalroute_not_in?: String[] | String;
  originalroute_lt?: String;
  originalroute_lte?: String;
  originalroute_gt?: String;
  originalroute_gte?: String;
  originalroute_contains?: String;
  originalroute_not_contains?: String;
  originalroute_starts_with?: String;
  originalroute_not_starts_with?: String;
  originalroute_ends_with?: String;
  originalroute_not_ends_with?: String;
  originalsite?: String;
  originalsite_not?: String;
  originalsite_in?: String[] | String;
  originalsite_not_in?: String[] | String;
  originalsite_lt?: String;
  originalsite_lte?: String;
  originalsite_gt?: String;
  originalsite_gte?: String;
  originalsite_contains?: String;
  originalsite_not_contains?: String;
  originalsite_starts_with?: String;
  originalsite_not_starts_with?: String;
  originalsite_ends_with?: String;
  originalsite_not_ends_with?: String;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  AND?: InputeventsCvScalarWhereInput[] | InputeventsCvScalarWhereInput;
  OR?: InputeventsCvScalarWhereInput[] | InputeventsCvScalarWhereInput;
  NOT?: InputeventsCvScalarWhereInput[] | InputeventsCvScalarWhereInput;
}

export interface PrescriptionWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  dose_unit_rx?: String;
  dose_unit_rx_not?: String;
  dose_unit_rx_in?: String[] | String;
  dose_unit_rx_not_in?: String[] | String;
  dose_unit_rx_lt?: String;
  dose_unit_rx_lte?: String;
  dose_unit_rx_gt?: String;
  dose_unit_rx_gte?: String;
  dose_unit_rx_contains?: String;
  dose_unit_rx_not_contains?: String;
  dose_unit_rx_starts_with?: String;
  dose_unit_rx_not_starts_with?: String;
  dose_unit_rx_ends_with?: String;
  dose_unit_rx_not_ends_with?: String;
  dose_val_rx?: String;
  dose_val_rx_not?: String;
  dose_val_rx_in?: String[] | String;
  dose_val_rx_not_in?: String[] | String;
  dose_val_rx_lt?: String;
  dose_val_rx_lte?: String;
  dose_val_rx_gt?: String;
  dose_val_rx_gte?: String;
  dose_val_rx_contains?: String;
  dose_val_rx_not_contains?: String;
  dose_val_rx_starts_with?: String;
  dose_val_rx_not_starts_with?: String;
  dose_val_rx_ends_with?: String;
  dose_val_rx_not_ends_with?: String;
  drug?: String;
  drug_not?: String;
  drug_in?: String[] | String;
  drug_not_in?: String[] | String;
  drug_lt?: String;
  drug_lte?: String;
  drug_gt?: String;
  drug_gte?: String;
  drug_contains?: String;
  drug_not_contains?: String;
  drug_starts_with?: String;
  drug_not_starts_with?: String;
  drug_ends_with?: String;
  drug_not_ends_with?: String;
  drug_name_generic?: String;
  drug_name_generic_not?: String;
  drug_name_generic_in?: String[] | String;
  drug_name_generic_not_in?: String[] | String;
  drug_name_generic_lt?: String;
  drug_name_generic_lte?: String;
  drug_name_generic_gt?: String;
  drug_name_generic_gte?: String;
  drug_name_generic_contains?: String;
  drug_name_generic_not_contains?: String;
  drug_name_generic_starts_with?: String;
  drug_name_generic_not_starts_with?: String;
  drug_name_generic_ends_with?: String;
  drug_name_generic_not_ends_with?: String;
  drug_name_poe?: String;
  drug_name_poe_not?: String;
  drug_name_poe_in?: String[] | String;
  drug_name_poe_not_in?: String[] | String;
  drug_name_poe_lt?: String;
  drug_name_poe_lte?: String;
  drug_name_poe_gt?: String;
  drug_name_poe_gte?: String;
  drug_name_poe_contains?: String;
  drug_name_poe_not_contains?: String;
  drug_name_poe_starts_with?: String;
  drug_name_poe_not_starts_with?: String;
  drug_name_poe_ends_with?: String;
  drug_name_poe_not_ends_with?: String;
  drug_type?: String;
  drug_type_not?: String;
  drug_type_in?: String[] | String;
  drug_type_not_in?: String[] | String;
  drug_type_lt?: String;
  drug_type_lte?: String;
  drug_type_gt?: String;
  drug_type_gte?: String;
  drug_type_contains?: String;
  drug_type_not_contains?: String;
  drug_type_starts_with?: String;
  drug_type_not_starts_with?: String;
  drug_type_ends_with?: String;
  drug_type_not_ends_with?: String;
  enddate?: DateTimeInput;
  enddate_not?: DateTimeInput;
  enddate_in?: DateTimeInput[] | DateTimeInput;
  enddate_not_in?: DateTimeInput[] | DateTimeInput;
  enddate_lt?: DateTimeInput;
  enddate_lte?: DateTimeInput;
  enddate_gt?: DateTimeInput;
  enddate_gte?: DateTimeInput;
  form_unit_disp?: String;
  form_unit_disp_not?: String;
  form_unit_disp_in?: String[] | String;
  form_unit_disp_not_in?: String[] | String;
  form_unit_disp_lt?: String;
  form_unit_disp_lte?: String;
  form_unit_disp_gt?: String;
  form_unit_disp_gte?: String;
  form_unit_disp_contains?: String;
  form_unit_disp_not_contains?: String;
  form_unit_disp_starts_with?: String;
  form_unit_disp_not_starts_with?: String;
  form_unit_disp_ends_with?: String;
  form_unit_disp_not_ends_with?: String;
  form_val_disp?: String;
  form_val_disp_not?: String;
  form_val_disp_in?: String[] | String;
  form_val_disp_not_in?: String[] | String;
  form_val_disp_lt?: String;
  form_val_disp_lte?: String;
  form_val_disp_gt?: String;
  form_val_disp_gte?: String;
  form_val_disp_contains?: String;
  form_val_disp_not_contains?: String;
  form_val_disp_starts_with?: String;
  form_val_disp_not_starts_with?: String;
  form_val_disp_ends_with?: String;
  form_val_disp_not_ends_with?: String;
  formulary_drug_cd?: String;
  formulary_drug_cd_not?: String;
  formulary_drug_cd_in?: String[] | String;
  formulary_drug_cd_not_in?: String[] | String;
  formulary_drug_cd_lt?: String;
  formulary_drug_cd_lte?: String;
  formulary_drug_cd_gt?: String;
  formulary_drug_cd_gte?: String;
  formulary_drug_cd_contains?: String;
  formulary_drug_cd_not_contains?: String;
  formulary_drug_cd_starts_with?: String;
  formulary_drug_cd_not_starts_with?: String;
  formulary_drug_cd_ends_with?: String;
  formulary_drug_cd_not_ends_with?: String;
  gsn?: String;
  gsn_not?: String;
  gsn_in?: String[] | String;
  gsn_not_in?: String[] | String;
  gsn_lt?: String;
  gsn_lte?: String;
  gsn_gt?: String;
  gsn_gte?: String;
  gsn_contains?: String;
  gsn_not_contains?: String;
  gsn_starts_with?: String;
  gsn_not_starts_with?: String;
  gsn_ends_with?: String;
  gsn_not_ends_with?: String;
  ndc?: String;
  ndc_not?: String;
  ndc_in?: String[] | String;
  ndc_not_in?: String[] | String;
  ndc_lt?: String;
  ndc_lte?: String;
  ndc_gt?: String;
  ndc_gte?: String;
  ndc_contains?: String;
  ndc_not_contains?: String;
  ndc_starts_with?: String;
  ndc_not_starts_with?: String;
  ndc_ends_with?: String;
  ndc_not_ends_with?: String;
  prod_strength?: String;
  prod_strength_not?: String;
  prod_strength_in?: String[] | String;
  prod_strength_not_in?: String[] | String;
  prod_strength_lt?: String;
  prod_strength_lte?: String;
  prod_strength_gt?: String;
  prod_strength_gte?: String;
  prod_strength_contains?: String;
  prod_strength_not_contains?: String;
  prod_strength_starts_with?: String;
  prod_strength_not_starts_with?: String;
  prod_strength_ends_with?: String;
  prod_strength_not_ends_with?: String;
  route?: String;
  route_not?: String;
  route_in?: String[] | String;
  route_not_in?: String[] | String;
  route_lt?: String;
  route_lte?: String;
  route_gt?: String;
  route_gte?: String;
  route_contains?: String;
  route_not_contains?: String;
  route_starts_with?: String;
  route_not_starts_with?: String;
  route_ends_with?: String;
  route_not_ends_with?: String;
  startdate?: DateTimeInput;
  startdate_not?: DateTimeInput;
  startdate_in?: DateTimeInput[] | DateTimeInput;
  startdate_not_in?: DateTimeInput[] | DateTimeInput;
  startdate_lt?: DateTimeInput;
  startdate_lte?: DateTimeInput;
  startdate_gt?: DateTimeInput;
  startdate_gte?: DateTimeInput;
  AND?: PrescriptionWhereInput[] | PrescriptionWhereInput;
  OR?: PrescriptionWhereInput[] | PrescriptionWhereInput;
  NOT?: PrescriptionWhereInput[] | PrescriptionWhereInput;
}

export interface InputeventsCvUpdateManyWithWhereNestedInput {
  where: InputeventsCvScalarWhereInput;
  data: InputeventsCvUpdateManyDataInput;
}

export interface Chartevents1SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents1WhereInput;
  AND?:
    | Chartevents1SubscriptionWhereInput[]
    | Chartevents1SubscriptionWhereInput;
  OR?:
    | Chartevents1SubscriptionWhereInput[]
    | Chartevents1SubscriptionWhereInput;
  NOT?:
    | Chartevents1SubscriptionWhereInput[]
    | Chartevents1SubscriptionWhereInput;
}

export interface InputeventsCvUpdateManyDataInput {
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeInput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeInput;
}

export interface TransferUpdateInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface InputeventsMvUpdateManyInput {
  create?: InputeventsMvCreateInput[] | InputeventsMvCreateInput;
  update?:
    | InputeventsMvUpdateWithWhereUniqueNestedInput[]
    | InputeventsMvUpdateWithWhereUniqueNestedInput;
  upsert?:
    | InputeventsMvUpsertWithWhereUniqueNestedInput[]
    | InputeventsMvUpsertWithWhereUniqueNestedInput;
  delete?: InputeventsMvWhereUniqueInput[] | InputeventsMvWhereUniqueInput;
  connect?: InputeventsMvWhereUniqueInput[] | InputeventsMvWhereUniqueInput;
  set?: InputeventsMvWhereUniqueInput[] | InputeventsMvWhereUniqueInput;
  disconnect?: InputeventsMvWhereUniqueInput[] | InputeventsMvWhereUniqueInput;
  deleteMany?: InputeventsMvScalarWhereInput[] | InputeventsMvScalarWhereInput;
  updateMany?:
    | InputeventsMvUpdateManyWithWhereNestedInput[]
    | InputeventsMvUpdateManyWithWhereNestedInput;
}

export interface IcustayWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  first_careunit?: String;
  first_careunit_not?: String;
  first_careunit_in?: String[] | String;
  first_careunit_not_in?: String[] | String;
  first_careunit_lt?: String;
  first_careunit_lte?: String;
  first_careunit_gt?: String;
  first_careunit_gte?: String;
  first_careunit_contains?: String;
  first_careunit_not_contains?: String;
  first_careunit_starts_with?: String;
  first_careunit_not_starts_with?: String;
  first_careunit_ends_with?: String;
  first_careunit_not_ends_with?: String;
  first_wardid?: Int;
  first_wardid_not?: Int;
  first_wardid_in?: Int[] | Int;
  first_wardid_not_in?: Int[] | Int;
  first_wardid_lt?: Int;
  first_wardid_lte?: Int;
  first_wardid_gt?: Int;
  first_wardid_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  inputevents_cv_every?: InputeventsCvWhereInput;
  inputevents_cv_some?: InputeventsCvWhereInput;
  inputevents_cv_none?: InputeventsCvWhereInput;
  inputevents_mv_every?: InputeventsMvWhereInput;
  inputevents_mv_some?: InputeventsMvWhereInput;
  inputevents_mv_none?: InputeventsMvWhereInput;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  last_careunit?: String;
  last_careunit_not?: String;
  last_careunit_in?: String[] | String;
  last_careunit_not_in?: String[] | String;
  last_careunit_lt?: String;
  last_careunit_lte?: String;
  last_careunit_gt?: String;
  last_careunit_gte?: String;
  last_careunit_contains?: String;
  last_careunit_not_contains?: String;
  last_careunit_starts_with?: String;
  last_careunit_not_starts_with?: String;
  last_careunit_ends_with?: String;
  last_careunit_not_ends_with?: String;
  last_wardid?: Int;
  last_wardid_not?: Int;
  last_wardid_in?: Int[] | Int;
  last_wardid_not_in?: Int[] | Int;
  last_wardid_lt?: Int;
  last_wardid_lte?: Int;
  last_wardid_gt?: Int;
  last_wardid_gte?: Int;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  prescriptions_every?: PrescriptionWhereInput;
  prescriptions_some?: PrescriptionWhereInput;
  prescriptions_none?: PrescriptionWhereInput;
  procedureevents_mv_every?: ProcedureeventsMvWhereInput;
  procedureevents_mv_some?: ProcedureeventsMvWhereInput;
  procedureevents_mv_none?: ProcedureeventsMvWhereInput;
  transfers_every?: TransferWhereInput;
  transfers_some?: TransferWhereInput;
  transfers_none?: TransferWhereInput;
  AND?: IcustayWhereInput[] | IcustayWhereInput;
  OR?: IcustayWhereInput[] | IcustayWhereInput;
  NOT?: IcustayWhereInput[] | IcustayWhereInput;
}

export interface InputeventsMvUpdateWithWhereUniqueNestedInput {
  where: InputeventsMvWhereUniqueInput;
  data: InputeventsMvUpdateDataInput;
}

export interface AdmissionUpdateManyWithWhereNestedInput {
  where: AdmissionScalarWhereInput;
  data: AdmissionUpdateManyDataInput;
}

export interface InputeventsMvUpdateDataInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface PatientUpdateInput {
  admissions?: AdmissionUpdateManyInput;
  callout?: CalloutUpdateManyInput;
  chartevents?: CharteventUpdateManyInput;
  cptevents?: CpteventUpdateManyInput;
  datetimeevents?: DatetimeeventUpdateManyInput;
  diagnoses_icd?: DiagnosesIcdUpdateManyInput;
  dob?: DateTimeInput;
  dod?: DateTimeInput;
  dod_hosp?: DateTimeInput;
  dod_ssn?: DateTimeInput;
  drgcodes?: DrgcodeUpdateManyInput;
  expire_flag?: Int;
  gender?: String;
  icustays?: IcustayUpdateManyInput;
  inputevents_cv?: InputeventsCvUpdateManyInput;
  inputevents_mv?: InputeventsMvUpdateManyInput;
  labevents?: LabeventUpdateManyInput;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  noteevents?: NoteeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  prescriptions?: PrescriptionUpdateManyInput;
  procedureevents_mv?: ProcedureeventsMvUpdateManyInput;
  procedures_icd?: ProceduresIcdUpdateManyInput;
  services?: ServiceUpdateManyInput;
  subject_id?: Int;
  transfers?: TransferUpdateManyInput;
}

export interface InputeventsMvUpsertWithWhereUniqueNestedInput {
  where: InputeventsMvWhereUniqueInput;
  update: InputeventsMvUpdateDataInput;
  create: InputeventsMvCreateInput;
}

export interface DiagnosesIcdWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  icd9_code?: String;
  icd9_code_not?: String;
  icd9_code_in?: String[] | String;
  icd9_code_not_in?: String[] | String;
  icd9_code_lt?: String;
  icd9_code_lte?: String;
  icd9_code_gt?: String;
  icd9_code_gte?: String;
  icd9_code_contains?: String;
  icd9_code_not_contains?: String;
  icd9_code_starts_with?: String;
  icd9_code_not_starts_with?: String;
  icd9_code_ends_with?: String;
  icd9_code_not_ends_with?: String;
  seq_num?: Int;
  seq_num_not?: Int;
  seq_num_in?: Int[] | Int;
  seq_num_not_in?: Int[] | Int;
  seq_num_lt?: Int;
  seq_num_lte?: Int;
  seq_num_gt?: Int;
  seq_num_gte?: Int;
  AND?: DiagnosesIcdWhereInput[] | DiagnosesIcdWhereInput;
  OR?: DiagnosesIcdWhereInput[] | DiagnosesIcdWhereInput;
  NOT?: DiagnosesIcdWhereInput[] | DiagnosesIcdWhereInput;
}

export interface InputeventsMvScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  ordercomponenttypedescription?: String;
  ordercomponenttypedescription_not?: String;
  ordercomponenttypedescription_in?: String[] | String;
  ordercomponenttypedescription_not_in?: String[] | String;
  ordercomponenttypedescription_lt?: String;
  ordercomponenttypedescription_lte?: String;
  ordercomponenttypedescription_gt?: String;
  ordercomponenttypedescription_gte?: String;
  ordercomponenttypedescription_contains?: String;
  ordercomponenttypedescription_not_contains?: String;
  ordercomponenttypedescription_starts_with?: String;
  ordercomponenttypedescription_not_starts_with?: String;
  ordercomponenttypedescription_ends_with?: String;
  ordercomponenttypedescription_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  patientweight?: Float;
  patientweight_not?: Float;
  patientweight_in?: Float[] | Float;
  patientweight_not_in?: Float[] | Float;
  patientweight_lt?: Float;
  patientweight_lte?: Float;
  patientweight_gt?: Float;
  patientweight_gte?: Float;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  totalamount?: Float;
  totalamount_not?: Float;
  totalamount_in?: Float[] | Float;
  totalamount_not_in?: Float[] | Float;
  totalamount_lt?: Float;
  totalamount_lte?: Float;
  totalamount_gt?: Float;
  totalamount_gte?: Float;
  totalamountuom?: String;
  totalamountuom_not?: String;
  totalamountuom_in?: String[] | String;
  totalamountuom_not_in?: String[] | String;
  totalamountuom_lt?: String;
  totalamountuom_lte?: String;
  totalamountuom_gt?: String;
  totalamountuom_gte?: String;
  totalamountuom_contains?: String;
  totalamountuom_not_contains?: String;
  totalamountuom_starts_with?: String;
  totalamountuom_not_starts_with?: String;
  totalamountuom_ends_with?: String;
  totalamountuom_not_ends_with?: String;
  AND?: InputeventsMvScalarWhereInput[] | InputeventsMvScalarWhereInput;
  OR?: InputeventsMvScalarWhereInput[] | InputeventsMvScalarWhereInput;
  NOT?: InputeventsMvScalarWhereInput[] | InputeventsMvScalarWhereInput;
}

export interface InputeventsMvUpdateInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface InputeventsMvUpdateManyWithWhereNestedInput {
  where: InputeventsMvScalarWhereInput;
  data: InputeventsMvUpdateManyDataInput;
}

export interface DrgcodeUpdateInput {
  description?: String;
  drg_code?: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type?: String;
}

export interface InputeventsMvUpdateManyDataInput {
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface CpteventWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  costcenter?: String;
  costcenter_not?: String;
  costcenter_in?: String[] | String;
  costcenter_not_in?: String[] | String;
  costcenter_lt?: String;
  costcenter_lte?: String;
  costcenter_gt?: String;
  costcenter_gte?: String;
  costcenter_contains?: String;
  costcenter_not_contains?: String;
  costcenter_starts_with?: String;
  costcenter_not_starts_with?: String;
  costcenter_ends_with?: String;
  costcenter_not_ends_with?: String;
  cpt_cd?: String;
  cpt_cd_not?: String;
  cpt_cd_in?: String[] | String;
  cpt_cd_not_in?: String[] | String;
  cpt_cd_lt?: String;
  cpt_cd_lte?: String;
  cpt_cd_gt?: String;
  cpt_cd_gte?: String;
  cpt_cd_contains?: String;
  cpt_cd_not_contains?: String;
  cpt_cd_starts_with?: String;
  cpt_cd_not_starts_with?: String;
  cpt_cd_ends_with?: String;
  cpt_cd_not_ends_with?: String;
  cpt_number?: Int;
  cpt_number_not?: Int;
  cpt_number_in?: Int[] | Int;
  cpt_number_not_in?: Int[] | Int;
  cpt_number_lt?: Int;
  cpt_number_lte?: Int;
  cpt_number_gt?: Int;
  cpt_number_gte?: Int;
  cpt_suffix?: String;
  cpt_suffix_not?: String;
  cpt_suffix_in?: String[] | String;
  cpt_suffix_not_in?: String[] | String;
  cpt_suffix_lt?: String;
  cpt_suffix_lte?: String;
  cpt_suffix_gt?: String;
  cpt_suffix_gte?: String;
  cpt_suffix_contains?: String;
  cpt_suffix_not_contains?: String;
  cpt_suffix_starts_with?: String;
  cpt_suffix_not_starts_with?: String;
  cpt_suffix_ends_with?: String;
  cpt_suffix_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  sectionheader?: String;
  sectionheader_not?: String;
  sectionheader_in?: String[] | String;
  sectionheader_not_in?: String[] | String;
  sectionheader_lt?: String;
  sectionheader_lte?: String;
  sectionheader_gt?: String;
  sectionheader_gte?: String;
  sectionheader_contains?: String;
  sectionheader_not_contains?: String;
  sectionheader_starts_with?: String;
  sectionheader_not_starts_with?: String;
  sectionheader_ends_with?: String;
  sectionheader_not_ends_with?: String;
  subsectionheader?: String;
  subsectionheader_not?: String;
  subsectionheader_in?: String[] | String;
  subsectionheader_not_in?: String[] | String;
  subsectionheader_lt?: String;
  subsectionheader_lte?: String;
  subsectionheader_gt?: String;
  subsectionheader_gte?: String;
  subsectionheader_contains?: String;
  subsectionheader_not_contains?: String;
  subsectionheader_starts_with?: String;
  subsectionheader_not_starts_with?: String;
  subsectionheader_ends_with?: String;
  subsectionheader_not_ends_with?: String;
  ticket_id_seq?: Int;
  ticket_id_seq_not?: Int;
  ticket_id_seq_in?: Int[] | Int;
  ticket_id_seq_not_in?: Int[] | Int;
  ticket_id_seq_lt?: Int;
  ticket_id_seq_lte?: Int;
  ticket_id_seq_gt?: Int;
  ticket_id_seq_gte?: Int;
  AND?: CpteventWhereInput[] | CpteventWhereInput;
  OR?: CpteventWhereInput[] | CpteventWhereInput;
  NOT?: CpteventWhereInput[] | CpteventWhereInput;
}

export interface OutputeventUpdateManyInput {
  create?: OutputeventCreateInput[] | OutputeventCreateInput;
  update?:
    | OutputeventUpdateWithWhereUniqueNestedInput[]
    | OutputeventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | OutputeventUpsertWithWhereUniqueNestedInput[]
    | OutputeventUpsertWithWhereUniqueNestedInput;
  delete?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  connect?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  set?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  disconnect?: OutputeventWhereUniqueInput[] | OutputeventWhereUniqueInput;
  deleteMany?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
  updateMany?:
    | OutputeventUpdateManyWithWhereNestedInput[]
    | OutputeventUpdateManyWithWhereNestedInput;
}

export interface DIcdProcedureUpdateInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface OutputeventUpdateWithWhereUniqueNestedInput {
  where: OutputeventWhereUniqueInput;
  data: OutputeventUpdateDataInput;
}

export interface DCptCreateInput {
  category: Int;
  codesuffix?: String;
  maxcodeinsubsection: Int;
  mincodeinsubsection: Int;
  sectionheader: String;
  sectionrange: String;
  subsectionheader: String;
  subsectionrange: String;
}

export interface OutputeventUpdateDataInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface CharteventWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  valuenum?: Float;
  valuenum_not?: Float;
  valuenum_in?: Float[] | Float;
  valuenum_not_in?: Float[] | Float;
  valuenum_lt?: Float;
  valuenum_lte?: Float;
  valuenum_gt?: Float;
  valuenum_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: CharteventWhereInput[] | CharteventWhereInput;
  OR?: CharteventWhereInput[] | CharteventWhereInput;
  NOT?: CharteventWhereInput[] | CharteventWhereInput;
}

export interface OutputeventUpsertWithWhereUniqueNestedInput {
  where: OutputeventWhereUniqueInput;
  update: OutputeventUpdateDataInput;
  create: OutputeventCreateInput;
}

export interface Chartevents6CreateInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  iserror?: Int;
  iserror_not?: Int;
  iserror_in?: Int[] | Int;
  iserror_not_in?: Int[] | Int;
  iserror_lt?: Int;
  iserror_lte?: Int;
  iserror_gt?: Int;
  iserror_gte?: Int;
  newbottle?: String;
  newbottle_not?: String;
  newbottle_in?: String[] | String;
  newbottle_not_in?: String[] | String;
  newbottle_lt?: String;
  newbottle_lte?: String;
  newbottle_gt?: String;
  newbottle_gte?: String;
  newbottle_contains?: String;
  newbottle_not_contains?: String;
  newbottle_starts_with?: String;
  newbottle_not_starts_with?: String;
  newbottle_ends_with?: String;
  newbottle_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
  OR?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
  NOT?: OutputeventScalarWhereInput[] | OutputeventScalarWhereInput;
}

export interface Chartevents3UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventUpdateManyWithWhereNestedInput {
  where: OutputeventScalarWhereInput;
  data: OutputeventUpdateManyDataInput;
}

export interface Chartevents16UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface OutputeventUpdateManyDataInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export type DatetimeeventWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface PrescriptionUpdateManyInput {
  create?: PrescriptionCreateInput[] | PrescriptionCreateInput;
  update?:
    | PrescriptionUpdateWithWhereUniqueNestedInput[]
    | PrescriptionUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PrescriptionUpsertWithWhereUniqueNestedInput[]
    | PrescriptionUpsertWithWhereUniqueNestedInput;
  delete?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  connect?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  set?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  disconnect?: PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput;
  deleteMany?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
  updateMany?:
    | PrescriptionUpdateManyWithWhereNestedInput[]
    | PrescriptionUpdateManyWithWhereNestedInput;
}

export type DrgcodeWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface PrescriptionUpdateWithWhereUniqueNestedInput {
  where: PrescriptionWhereUniqueInput;
  data: PrescriptionUpdateDataInput;
}

export interface NoteeventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NoteeventWhereInput;
  AND?: NoteeventSubscriptionWhereInput[] | NoteeventSubscriptionWhereInput;
  OR?: NoteeventSubscriptionWhereInput[] | NoteeventSubscriptionWhereInput;
  NOT?: NoteeventSubscriptionWhereInput[] | NoteeventSubscriptionWhereInput;
}

export interface PrescriptionUpdateDataInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface DIcdDiagnosisSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DIcdDiagnosisWhereInput;
  AND?:
    | DIcdDiagnosisSubscriptionWhereInput[]
    | DIcdDiagnosisSubscriptionWhereInput;
  OR?:
    | DIcdDiagnosisSubscriptionWhereInput[]
    | DIcdDiagnosisSubscriptionWhereInput;
  NOT?:
    | DIcdDiagnosisSubscriptionWhereInput[]
    | DIcdDiagnosisSubscriptionWhereInput;
}

export interface PrescriptionUpsertWithWhereUniqueNestedInput {
  where: PrescriptionWhereUniqueInput;
  update: PrescriptionUpdateDataInput;
  create: PrescriptionCreateInput;
}

export interface Chartevents17SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents17WhereInput;
  AND?:
    | Chartevents17SubscriptionWhereInput[]
    | Chartevents17SubscriptionWhereInput;
  OR?:
    | Chartevents17SubscriptionWhereInput[]
    | Chartevents17SubscriptionWhereInput;
  NOT?:
    | Chartevents17SubscriptionWhereInput[]
    | Chartevents17SubscriptionWhereInput;
}

export interface PrescriptionScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  dose_unit_rx?: String;
  dose_unit_rx_not?: String;
  dose_unit_rx_in?: String[] | String;
  dose_unit_rx_not_in?: String[] | String;
  dose_unit_rx_lt?: String;
  dose_unit_rx_lte?: String;
  dose_unit_rx_gt?: String;
  dose_unit_rx_gte?: String;
  dose_unit_rx_contains?: String;
  dose_unit_rx_not_contains?: String;
  dose_unit_rx_starts_with?: String;
  dose_unit_rx_not_starts_with?: String;
  dose_unit_rx_ends_with?: String;
  dose_unit_rx_not_ends_with?: String;
  dose_val_rx?: String;
  dose_val_rx_not?: String;
  dose_val_rx_in?: String[] | String;
  dose_val_rx_not_in?: String[] | String;
  dose_val_rx_lt?: String;
  dose_val_rx_lte?: String;
  dose_val_rx_gt?: String;
  dose_val_rx_gte?: String;
  dose_val_rx_contains?: String;
  dose_val_rx_not_contains?: String;
  dose_val_rx_starts_with?: String;
  dose_val_rx_not_starts_with?: String;
  dose_val_rx_ends_with?: String;
  dose_val_rx_not_ends_with?: String;
  drug?: String;
  drug_not?: String;
  drug_in?: String[] | String;
  drug_not_in?: String[] | String;
  drug_lt?: String;
  drug_lte?: String;
  drug_gt?: String;
  drug_gte?: String;
  drug_contains?: String;
  drug_not_contains?: String;
  drug_starts_with?: String;
  drug_not_starts_with?: String;
  drug_ends_with?: String;
  drug_not_ends_with?: String;
  drug_name_generic?: String;
  drug_name_generic_not?: String;
  drug_name_generic_in?: String[] | String;
  drug_name_generic_not_in?: String[] | String;
  drug_name_generic_lt?: String;
  drug_name_generic_lte?: String;
  drug_name_generic_gt?: String;
  drug_name_generic_gte?: String;
  drug_name_generic_contains?: String;
  drug_name_generic_not_contains?: String;
  drug_name_generic_starts_with?: String;
  drug_name_generic_not_starts_with?: String;
  drug_name_generic_ends_with?: String;
  drug_name_generic_not_ends_with?: String;
  drug_name_poe?: String;
  drug_name_poe_not?: String;
  drug_name_poe_in?: String[] | String;
  drug_name_poe_not_in?: String[] | String;
  drug_name_poe_lt?: String;
  drug_name_poe_lte?: String;
  drug_name_poe_gt?: String;
  drug_name_poe_gte?: String;
  drug_name_poe_contains?: String;
  drug_name_poe_not_contains?: String;
  drug_name_poe_starts_with?: String;
  drug_name_poe_not_starts_with?: String;
  drug_name_poe_ends_with?: String;
  drug_name_poe_not_ends_with?: String;
  drug_type?: String;
  drug_type_not?: String;
  drug_type_in?: String[] | String;
  drug_type_not_in?: String[] | String;
  drug_type_lt?: String;
  drug_type_lte?: String;
  drug_type_gt?: String;
  drug_type_gte?: String;
  drug_type_contains?: String;
  drug_type_not_contains?: String;
  drug_type_starts_with?: String;
  drug_type_not_starts_with?: String;
  drug_type_ends_with?: String;
  drug_type_not_ends_with?: String;
  enddate?: DateTimeInput;
  enddate_not?: DateTimeInput;
  enddate_in?: DateTimeInput[] | DateTimeInput;
  enddate_not_in?: DateTimeInput[] | DateTimeInput;
  enddate_lt?: DateTimeInput;
  enddate_lte?: DateTimeInput;
  enddate_gt?: DateTimeInput;
  enddate_gte?: DateTimeInput;
  form_unit_disp?: String;
  form_unit_disp_not?: String;
  form_unit_disp_in?: String[] | String;
  form_unit_disp_not_in?: String[] | String;
  form_unit_disp_lt?: String;
  form_unit_disp_lte?: String;
  form_unit_disp_gt?: String;
  form_unit_disp_gte?: String;
  form_unit_disp_contains?: String;
  form_unit_disp_not_contains?: String;
  form_unit_disp_starts_with?: String;
  form_unit_disp_not_starts_with?: String;
  form_unit_disp_ends_with?: String;
  form_unit_disp_not_ends_with?: String;
  form_val_disp?: String;
  form_val_disp_not?: String;
  form_val_disp_in?: String[] | String;
  form_val_disp_not_in?: String[] | String;
  form_val_disp_lt?: String;
  form_val_disp_lte?: String;
  form_val_disp_gt?: String;
  form_val_disp_gte?: String;
  form_val_disp_contains?: String;
  form_val_disp_not_contains?: String;
  form_val_disp_starts_with?: String;
  form_val_disp_not_starts_with?: String;
  form_val_disp_ends_with?: String;
  form_val_disp_not_ends_with?: String;
  formulary_drug_cd?: String;
  formulary_drug_cd_not?: String;
  formulary_drug_cd_in?: String[] | String;
  formulary_drug_cd_not_in?: String[] | String;
  formulary_drug_cd_lt?: String;
  formulary_drug_cd_lte?: String;
  formulary_drug_cd_gt?: String;
  formulary_drug_cd_gte?: String;
  formulary_drug_cd_contains?: String;
  formulary_drug_cd_not_contains?: String;
  formulary_drug_cd_starts_with?: String;
  formulary_drug_cd_not_starts_with?: String;
  formulary_drug_cd_ends_with?: String;
  formulary_drug_cd_not_ends_with?: String;
  gsn?: String;
  gsn_not?: String;
  gsn_in?: String[] | String;
  gsn_not_in?: String[] | String;
  gsn_lt?: String;
  gsn_lte?: String;
  gsn_gt?: String;
  gsn_gte?: String;
  gsn_contains?: String;
  gsn_not_contains?: String;
  gsn_starts_with?: String;
  gsn_not_starts_with?: String;
  gsn_ends_with?: String;
  gsn_not_ends_with?: String;
  ndc?: String;
  ndc_not?: String;
  ndc_in?: String[] | String;
  ndc_not_in?: String[] | String;
  ndc_lt?: String;
  ndc_lte?: String;
  ndc_gt?: String;
  ndc_gte?: String;
  ndc_contains?: String;
  ndc_not_contains?: String;
  ndc_starts_with?: String;
  ndc_not_starts_with?: String;
  ndc_ends_with?: String;
  ndc_not_ends_with?: String;
  prod_strength?: String;
  prod_strength_not?: String;
  prod_strength_in?: String[] | String;
  prod_strength_not_in?: String[] | String;
  prod_strength_lt?: String;
  prod_strength_lte?: String;
  prod_strength_gt?: String;
  prod_strength_gte?: String;
  prod_strength_contains?: String;
  prod_strength_not_contains?: String;
  prod_strength_starts_with?: String;
  prod_strength_not_starts_with?: String;
  prod_strength_ends_with?: String;
  prod_strength_not_ends_with?: String;
  route?: String;
  route_not?: String;
  route_in?: String[] | String;
  route_not_in?: String[] | String;
  route_lt?: String;
  route_lte?: String;
  route_gt?: String;
  route_gte?: String;
  route_contains?: String;
  route_not_contains?: String;
  route_starts_with?: String;
  route_not_starts_with?: String;
  route_ends_with?: String;
  route_not_ends_with?: String;
  startdate?: DateTimeInput;
  startdate_not?: DateTimeInput;
  startdate_in?: DateTimeInput[] | DateTimeInput;
  startdate_not_in?: DateTimeInput[] | DateTimeInput;
  startdate_lt?: DateTimeInput;
  startdate_lte?: DateTimeInput;
  startdate_gt?: DateTimeInput;
  startdate_gte?: DateTimeInput;
  AND?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
  OR?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
  NOT?: PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput;
}

export interface InputeventsMvWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  amountuom?: String;
  amountuom_not?: String;
  amountuom_in?: String[] | String;
  amountuom_not_in?: String[] | String;
  amountuom_lt?: String;
  amountuom_lte?: String;
  amountuom_gt?: String;
  amountuom_gte?: String;
  amountuom_contains?: String;
  amountuom_not_contains?: String;
  amountuom_starts_with?: String;
  amountuom_not_starts_with?: String;
  amountuom_ends_with?: String;
  amountuom_not_ends_with?: String;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  ordercomponenttypedescription?: String;
  ordercomponenttypedescription_not?: String;
  ordercomponenttypedescription_in?: String[] | String;
  ordercomponenttypedescription_not_in?: String[] | String;
  ordercomponenttypedescription_lt?: String;
  ordercomponenttypedescription_lte?: String;
  ordercomponenttypedescription_gt?: String;
  ordercomponenttypedescription_gte?: String;
  ordercomponenttypedescription_contains?: String;
  ordercomponenttypedescription_not_contains?: String;
  ordercomponenttypedescription_starts_with?: String;
  ordercomponenttypedescription_not_starts_with?: String;
  ordercomponenttypedescription_ends_with?: String;
  ordercomponenttypedescription_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  originalamount?: Float;
  originalamount_not?: Float;
  originalamount_in?: Float[] | Float;
  originalamount_not_in?: Float[] | Float;
  originalamount_lt?: Float;
  originalamount_lte?: Float;
  originalamount_gt?: Float;
  originalamount_gte?: Float;
  originalrate?: Float;
  originalrate_not?: Float;
  originalrate_in?: Float[] | Float;
  originalrate_not_in?: Float[] | Float;
  originalrate_lt?: Float;
  originalrate_lte?: Float;
  originalrate_gt?: Float;
  originalrate_gte?: Float;
  patientweight?: Float;
  patientweight_not?: Float;
  patientweight_in?: Float[] | Float;
  patientweight_not_in?: Float[] | Float;
  patientweight_lt?: Float;
  patientweight_lte?: Float;
  patientweight_gt?: Float;
  patientweight_gte?: Float;
  rate?: Float;
  rate_not?: Float;
  rate_in?: Float[] | Float;
  rate_not_in?: Float[] | Float;
  rate_lt?: Float;
  rate_lte?: Float;
  rate_gt?: Float;
  rate_gte?: Float;
  rateuom?: String;
  rateuom_not?: String;
  rateuom_in?: String[] | String;
  rateuom_not_in?: String[] | String;
  rateuom_lt?: String;
  rateuom_lte?: String;
  rateuom_gt?: String;
  rateuom_gte?: String;
  rateuom_contains?: String;
  rateuom_not_contains?: String;
  rateuom_starts_with?: String;
  rateuom_not_starts_with?: String;
  rateuom_ends_with?: String;
  rateuom_not_ends_with?: String;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  totalamount?: Float;
  totalamount_not?: Float;
  totalamount_in?: Float[] | Float;
  totalamount_not_in?: Float[] | Float;
  totalamount_lt?: Float;
  totalamount_lte?: Float;
  totalamount_gt?: Float;
  totalamount_gte?: Float;
  totalamountuom?: String;
  totalamountuom_not?: String;
  totalamountuom_in?: String[] | String;
  totalamountuom_not_in?: String[] | String;
  totalamountuom_lt?: String;
  totalamountuom_lte?: String;
  totalamountuom_gt?: String;
  totalamountuom_gte?: String;
  totalamountuom_contains?: String;
  totalamountuom_not_contains?: String;
  totalamountuom_starts_with?: String;
  totalamountuom_not_starts_with?: String;
  totalamountuom_ends_with?: String;
  totalamountuom_not_ends_with?: String;
  AND?: InputeventsMvWhereInput[] | InputeventsMvWhereInput;
  OR?: InputeventsMvWhereInput[] | InputeventsMvWhereInput;
  NOT?: InputeventsMvWhereInput[] | InputeventsMvWhereInput;
}

export interface PrescriptionUpdateManyWithWhereNestedInput {
  where: PrescriptionScalarWhereInput;
  data: PrescriptionUpdateManyDataInput;
}

export interface PrescriptionUpdateInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface PrescriptionUpdateManyDataInput {
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug?: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type?: String;
  enddate?: DateTimeInput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeInput;
}

export interface OutputeventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface ProcedureeventsMvUpdateManyInput {
  create?: ProcedureeventsMvCreateInput[] | ProcedureeventsMvCreateInput;
  update?:
    | ProcedureeventsMvUpdateWithWhereUniqueNestedInput[]
    | ProcedureeventsMvUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ProcedureeventsMvUpsertWithWhereUniqueNestedInput[]
    | ProcedureeventsMvUpsertWithWhereUniqueNestedInput;
  delete?:
    | ProcedureeventsMvWhereUniqueInput[]
    | ProcedureeventsMvWhereUniqueInput;
  connect?:
    | ProcedureeventsMvWhereUniqueInput[]
    | ProcedureeventsMvWhereUniqueInput;
  set?: ProcedureeventsMvWhereUniqueInput[] | ProcedureeventsMvWhereUniqueInput;
  disconnect?:
    | ProcedureeventsMvWhereUniqueInput[]
    | ProcedureeventsMvWhereUniqueInput;
  deleteMany?:
    | ProcedureeventsMvScalarWhereInput[]
    | ProcedureeventsMvScalarWhereInput;
  updateMany?:
    | ProcedureeventsMvUpdateManyWithWhereNestedInput[]
    | ProcedureeventsMvUpdateManyWithWhereNestedInput;
}

export interface DatetimeeventWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  error?: Int;
  error_not?: Int;
  error_in?: Int[] | Int;
  error_not_in?: Int[] | Int;
  error_lt?: Int;
  error_lte?: Int;
  error_gt?: Int;
  error_gte?: Int;
  resultstatus?: String;
  resultstatus_not?: String;
  resultstatus_in?: String[] | String;
  resultstatus_not_in?: String[] | String;
  resultstatus_lt?: String;
  resultstatus_lte?: String;
  resultstatus_gt?: String;
  resultstatus_gte?: String;
  resultstatus_contains?: String;
  resultstatus_not_contains?: String;
  resultstatus_starts_with?: String;
  resultstatus_not_starts_with?: String;
  resultstatus_ends_with?: String;
  resultstatus_not_ends_with?: String;
  stopped?: String;
  stopped_not?: String;
  stopped_in?: String[] | String;
  stopped_not_in?: String[] | String;
  stopped_lt?: String;
  stopped_lte?: String;
  stopped_gt?: String;
  stopped_gte?: String;
  stopped_contains?: String;
  stopped_not_contains?: String;
  stopped_starts_with?: String;
  stopped_not_starts_with?: String;
  stopped_ends_with?: String;
  stopped_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: DateTimeInput;
  value_not?: DateTimeInput;
  value_in?: DateTimeInput[] | DateTimeInput;
  value_not_in?: DateTimeInput[] | DateTimeInput;
  value_lt?: DateTimeInput;
  value_lte?: DateTimeInput;
  value_gt?: DateTimeInput;
  value_gte?: DateTimeInput;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  warning?: Int;
  warning_not?: Int;
  warning_in?: Int[] | Int;
  warning_not_in?: Int[] | Int;
  warning_lt?: Int;
  warning_lte?: Int;
  warning_gt?: Int;
  warning_gte?: Int;
  AND?: DatetimeeventWhereInput[] | DatetimeeventWhereInput;
  OR?: DatetimeeventWhereInput[] | DatetimeeventWhereInput;
  NOT?: DatetimeeventWhereInput[] | DatetimeeventWhereInput;
}

export interface ProcedureeventsMvUpdateWithWhereUniqueNestedInput {
  where: ProcedureeventsMvWhereUniqueInput;
  data: ProcedureeventsMvUpdateDataInput;
}

export interface DItemUpdateInput {
  abbreviation?: String;
  category?: String;
  chartevents?: CharteventUpdateManyInput;
  conceptid?: Int;
  datetimeevents?: DatetimeeventUpdateManyInput;
  dbsource?: String;
  inputevents_mv?: InputeventsMvUpdateManyInput;
  itemid?: Int;
  label?: String;
  linksto?: String;
  microbiologyevents?: MicrobiologyeventUpdateManyInput;
  outputevents?: OutputeventUpdateManyInput;
  param_type?: String;
  procedureevents_mv?: ProcedureeventsMvUpdateManyInput;
  unitname?: String;
}

export interface ProcedureeventsMvUpdateDataInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface Chartevents9UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProcedureeventsMvUpsertWithWhereUniqueNestedInput {
  where: ProcedureeventsMvWhereUniqueInput;
  update: ProcedureeventsMvUpdateDataInput;
  create: ProcedureeventsMvCreateInput;
}

export interface Chartevents4UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProcedureeventsMvScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  cancelreason?: Int;
  cancelreason_not?: Int;
  cancelreason_in?: Int[] | Int;
  cancelreason_not_in?: Int[] | Int;
  cancelreason_lt?: Int;
  cancelreason_lte?: Int;
  cancelreason_gt?: Int;
  cancelreason_gte?: Int;
  comments_canceledby?: String;
  comments_canceledby_not?: String;
  comments_canceledby_in?: String[] | String;
  comments_canceledby_not_in?: String[] | String;
  comments_canceledby_lt?: String;
  comments_canceledby_lte?: String;
  comments_canceledby_gt?: String;
  comments_canceledby_gte?: String;
  comments_canceledby_contains?: String;
  comments_canceledby_not_contains?: String;
  comments_canceledby_starts_with?: String;
  comments_canceledby_not_starts_with?: String;
  comments_canceledby_ends_with?: String;
  comments_canceledby_not_ends_with?: String;
  comments_date?: DateTimeInput;
  comments_date_not?: DateTimeInput;
  comments_date_in?: DateTimeInput[] | DateTimeInput;
  comments_date_not_in?: DateTimeInput[] | DateTimeInput;
  comments_date_lt?: DateTimeInput;
  comments_date_lte?: DateTimeInput;
  comments_date_gt?: DateTimeInput;
  comments_date_gte?: DateTimeInput;
  comments_editedby?: String;
  comments_editedby_not?: String;
  comments_editedby_in?: String[] | String;
  comments_editedby_not_in?: String[] | String;
  comments_editedby_lt?: String;
  comments_editedby_lte?: String;
  comments_editedby_gt?: String;
  comments_editedby_gte?: String;
  comments_editedby_contains?: String;
  comments_editedby_not_contains?: String;
  comments_editedby_starts_with?: String;
  comments_editedby_not_starts_with?: String;
  comments_editedby_ends_with?: String;
  comments_editedby_not_ends_with?: String;
  continueinnextdept?: Int;
  continueinnextdept_not?: Int;
  continueinnextdept_in?: Int[] | Int;
  continueinnextdept_not_in?: Int[] | Int;
  continueinnextdept_lt?: Int;
  continueinnextdept_lte?: Int;
  continueinnextdept_gt?: Int;
  continueinnextdept_gte?: Int;
  endtime?: DateTimeInput;
  endtime_not?: DateTimeInput;
  endtime_in?: DateTimeInput[] | DateTimeInput;
  endtime_not_in?: DateTimeInput[] | DateTimeInput;
  endtime_lt?: DateTimeInput;
  endtime_lte?: DateTimeInput;
  endtime_gt?: DateTimeInput;
  endtime_gte?: DateTimeInput;
  isopenbag?: Int;
  isopenbag_not?: Int;
  isopenbag_in?: Int[] | Int;
  isopenbag_not_in?: Int[] | Int;
  isopenbag_lt?: Int;
  isopenbag_lte?: Int;
  isopenbag_gt?: Int;
  isopenbag_gte?: Int;
  linkorderid?: Int;
  linkorderid_not?: Int;
  linkorderid_in?: Int[] | Int;
  linkorderid_not_in?: Int[] | Int;
  linkorderid_lt?: Int;
  linkorderid_lte?: Int;
  linkorderid_gt?: Int;
  linkorderid_gte?: Int;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  locationcategory?: String;
  locationcategory_not?: String;
  locationcategory_in?: String[] | String;
  locationcategory_not_in?: String[] | String;
  locationcategory_lt?: String;
  locationcategory_lte?: String;
  locationcategory_gt?: String;
  locationcategory_gte?: String;
  locationcategory_contains?: String;
  locationcategory_not_contains?: String;
  locationcategory_starts_with?: String;
  locationcategory_not_starts_with?: String;
  locationcategory_ends_with?: String;
  locationcategory_not_ends_with?: String;
  ordercategorydescription?: String;
  ordercategorydescription_not?: String;
  ordercategorydescription_in?: String[] | String;
  ordercategorydescription_not_in?: String[] | String;
  ordercategorydescription_lt?: String;
  ordercategorydescription_lte?: String;
  ordercategorydescription_gt?: String;
  ordercategorydescription_gte?: String;
  ordercategorydescription_contains?: String;
  ordercategorydescription_not_contains?: String;
  ordercategorydescription_starts_with?: String;
  ordercategorydescription_not_starts_with?: String;
  ordercategorydescription_ends_with?: String;
  ordercategorydescription_not_ends_with?: String;
  ordercategoryname?: String;
  ordercategoryname_not?: String;
  ordercategoryname_in?: String[] | String;
  ordercategoryname_not_in?: String[] | String;
  ordercategoryname_lt?: String;
  ordercategoryname_lte?: String;
  ordercategoryname_gt?: String;
  ordercategoryname_gte?: String;
  ordercategoryname_contains?: String;
  ordercategoryname_not_contains?: String;
  ordercategoryname_starts_with?: String;
  ordercategoryname_not_starts_with?: String;
  ordercategoryname_ends_with?: String;
  ordercategoryname_not_ends_with?: String;
  orderid?: Int;
  orderid_not?: Int;
  orderid_in?: Int[] | Int;
  orderid_not_in?: Int[] | Int;
  orderid_lt?: Int;
  orderid_lte?: Int;
  orderid_gt?: Int;
  orderid_gte?: Int;
  secondaryordercategoryname?: String;
  secondaryordercategoryname_not?: String;
  secondaryordercategoryname_in?: String[] | String;
  secondaryordercategoryname_not_in?: String[] | String;
  secondaryordercategoryname_lt?: String;
  secondaryordercategoryname_lte?: String;
  secondaryordercategoryname_gt?: String;
  secondaryordercategoryname_gte?: String;
  secondaryordercategoryname_contains?: String;
  secondaryordercategoryname_not_contains?: String;
  secondaryordercategoryname_starts_with?: String;
  secondaryordercategoryname_not_starts_with?: String;
  secondaryordercategoryname_ends_with?: String;
  secondaryordercategoryname_not_ends_with?: String;
  starttime?: DateTimeInput;
  starttime_not?: DateTimeInput;
  starttime_in?: DateTimeInput[] | DateTimeInput;
  starttime_not_in?: DateTimeInput[] | DateTimeInput;
  starttime_lt?: DateTimeInput;
  starttime_lte?: DateTimeInput;
  starttime_gt?: DateTimeInput;
  starttime_gte?: DateTimeInput;
  statusdescription?: String;
  statusdescription_not?: String;
  statusdescription_in?: String[] | String;
  statusdescription_not_in?: String[] | String;
  statusdescription_lt?: String;
  statusdescription_lte?: String;
  statusdescription_gt?: String;
  statusdescription_gte?: String;
  statusdescription_contains?: String;
  statusdescription_not_contains?: String;
  statusdescription_starts_with?: String;
  statusdescription_not_starts_with?: String;
  statusdescription_ends_with?: String;
  statusdescription_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  value?: Float;
  value_not?: Float;
  value_in?: Float[] | Float;
  value_not_in?: Float[] | Float;
  value_lt?: Float;
  value_lte?: Float;
  value_gt?: Float;
  value_gte?: Float;
  valueuom?: String;
  valueuom_not?: String;
  valueuom_in?: String[] | String;
  valueuom_not_in?: String[] | String;
  valueuom_lt?: String;
  valueuom_lte?: String;
  valueuom_gt?: String;
  valueuom_gte?: String;
  valueuom_contains?: String;
  valueuom_not_contains?: String;
  valueuom_starts_with?: String;
  valueuom_not_starts_with?: String;
  valueuom_ends_with?: String;
  valueuom_not_ends_with?: String;
  AND?: ProcedureeventsMvScalarWhereInput[] | ProcedureeventsMvScalarWhereInput;
  OR?: ProcedureeventsMvScalarWhereInput[] | ProcedureeventsMvScalarWhereInput;
  NOT?: ProcedureeventsMvScalarWhereInput[] | ProcedureeventsMvScalarWhereInput;
}

export interface Chartevents15UpdateManyMutationInput {
  cgid?: Int;
  charttime?: DateTimeInput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id?: Int;
  stopped?: String;
  storetime?: DateTimeInput;
  subject_id?: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface ProcedureeventsMvUpdateManyWithWhereNestedInput {
  where: ProcedureeventsMvScalarWhereInput;
  data: ProcedureeventsMvUpdateManyDataInput;
}

export interface NoteeventWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  chartdate?: DateTimeInput;
  chartdate_not?: DateTimeInput;
  chartdate_in?: DateTimeInput[] | DateTimeInput;
  chartdate_not_in?: DateTimeInput[] | DateTimeInput;
  chartdate_lt?: DateTimeInput;
  chartdate_lte?: DateTimeInput;
  chartdate_gt?: DateTimeInput;
  chartdate_gte?: DateTimeInput;
  charttime?: DateTimeInput;
  charttime_not?: DateTimeInput;
  charttime_in?: DateTimeInput[] | DateTimeInput;
  charttime_not_in?: DateTimeInput[] | DateTimeInput;
  charttime_lt?: DateTimeInput;
  charttime_lte?: DateTimeInput;
  charttime_gt?: DateTimeInput;
  charttime_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  iserror?: String;
  iserror_not?: String;
  iserror_in?: String[] | String;
  iserror_not_in?: String[] | String;
  iserror_lt?: String;
  iserror_lte?: String;
  iserror_gt?: String;
  iserror_gte?: String;
  iserror_contains?: String;
  iserror_not_contains?: String;
  iserror_starts_with?: String;
  iserror_not_starts_with?: String;
  iserror_ends_with?: String;
  iserror_not_ends_with?: String;
  storetime?: DateTimeInput;
  storetime_not?: DateTimeInput;
  storetime_in?: DateTimeInput[] | DateTimeInput;
  storetime_not_in?: DateTimeInput[] | DateTimeInput;
  storetime_lt?: DateTimeInput;
  storetime_lte?: DateTimeInput;
  storetime_gt?: DateTimeInput;
  storetime_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: NoteeventWhereInput[] | NoteeventWhereInput;
  OR?: NoteeventWhereInput[] | NoteeventWhereInput;
  NOT?: NoteeventWhereInput[] | NoteeventWhereInput;
}

export interface ProcedureeventsMvUpdateManyDataInput {
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeInput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeInput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeInput;
  statusdescription?: String;
  storetime?: DateTimeInput;
  value?: Float;
  valueuom?: String;
}

export interface TransferWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  eventtype?: String;
  eventtype_not?: String;
  eventtype_in?: String[] | String;
  eventtype_not_in?: String[] | String;
  eventtype_lt?: String;
  eventtype_lte?: String;
  eventtype_gt?: String;
  eventtype_gte?: String;
  eventtype_contains?: String;
  eventtype_not_contains?: String;
  eventtype_starts_with?: String;
  eventtype_not_starts_with?: String;
  eventtype_ends_with?: String;
  eventtype_not_ends_with?: String;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  prev_careunit?: String;
  prev_careunit_not?: String;
  prev_careunit_in?: String[] | String;
  prev_careunit_not_in?: String[] | String;
  prev_careunit_lt?: String;
  prev_careunit_lte?: String;
  prev_careunit_gt?: String;
  prev_careunit_gte?: String;
  prev_careunit_contains?: String;
  prev_careunit_not_contains?: String;
  prev_careunit_starts_with?: String;
  prev_careunit_not_starts_with?: String;
  prev_careunit_ends_with?: String;
  prev_careunit_not_ends_with?: String;
  prev_wardid?: Int;
  prev_wardid_not?: Int;
  prev_wardid_in?: Int[] | Int;
  prev_wardid_not_in?: Int[] | Int;
  prev_wardid_lt?: Int;
  prev_wardid_lte?: Int;
  prev_wardid_gt?: Int;
  prev_wardid_gte?: Int;
  AND?: TransferWhereInput[] | TransferWhereInput;
  OR?: TransferWhereInput[] | TransferWhereInput;
  NOT?: TransferWhereInput[] | TransferWhereInput;
}

export interface TransferUpdateManyInput {
  create?: TransferCreateInput[] | TransferCreateInput;
  update?:
    | TransferUpdateWithWhereUniqueNestedInput[]
    | TransferUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TransferUpsertWithWhereUniqueNestedInput[]
    | TransferUpsertWithWhereUniqueNestedInput;
  delete?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  connect?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  set?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  disconnect?: TransferWhereUniqueInput[] | TransferWhereUniqueInput;
  deleteMany?: TransferScalarWhereInput[] | TransferScalarWhereInput;
  updateMany?:
    | TransferUpdateManyWithWhereNestedInput[]
    | TransferUpdateManyWithWhereNestedInput;
}

export interface ServiceUpdateInput {
  curr_service?: String;
  prev_service?: String;
  transfertime?: DateTimeInput;
}

export interface TransferUpdateWithWhereUniqueNestedInput {
  where: TransferWhereUniqueInput;
  data: TransferUpdateDataInput;
}

export interface LabeventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface TransferUpdateDataInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface DIcdDiagnosisUpdateInput {
  icd9_code?: String;
  long_title?: String;
  short_title?: String;
}

export interface TransferUpsertWithWhereUniqueNestedInput {
  where: TransferWhereUniqueInput;
  update: TransferUpdateDataInput;
  create: TransferCreateInput;
}

export interface DItemWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  abbreviation?: String;
  abbreviation_not?: String;
  abbreviation_in?: String[] | String;
  abbreviation_not_in?: String[] | String;
  abbreviation_lt?: String;
  abbreviation_lte?: String;
  abbreviation_gt?: String;
  abbreviation_gte?: String;
  abbreviation_contains?: String;
  abbreviation_not_contains?: String;
  abbreviation_starts_with?: String;
  abbreviation_not_starts_with?: String;
  abbreviation_ends_with?: String;
  abbreviation_not_ends_with?: String;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  chartevents_every?: CharteventWhereInput;
  chartevents_some?: CharteventWhereInput;
  chartevents_none?: CharteventWhereInput;
  conceptid?: Int;
  conceptid_not?: Int;
  conceptid_in?: Int[] | Int;
  conceptid_not_in?: Int[] | Int;
  conceptid_lt?: Int;
  conceptid_lte?: Int;
  conceptid_gt?: Int;
  conceptid_gte?: Int;
  datetimeevents_every?: DatetimeeventWhereInput;
  datetimeevents_some?: DatetimeeventWhereInput;
  datetimeevents_none?: DatetimeeventWhereInput;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  inputevents_mv_every?: InputeventsMvWhereInput;
  inputevents_mv_some?: InputeventsMvWhereInput;
  inputevents_mv_none?: InputeventsMvWhereInput;
  itemid?: Int;
  itemid_not?: Int;
  itemid_in?: Int[] | Int;
  itemid_not_in?: Int[] | Int;
  itemid_lt?: Int;
  itemid_lte?: Int;
  itemid_gt?: Int;
  itemid_gte?: Int;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  linksto?: String;
  linksto_not?: String;
  linksto_in?: String[] | String;
  linksto_not_in?: String[] | String;
  linksto_lt?: String;
  linksto_lte?: String;
  linksto_gt?: String;
  linksto_gte?: String;
  linksto_contains?: String;
  linksto_not_contains?: String;
  linksto_starts_with?: String;
  linksto_not_starts_with?: String;
  linksto_ends_with?: String;
  linksto_not_ends_with?: String;
  microbiologyevents_every?: MicrobiologyeventWhereInput;
  microbiologyevents_some?: MicrobiologyeventWhereInput;
  microbiologyevents_none?: MicrobiologyeventWhereInput;
  outputevents_every?: OutputeventWhereInput;
  outputevents_some?: OutputeventWhereInput;
  outputevents_none?: OutputeventWhereInput;
  param_type?: String;
  param_type_not?: String;
  param_type_in?: String[] | String;
  param_type_not_in?: String[] | String;
  param_type_lt?: String;
  param_type_lte?: String;
  param_type_gt?: String;
  param_type_gte?: String;
  param_type_contains?: String;
  param_type_not_contains?: String;
  param_type_starts_with?: String;
  param_type_not_starts_with?: String;
  param_type_ends_with?: String;
  param_type_not_ends_with?: String;
  procedureevents_mv_every?: ProcedureeventsMvWhereInput;
  procedureevents_mv_some?: ProcedureeventsMvWhereInput;
  procedureevents_mv_none?: ProcedureeventsMvWhereInput;
  unitname?: String;
  unitname_not?: String;
  unitname_in?: String[] | String;
  unitname_not_in?: String[] | String;
  unitname_lt?: String;
  unitname_lte?: String;
  unitname_gt?: String;
  unitname_gte?: String;
  unitname_contains?: String;
  unitname_not_contains?: String;
  unitname_starts_with?: String;
  unitname_not_starts_with?: String;
  unitname_ends_with?: String;
  unitname_not_ends_with?: String;
  AND?: DItemWhereInput[] | DItemWhereInput;
  OR?: DItemWhereInput[] | DItemWhereInput;
  NOT?: DItemWhereInput[] | DItemWhereInput;
}

export interface TransferScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  curr_careunit?: String;
  curr_careunit_not?: String;
  curr_careunit_in?: String[] | String;
  curr_careunit_not_in?: String[] | String;
  curr_careunit_lt?: String;
  curr_careunit_lte?: String;
  curr_careunit_gt?: String;
  curr_careunit_gte?: String;
  curr_careunit_contains?: String;
  curr_careunit_not_contains?: String;
  curr_careunit_starts_with?: String;
  curr_careunit_not_starts_with?: String;
  curr_careunit_ends_with?: String;
  curr_careunit_not_ends_with?: String;
  curr_wardid?: Int;
  curr_wardid_not?: Int;
  curr_wardid_in?: Int[] | Int;
  curr_wardid_not_in?: Int[] | Int;
  curr_wardid_lt?: Int;
  curr_wardid_lte?: Int;
  curr_wardid_gt?: Int;
  curr_wardid_gte?: Int;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  eventtype?: String;
  eventtype_not?: String;
  eventtype_in?: String[] | String;
  eventtype_not_in?: String[] | String;
  eventtype_lt?: String;
  eventtype_lte?: String;
  eventtype_gt?: String;
  eventtype_gte?: String;
  eventtype_contains?: String;
  eventtype_not_contains?: String;
  eventtype_starts_with?: String;
  eventtype_not_starts_with?: String;
  eventtype_ends_with?: String;
  eventtype_not_ends_with?: String;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  prev_careunit?: String;
  prev_careunit_not?: String;
  prev_careunit_in?: String[] | String;
  prev_careunit_not_in?: String[] | String;
  prev_careunit_lt?: String;
  prev_careunit_lte?: String;
  prev_careunit_gt?: String;
  prev_careunit_gte?: String;
  prev_careunit_contains?: String;
  prev_careunit_not_contains?: String;
  prev_careunit_starts_with?: String;
  prev_careunit_not_starts_with?: String;
  prev_careunit_ends_with?: String;
  prev_careunit_not_ends_with?: String;
  prev_wardid?: Int;
  prev_wardid_not?: Int;
  prev_wardid_in?: Int[] | Int;
  prev_wardid_not_in?: Int[] | Int;
  prev_wardid_lt?: Int;
  prev_wardid_lte?: Int;
  prev_wardid_gt?: Int;
  prev_wardid_gte?: Int;
  AND?: TransferScalarWhereInput[] | TransferScalarWhereInput;
  OR?: TransferScalarWhereInput[] | TransferScalarWhereInput;
  NOT?: TransferScalarWhereInput[] | TransferScalarWhereInput;
}

export type CalloutWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface TransferUpdateManyWithWhereNestedInput {
  where: TransferScalarWhereInput;
  data: TransferUpdateManyDataInput;
}

export interface DrgcodeWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  drg_code?: String;
  drg_code_not?: String;
  drg_code_in?: String[] | String;
  drg_code_not_in?: String[] | String;
  drg_code_lt?: String;
  drg_code_lte?: String;
  drg_code_gt?: String;
  drg_code_gte?: String;
  drg_code_contains?: String;
  drg_code_not_contains?: String;
  drg_code_starts_with?: String;
  drg_code_not_starts_with?: String;
  drg_code_ends_with?: String;
  drg_code_not_ends_with?: String;
  drg_mortality?: Int;
  drg_mortality_not?: Int;
  drg_mortality_in?: Int[] | Int;
  drg_mortality_not_in?: Int[] | Int;
  drg_mortality_lt?: Int;
  drg_mortality_lte?: Int;
  drg_mortality_gt?: Int;
  drg_mortality_gte?: Int;
  drg_severity?: Int;
  drg_severity_not?: Int;
  drg_severity_in?: Int[] | Int;
  drg_severity_not_in?: Int[] | Int;
  drg_severity_lt?: Int;
  drg_severity_lte?: Int;
  drg_severity_gt?: Int;
  drg_severity_gte?: Int;
  drg_type?: String;
  drg_type_not?: String;
  drg_type_in?: String[] | String;
  drg_type_not_in?: String[] | String;
  drg_type_lt?: String;
  drg_type_lte?: String;
  drg_type_gt?: String;
  drg_type_gte?: String;
  drg_type_contains?: String;
  drg_type_not_contains?: String;
  drg_type_starts_with?: String;
  drg_type_not_starts_with?: String;
  drg_type_ends_with?: String;
  drg_type_not_ends_with?: String;
  AND?: DrgcodeWhereInput[] | DrgcodeWhereInput;
  OR?: DrgcodeWhereInput[] | DrgcodeWhereInput;
  NOT?: DrgcodeWhereInput[] | DrgcodeWhereInput;
}

export interface IcustayUpdateManyWithWhereNestedInput {
  where: IcustayScalarWhereInput;
  data: IcustayUpdateManyDataInput;
}

export interface IcustayScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  dbsource?: String;
  dbsource_not?: String;
  dbsource_in?: String[] | String;
  dbsource_not_in?: String[] | String;
  dbsource_lt?: String;
  dbsource_lte?: String;
  dbsource_gt?: String;
  dbsource_gte?: String;
  dbsource_contains?: String;
  dbsource_not_contains?: String;
  dbsource_starts_with?: String;
  dbsource_not_starts_with?: String;
  dbsource_ends_with?: String;
  dbsource_not_ends_with?: String;
  first_careunit?: String;
  first_careunit_not?: String;
  first_careunit_in?: String[] | String;
  first_careunit_not_in?: String[] | String;
  first_careunit_lt?: String;
  first_careunit_lte?: String;
  first_careunit_gt?: String;
  first_careunit_gte?: String;
  first_careunit_contains?: String;
  first_careunit_not_contains?: String;
  first_careunit_starts_with?: String;
  first_careunit_not_starts_with?: String;
  first_careunit_ends_with?: String;
  first_careunit_not_ends_with?: String;
  first_wardid?: Int;
  first_wardid_not?: Int;
  first_wardid_in?: Int[] | Int;
  first_wardid_not_in?: Int[] | Int;
  first_wardid_lt?: Int;
  first_wardid_lte?: Int;
  first_wardid_gt?: Int;
  first_wardid_gte?: Int;
  icustay_id?: Int;
  icustay_id_not?: Int;
  icustay_id_in?: Int[] | Int;
  icustay_id_not_in?: Int[] | Int;
  icustay_id_lt?: Int;
  icustay_id_lte?: Int;
  icustay_id_gt?: Int;
  icustay_id_gte?: Int;
  intime?: DateTimeInput;
  intime_not?: DateTimeInput;
  intime_in?: DateTimeInput[] | DateTimeInput;
  intime_not_in?: DateTimeInput[] | DateTimeInput;
  intime_lt?: DateTimeInput;
  intime_lte?: DateTimeInput;
  intime_gt?: DateTimeInput;
  intime_gte?: DateTimeInput;
  last_careunit?: String;
  last_careunit_not?: String;
  last_careunit_in?: String[] | String;
  last_careunit_not_in?: String[] | String;
  last_careunit_lt?: String;
  last_careunit_lte?: String;
  last_careunit_gt?: String;
  last_careunit_gte?: String;
  last_careunit_contains?: String;
  last_careunit_not_contains?: String;
  last_careunit_starts_with?: String;
  last_careunit_not_starts_with?: String;
  last_careunit_ends_with?: String;
  last_careunit_not_ends_with?: String;
  last_wardid?: Int;
  last_wardid_not?: Int;
  last_wardid_in?: Int[] | Int;
  last_wardid_not_in?: Int[] | Int;
  last_wardid_lt?: Int;
  last_wardid_lte?: Int;
  last_wardid_gt?: Int;
  last_wardid_gte?: Int;
  los?: Float;
  los_not?: Float;
  los_in?: Float[] | Float;
  los_not_in?: Float[] | Float;
  los_lt?: Float;
  los_lte?: Float;
  los_gt?: Float;
  los_gte?: Float;
  outtime?: DateTimeInput;
  outtime_not?: DateTimeInput;
  outtime_in?: DateTimeInput[] | DateTimeInput;
  outtime_not_in?: DateTimeInput[] | DateTimeInput;
  outtime_lt?: DateTimeInput;
  outtime_lte?: DateTimeInput;
  outtime_gt?: DateTimeInput;
  outtime_gte?: DateTimeInput;
  AND?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
  OR?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
  NOT?: IcustayScalarWhereInput[] | IcustayScalarWhereInput;
}

export interface IcustayUpsertWithWhereUniqueNestedInput {
  where: IcustayWhereUniqueInput;
  update: IcustayUpdateDataInput;
  create: IcustayCreateInput;
}

export interface TransferUpdateManyDataInput {
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeInput;
  los?: Float;
  outtime?: DateTimeInput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface DatetimeeventUpdateManyMutationInput {
  charttime?: DateTimeInput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeInput;
  value?: DateTimeInput;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents11SubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Chartevents11WhereInput;
  AND?:
    | Chartevents11SubscriptionWhereInput[]
    | Chartevents11SubscriptionWhereInput;
  OR?:
    | Chartevents11SubscriptionWhereInput[]
    | Chartevents11SubscriptionWhereInput;
  NOT?:
    | Chartevents11SubscriptionWhereInput[]
    | Chartevents11SubscriptionWhereInput;
}

export type DiagnosesIcdWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export type DIcdDiagnosisWhereUniqueInput = AtLeastOne<{
  id: UUID;
  icd9_code?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface TransferPreviousValues {
  id: UUID;
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeOutput;
  los?: Float;
  outtime?: DateTimeOutput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface TransferPreviousValuesPromise
  extends Promise<TransferPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  dbsource: () => Promise<String>;
  eventtype: () => Promise<String>;
  intime: () => Promise<DateTimeOutput>;
  los: () => Promise<Float>;
  outtime: () => Promise<DateTimeOutput>;
  prev_careunit: () => Promise<String>;
  prev_wardid: () => Promise<Int>;
}

export interface TransferPreviousValuesSubscription
  extends Promise<AsyncIterator<TransferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  eventtype: () => Promise<AsyncIterator<String>>;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  los: () => Promise<AsyncIterator<Float>>;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  prev_careunit: () => Promise<AsyncIterator<String>>;
  prev_wardid: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents14Connection {
  pageInfo: PageInfo;
  edges: Chartevents14Edge[];
}

export interface Chartevents14ConnectionPromise
  extends Promise<Chartevents14Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents14Edge>>() => T;
  aggregate: <T = AggregateChartevents14Promise>() => T;
}

export interface Chartevents14ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents14Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents14EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents14Subscription>() => T;
}

export interface Labevent {
  id: UUID;
  charttime?: DateTimeOutput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface LabeventPromise extends Promise<Labevent>, Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  flag: () => Promise<String>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface LabeventSubscription
  extends Promise<AsyncIterator<Labevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  flag: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents14 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents14Promise
  extends Promise<Chartevents14>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents14Subscription
  extends Promise<AsyncIterator<Chartevents14>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Transfer {
  id: UUID;
  curr_careunit?: String;
  curr_wardid?: Int;
  dbsource?: String;
  eventtype?: String;
  intime?: DateTimeOutput;
  los?: Float;
  outtime?: DateTimeOutput;
  prev_careunit?: String;
  prev_wardid?: Int;
}

export interface TransferPromise extends Promise<Transfer>, Fragmentable {
  id: () => Promise<UUID>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  dbsource: () => Promise<String>;
  eventtype: () => Promise<String>;
  intime: () => Promise<DateTimeOutput>;
  los: () => Promise<Float>;
  outtime: () => Promise<DateTimeOutput>;
  prev_careunit: () => Promise<String>;
  prev_wardid: () => Promise<Int>;
}

export interface TransferSubscription
  extends Promise<AsyncIterator<Transfer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  eventtype: () => Promise<AsyncIterator<String>>;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  los: () => Promise<AsyncIterator<Float>>;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  prev_careunit: () => Promise<AsyncIterator<String>>;
  prev_wardid: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents13 {
  count: Int;
}

export interface AggregateChartevents13Promise
  extends Promise<AggregateChartevents13>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents13Subscription
  extends Promise<AsyncIterator<AggregateChartevents13>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TransferEdge {
  node: Transfer;
  cursor: String;
}

export interface TransferEdgePromise
  extends Promise<TransferEdge>,
    Fragmentable {
  node: <T = TransferPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransferEdgeSubscription
  extends Promise<AsyncIterator<TransferEdge>>,
    Fragmentable {
  node: <T = TransferSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents13Edge {
  node: Chartevents13;
  cursor: String;
}

export interface Chartevents13EdgePromise
  extends Promise<Chartevents13Edge>,
    Fragmentable {
  node: <T = Chartevents13Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents13EdgeSubscription
  extends Promise<AsyncIterator<Chartevents13Edge>>,
    Fragmentable {
  node: <T = Chartevents13Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents13Connection {
  pageInfo: PageInfo;
  edges: Chartevents13Edge[];
}

export interface Chartevents13ConnectionPromise
  extends Promise<Chartevents13Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents13Edge>>() => T;
  aggregate: <T = AggregateChartevents13Promise>() => T;
}

export interface Chartevents13ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents13Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents13EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents13Subscription>() => T;
}

export interface ServiceConnection {
  pageInfo: PageInfo;
  edges: ServiceEdge[];
}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface TransferConnection {
  pageInfo: PageInfo;
  edges: TransferEdge[];
}

export interface TransferConnectionPromise
  extends Promise<TransferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransferEdge>>() => T;
  aggregate: <T = AggregateTransferPromise>() => T;
}

export interface TransferConnectionSubscription
  extends Promise<AsyncIterator<TransferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransferEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransferSubscription>() => T;
}

export interface ProceduresIcdSubscriptionPayload {
  mutation: MutationType;
  node: ProceduresIcd;
  updatedFields: String[];
  previousValues: ProceduresIcdPreviousValues;
}

export interface ProceduresIcdSubscriptionPayloadPromise
  extends Promise<ProceduresIcdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProceduresIcdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProceduresIcdPreviousValuesPromise>() => T;
}

export interface ProceduresIcdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProceduresIcdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProceduresIcdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProceduresIcdPreviousValuesSubscription>() => T;
}

export interface ServiceEdge {
  node: Service;
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProceduresIcdEdge {
  node: ProceduresIcd;
  cursor: String;
}

export interface ProceduresIcdEdgePromise
  extends Promise<ProceduresIcdEdge>,
    Fragmentable {
  node: <T = ProceduresIcdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProceduresIcdEdgeSubscription
  extends Promise<AsyncIterator<ProceduresIcdEdge>>,
    Fragmentable {
  node: <T = ProceduresIcdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProceduresIcd {
  count: Int;
}

export interface AggregateProceduresIcdPromise
  extends Promise<AggregateProceduresIcd>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProceduresIcdSubscription
  extends Promise<AsyncIterator<AggregateProceduresIcd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProcedureeventsMvEdge {
  node: ProcedureeventsMv;
  cursor: String;
}

export interface ProcedureeventsMvEdgePromise
  extends Promise<ProcedureeventsMvEdge>,
    Fragmentable {
  node: <T = ProcedureeventsMvPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProcedureeventsMvEdgeSubscription
  extends Promise<AsyncIterator<ProcedureeventsMvEdge>>,
    Fragmentable {
  node: <T = ProcedureeventsMvSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProceduresIcdConnection {
  pageInfo: PageInfo;
  edges: ProceduresIcdEdge[];
}

export interface ProceduresIcdConnectionPromise
  extends Promise<ProceduresIcdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProceduresIcdEdge>>() => T;
  aggregate: <T = AggregateProceduresIcdPromise>() => T;
}

export interface ProceduresIcdConnectionSubscription
  extends Promise<AsyncIterator<ProceduresIcdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProceduresIcdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProceduresIcdSubscription>() => T;
}

export interface AggregatePrescription {
  count: Int;
}

export interface AggregatePrescriptionPromise
  extends Promise<AggregatePrescription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePrescriptionSubscription
  extends Promise<AsyncIterator<AggregatePrescription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdmissionSubscriptionPayload {
  mutation: MutationType;
  node: Admission;
  updatedFields: String[];
  previousValues: AdmissionPreviousValues;
}

export interface AdmissionSubscriptionPayloadPromise
  extends Promise<AdmissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdmissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdmissionPreviousValuesPromise>() => T;
}

export interface AdmissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdmissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdmissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdmissionPreviousValuesSubscription>() => T;
}

export interface PrescriptionConnection {
  pageInfo: PageInfo;
  edges: PrescriptionEdge[];
}

export interface PrescriptionConnectionPromise
  extends Promise<PrescriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PrescriptionEdge>>() => T;
  aggregate: <T = AggregatePrescriptionPromise>() => T;
}

export interface PrescriptionConnectionSubscription
  extends Promise<AsyncIterator<PrescriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PrescriptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePrescriptionSubscription>() => T;
}

export interface AdmissionPreviousValues {
  id: UUID;
  admission_location: String;
  admission_type: String;
  admittime: DateTimeOutput;
  deathtime?: DateTimeOutput;
  diagnosis?: String;
  discharge_location: String;
  dischtime: DateTimeOutput;
  edouttime?: DateTimeOutput;
  edregtime?: DateTimeOutput;
  ethnicity: String;
  hadm_id: Int;
  has_chartevents_data: Int;
  hospital_expire_flag?: Int;
  insurance: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface AdmissionPreviousValuesPromise
  extends Promise<AdmissionPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  admission_location: () => Promise<String>;
  admission_type: () => Promise<String>;
  admittime: () => Promise<DateTimeOutput>;
  deathtime: () => Promise<DateTimeOutput>;
  diagnosis: () => Promise<String>;
  discharge_location: () => Promise<String>;
  dischtime: () => Promise<DateTimeOutput>;
  edouttime: () => Promise<DateTimeOutput>;
  edregtime: () => Promise<DateTimeOutput>;
  ethnicity: () => Promise<String>;
  hadm_id: () => Promise<Int>;
  has_chartevents_data: () => Promise<Int>;
  hospital_expire_flag: () => Promise<Int>;
  insurance: () => Promise<String>;
  language: () => Promise<String>;
  marital_status: () => Promise<String>;
  religion: () => Promise<String>;
}

export interface AdmissionPreviousValuesSubscription
  extends Promise<AsyncIterator<AdmissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  admission_location: () => Promise<AsyncIterator<String>>;
  admission_type: () => Promise<AsyncIterator<String>>;
  admittime: () => Promise<AsyncIterator<DateTimeOutput>>;
  deathtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  diagnosis: () => Promise<AsyncIterator<String>>;
  discharge_location: () => Promise<AsyncIterator<String>>;
  dischtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  edouttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  edregtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  has_chartevents_data: () => Promise<AsyncIterator<Int>>;
  hospital_expire_flag: () => Promise<AsyncIterator<Int>>;
  insurance: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  marital_status: () => Promise<AsyncIterator<String>>;
  religion: () => Promise<AsyncIterator<String>>;
}

export interface PatientEdge {
  node: Patient;
  cursor: String;
}

export interface PatientEdgePromise extends Promise<PatientEdge>, Fragmentable {
  node: <T = PatientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientEdgeSubscription
  extends Promise<AsyncIterator<PatientEdge>>,
    Fragmentable {
  node: <T = PatientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents13 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents13Promise
  extends Promise<Chartevents13>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents13Subscription
  extends Promise<AsyncIterator<Chartevents13>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Admission {
  id: UUID;
  admission_location: String;
  admission_type: String;
  admittime: DateTimeOutput;
  deathtime?: DateTimeOutput;
  diagnosis?: String;
  discharge_location: String;
  dischtime: DateTimeOutput;
  edouttime?: DateTimeOutput;
  edregtime?: DateTimeOutput;
  ethnicity: String;
  hadm_id: Int;
  has_chartevents_data: Int;
  hospital_expire_flag?: Int;
  insurance: String;
  language?: String;
  marital_status?: String;
  religion?: String;
}

export interface AdmissionPromise extends Promise<Admission>, Fragmentable {
  id: () => Promise<UUID>;
  admission_location: () => Promise<String>;
  admission_type: () => Promise<String>;
  admittime: () => Promise<DateTimeOutput>;
  callout: <T = FragmentableArray<Callout>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = FragmentableArray<Cptevent>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deathtime: () => Promise<DateTimeOutput>;
  diagnoses_icd: <T = FragmentableArray<DiagnosesIcd>>(
    args?: {
      where?: DiagnosesIcdWhereInput;
      orderBy?: DiagnosesIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnosis: () => Promise<String>;
  discharge_location: () => Promise<String>;
  dischtime: () => Promise<DateTimeOutput>;
  drgcodes: <T = FragmentableArray<Drgcode>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  edouttime: () => Promise<DateTimeOutput>;
  edregtime: () => Promise<DateTimeOutput>;
  ethnicity: () => Promise<String>;
  hadm_id: () => Promise<Int>;
  has_chartevents_data: () => Promise<Int>;
  hospital_expire_flag: () => Promise<Int>;
  icustays: <T = FragmentableArray<Icustay>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = FragmentableArray<InputeventsCv>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<InputeventsMv>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  insurance: () => Promise<String>;
  labevents: <T = FragmentableArray<Labevent>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  language: () => Promise<String>;
  marital_status: () => Promise<String>;
  microbiologyevents: <T = FragmentableArray<Microbiologyevent>>(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = FragmentableArray<Noteevent>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = FragmentableArray<Prescription>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<ProcedureeventsMv>>(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = FragmentableArray<ProceduresIcd>>(
    args?: {
      where?: ProceduresIcdWhereInput;
      orderBy?: ProceduresIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  religion: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = FragmentableArray<Transfer>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AdmissionSubscription
  extends Promise<AsyncIterator<Admission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  admission_location: () => Promise<AsyncIterator<String>>;
  admission_type: () => Promise<AsyncIterator<String>>;
  admittime: () => Promise<AsyncIterator<DateTimeOutput>>;
  callout: <T = Promise<AsyncIterator<CalloutSubscription>>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = Promise<AsyncIterator<CpteventSubscription>>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deathtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  diagnoses_icd: <T = Promise<AsyncIterator<DiagnosesIcdSubscription>>>(
    args?: {
      where?: DiagnosesIcdWhereInput;
      orderBy?: DiagnosesIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnosis: () => Promise<AsyncIterator<String>>;
  discharge_location: () => Promise<AsyncIterator<String>>;
  dischtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  drgcodes: <T = Promise<AsyncIterator<DrgcodeSubscription>>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  edouttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  edregtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  has_chartevents_data: () => Promise<AsyncIterator<Int>>;
  hospital_expire_flag: () => Promise<AsyncIterator<Int>>;
  icustays: <T = Promise<AsyncIterator<IcustaySubscription>>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = Promise<AsyncIterator<InputeventsCvSubscription>>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<InputeventsMvSubscription>>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  insurance: () => Promise<AsyncIterator<String>>;
  labevents: <T = Promise<AsyncIterator<LabeventSubscription>>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  language: () => Promise<AsyncIterator<String>>;
  marital_status: () => Promise<AsyncIterator<String>>;
  microbiologyevents: <
    T = Promise<AsyncIterator<MicrobiologyeventSubscription>>
  >(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = Promise<AsyncIterator<NoteeventSubscription>>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = Promise<AsyncIterator<PrescriptionSubscription>>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<ProcedureeventsMvSubscription>>
  >(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = Promise<AsyncIterator<ProceduresIcdSubscription>>>(
    args?: {
      where?: ProceduresIcdWhereInput;
      orderBy?: ProceduresIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  religion: () => Promise<AsyncIterator<String>>;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = Promise<AsyncIterator<TransferSubscription>>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CalloutSubscriptionPayload {
  mutation: MutationType;
  node: Callout;
  updatedFields: String[];
  previousValues: CalloutPreviousValues;
}

export interface CalloutSubscriptionPayloadPromise
  extends Promise<CalloutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CalloutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CalloutPreviousValuesPromise>() => T;
}

export interface CalloutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CalloutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CalloutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CalloutPreviousValuesSubscription>() => T;
}

export interface AggregateOutputevent {
  count: Int;
}

export interface AggregateOutputeventPromise
  extends Promise<AggregateOutputevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOutputeventSubscription
  extends Promise<AsyncIterator<AggregateOutputevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CalloutPreviousValues {
  id: UUID;
  acknowledge_status: String;
  acknowledgetime?: DateTimeOutput;
  callout_outcome: String;
  callout_service: String;
  callout_status: String;
  callout_wardid?: Int;
  createtime: DateTimeOutput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeOutput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeOutput;
  outcometime: DateTimeOutput;
  request_cdiff: Int;
  request_mrsa: Int;
  request_resp: Int;
  request_tele: Int;
  request_vre: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime: DateTimeOutput;
}

export interface CalloutPreviousValuesPromise
  extends Promise<CalloutPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  acknowledge_status: () => Promise<String>;
  acknowledgetime: () => Promise<DateTimeOutput>;
  callout_outcome: () => Promise<String>;
  callout_service: () => Promise<String>;
  callout_status: () => Promise<String>;
  callout_wardid: () => Promise<Int>;
  createtime: () => Promise<DateTimeOutput>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  currentreservationtime: () => Promise<DateTimeOutput>;
  discharge_wardid: () => Promise<Int>;
  firstreservationtime: () => Promise<DateTimeOutput>;
  outcometime: () => Promise<DateTimeOutput>;
  request_cdiff: () => Promise<Int>;
  request_mrsa: () => Promise<Int>;
  request_resp: () => Promise<Int>;
  request_tele: () => Promise<Int>;
  request_vre: () => Promise<Int>;
  submit_careunit: () => Promise<String>;
  submit_wardid: () => Promise<Int>;
  updatetime: () => Promise<DateTimeOutput>;
}

export interface CalloutPreviousValuesSubscription
  extends Promise<AsyncIterator<CalloutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  acknowledge_status: () => Promise<AsyncIterator<String>>;
  acknowledgetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  callout_outcome: () => Promise<AsyncIterator<String>>;
  callout_service: () => Promise<AsyncIterator<String>>;
  callout_status: () => Promise<AsyncIterator<String>>;
  callout_wardid: () => Promise<AsyncIterator<Int>>;
  createtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  currentreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  discharge_wardid: () => Promise<AsyncIterator<Int>>;
  firstreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  outcometime: () => Promise<AsyncIterator<DateTimeOutput>>;
  request_cdiff: () => Promise<AsyncIterator<Int>>;
  request_mrsa: () => Promise<AsyncIterator<Int>>;
  request_resp: () => Promise<AsyncIterator<Int>>;
  request_tele: () => Promise<AsyncIterator<Int>>;
  request_vre: () => Promise<AsyncIterator<Int>>;
  submit_careunit: () => Promise<AsyncIterator<String>>;
  submit_wardid: () => Promise<AsyncIterator<Int>>;
  updatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OutputeventConnection {
  pageInfo: PageInfo;
  edges: OutputeventEdge[];
}

export interface OutputeventConnectionPromise
  extends Promise<OutputeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OutputeventEdge>>() => T;
  aggregate: <T = AggregateOutputeventPromise>() => T;
}

export interface OutputeventConnectionSubscription
  extends Promise<AsyncIterator<OutputeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OutputeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOutputeventSubscription>() => T;
}

export interface AggregateChartevents12 {
  count: Int;
}

export interface AggregateChartevents12Promise
  extends Promise<AggregateChartevents12>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents12Subscription
  extends Promise<AsyncIterator<AggregateChartevents12>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NoteeventEdge {
  node: Noteevent;
  cursor: String;
}

export interface NoteeventEdgePromise
  extends Promise<NoteeventEdge>,
    Fragmentable {
  node: <T = NoteeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteeventEdgeSubscription
  extends Promise<AsyncIterator<NoteeventEdge>>,
    Fragmentable {
  node: <T = NoteeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CaregiverSubscriptionPayload {
  mutation: MutationType;
  node: Caregiver;
  updatedFields: String[];
  previousValues: CaregiverPreviousValues;
}

export interface CaregiverSubscriptionPayloadPromise
  extends Promise<CaregiverSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CaregiverPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CaregiverPreviousValuesPromise>() => T;
}

export interface CaregiverSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CaregiverSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CaregiverSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CaregiverPreviousValuesSubscription>() => T;
}

export interface AggregateMicrobiologyevent {
  count: Int;
}

export interface AggregateMicrobiologyeventPromise
  extends Promise<AggregateMicrobiologyevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMicrobiologyeventSubscription
  extends Promise<AsyncIterator<AggregateMicrobiologyevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CaregiverPreviousValues {
  id: UUID;
  cgid: Int;
  description?: String;
  label?: String;
}

export interface CaregiverPreviousValuesPromise
  extends Promise<CaregiverPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  cgid: () => Promise<Int>;
  description: () => Promise<String>;
  label: () => Promise<String>;
}

export interface CaregiverPreviousValuesSubscription
  extends Promise<AsyncIterator<CaregiverPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  cgid: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface MicrobiologyeventConnection {
  pageInfo: PageInfo;
  edges: MicrobiologyeventEdge[];
}

export interface MicrobiologyeventConnectionPromise
  extends Promise<MicrobiologyeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MicrobiologyeventEdge>>() => T;
  aggregate: <T = AggregateMicrobiologyeventPromise>() => T;
}

export interface MicrobiologyeventConnectionSubscription
  extends Promise<AsyncIterator<MicrobiologyeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MicrobiologyeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMicrobiologyeventSubscription>() => T;
}

export interface Chartevents12Edge {
  node: Chartevents12;
  cursor: String;
}

export interface Chartevents12EdgePromise
  extends Promise<Chartevents12Edge>,
    Fragmentable {
  node: <T = Chartevents12Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents12EdgeSubscription
  extends Promise<AsyncIterator<Chartevents12Edge>>,
    Fragmentable {
  node: <T = Chartevents12Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LabeventEdge {
  node: Labevent;
  cursor: String;
}

export interface LabeventEdgePromise
  extends Promise<LabeventEdge>,
    Fragmentable {
  node: <T = LabeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LabeventEdgeSubscription
  extends Promise<AsyncIterator<LabeventEdge>>,
    Fragmentable {
  node: <T = LabeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CharteventSubscriptionPayload {
  mutation: MutationType;
  node: Chartevent;
  updatedFields: String[];
  previousValues: CharteventPreviousValues;
}

export interface CharteventSubscriptionPayloadPromise
  extends Promise<CharteventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CharteventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CharteventPreviousValuesPromise>() => T;
}

export interface CharteventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CharteventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CharteventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CharteventPreviousValuesSubscription>() => T;
}

export interface AggregateInputeventsMv {
  count: Int;
}

export interface AggregateInputeventsMvPromise
  extends Promise<AggregateInputeventsMv>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInputeventsMvSubscription
  extends Promise<AsyncIterator<AggregateInputeventsMv>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CharteventPreviousValues {
  id: UUID;
  charttime?: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface CharteventPreviousValuesPromise
  extends Promise<CharteventPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface CharteventPreviousValuesSubscription
  extends Promise<AsyncIterator<CharteventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface TransferSubscriptionPayload {
  mutation: MutationType;
  node: Transfer;
  updatedFields: String[];
  previousValues: TransferPreviousValues;
}

export interface TransferSubscriptionPayloadPromise
  extends Promise<TransferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransferPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransferPreviousValuesPromise>() => T;
}

export interface TransferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransferSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransferPreviousValuesSubscription>() => T;
}

export interface Chartevents12Connection {
  pageInfo: PageInfo;
  edges: Chartevents12Edge[];
}

export interface Chartevents12ConnectionPromise
  extends Promise<Chartevents12Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents12Edge>>() => T;
  aggregate: <T = AggregateChartevents12Promise>() => T;
}

export interface Chartevents12ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents12Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents12EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents12Subscription>() => T;
}

export interface InputeventsMvConnection {
  pageInfo: PageInfo;
  edges: InputeventsMvEdge[];
}

export interface InputeventsMvConnectionPromise
  extends Promise<InputeventsMvConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InputeventsMvEdge>>() => T;
  aggregate: <T = AggregateInputeventsMvPromise>() => T;
}

export interface InputeventsMvConnectionSubscription
  extends Promise<AsyncIterator<InputeventsMvConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InputeventsMvEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInputeventsMvSubscription>() => T;
}

export interface Chartevents1SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents1;
  updatedFields: String[];
  previousValues: Chartevents1PreviousValues;
}

export interface Chartevents1SubscriptionPayloadPromise
  extends Promise<Chartevents1SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents1Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents1PreviousValuesPromise>() => T;
}

export interface Chartevents1SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents1SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents1Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents1PreviousValuesSubscription>() => T;
}

export interface InputeventsCvEdge {
  node: InputeventsCv;
  cursor: String;
}

export interface InputeventsCvEdgePromise
  extends Promise<InputeventsCvEdge>,
    Fragmentable {
  node: <T = InputeventsCvPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InputeventsCvEdgeSubscription
  extends Promise<AsyncIterator<InputeventsCvEdge>>,
    Fragmentable {
  node: <T = InputeventsCvSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents1PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents1PreviousValuesPromise
  extends Promise<Chartevents1PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents1PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents1PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateIcustay {
  count: Int;
}

export interface AggregateIcustayPromise
  extends Promise<AggregateIcustay>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIcustaySubscription
  extends Promise<AsyncIterator<AggregateIcustay>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents12 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents12Promise
  extends Promise<Chartevents12>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents12Subscription
  extends Promise<AsyncIterator<Chartevents12>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface IcustayConnection {
  pageInfo: PageInfo;
  edges: IcustayEdge[];
}

export interface IcustayConnectionPromise
  extends Promise<IcustayConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IcustayEdge>>() => T;
  aggregate: <T = AggregateIcustayPromise>() => T;
}

export interface IcustayConnectionSubscription
  extends Promise<AsyncIterator<IcustayConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IcustayEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIcustaySubscription>() => T;
}

export interface Chartevents10SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents10;
  updatedFields: String[];
  previousValues: Chartevents10PreviousValues;
}

export interface Chartevents10SubscriptionPayloadPromise
  extends Promise<Chartevents10SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents10Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents10PreviousValuesPromise>() => T;
}

export interface Chartevents10SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents10SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents10Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents10PreviousValuesSubscription>() => T;
}

export interface DrgcodeEdge {
  node: Drgcode;
  cursor: String;
}

export interface DrgcodeEdgePromise extends Promise<DrgcodeEdge>, Fragmentable {
  node: <T = DrgcodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DrgcodeEdgeSubscription
  extends Promise<AsyncIterator<DrgcodeEdge>>,
    Fragmentable {
  node: <T = DrgcodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents10PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents10PreviousValuesPromise
  extends Promise<Chartevents10PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents10PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents10PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateDiagnosesIcd {
  count: Int;
}

export interface AggregateDiagnosesIcdPromise
  extends Promise<AggregateDiagnosesIcd>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiagnosesIcdSubscription
  extends Promise<AsyncIterator<AggregateDiagnosesIcd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents11 {
  count: Int;
}

export interface AggregateChartevents11Promise
  extends Promise<AggregateChartevents11>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents11Subscription
  extends Promise<AsyncIterator<AggregateChartevents11>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DiagnosesIcdConnection {
  pageInfo: PageInfo;
  edges: DiagnosesIcdEdge[];
}

export interface DiagnosesIcdConnectionPromise
  extends Promise<DiagnosesIcdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiagnosesIcdEdge>>() => T;
  aggregate: <T = AggregateDiagnosesIcdPromise>() => T;
}

export interface DiagnosesIcdConnectionSubscription
  extends Promise<AsyncIterator<DiagnosesIcdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiagnosesIcdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiagnosesIcdSubscription>() => T;
}

export interface Chartevents11SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents11;
  updatedFields: String[];
  previousValues: Chartevents11PreviousValues;
}

export interface Chartevents11SubscriptionPayloadPromise
  extends Promise<Chartevents11SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents11Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents11PreviousValuesPromise>() => T;
}

export interface Chartevents11SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents11SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents11Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents11PreviousValuesSubscription>() => T;
}

export interface DatetimeeventEdge {
  node: Datetimeevent;
  cursor: String;
}

export interface DatetimeeventEdgePromise
  extends Promise<DatetimeeventEdge>,
    Fragmentable {
  node: <T = DatetimeeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DatetimeeventEdgeSubscription
  extends Promise<AsyncIterator<DatetimeeventEdge>>,
    Fragmentable {
  node: <T = DatetimeeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents11PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents11PreviousValuesPromise
  extends Promise<Chartevents11PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents11PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents11PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateDLabitem {
  count: Int;
}

export interface AggregateDLabitemPromise
  extends Promise<AggregateDLabitem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDLabitemSubscription
  extends Promise<AsyncIterator<AggregateDLabitem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents11Edge {
  node: Chartevents11;
  cursor: String;
}

export interface Chartevents11EdgePromise
  extends Promise<Chartevents11Edge>,
    Fragmentable {
  node: <T = Chartevents11Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents11EdgeSubscription
  extends Promise<AsyncIterator<Chartevents11Edge>>,
    Fragmentable {
  node: <T = Chartevents11Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DLabitemConnection {
  pageInfo: PageInfo;
  edges: DLabitemEdge[];
}

export interface DLabitemConnectionPromise
  extends Promise<DLabitemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DLabitemEdge>>() => T;
  aggregate: <T = AggregateDLabitemPromise>() => T;
}

export interface DLabitemConnectionSubscription
  extends Promise<AsyncIterator<DLabitemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DLabitemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDLabitemSubscription>() => T;
}

export interface Chartevents12SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents12;
  updatedFields: String[];
  previousValues: Chartevents12PreviousValues;
}

export interface Chartevents12SubscriptionPayloadPromise
  extends Promise<Chartevents12SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents12Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents12PreviousValuesPromise>() => T;
}

export interface Chartevents12SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents12SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents12Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents12PreviousValuesSubscription>() => T;
}

export interface DLabitem {
  id: UUID;
  category: String;
  fluid: String;
  itemid: Int;
  label: String;
  loinc_code?: String;
}

export interface DLabitemPromise extends Promise<DLabitem>, Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<String>;
  fluid: () => Promise<String>;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  labevents: <T = FragmentableArray<Labevent>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  loinc_code: () => Promise<String>;
}

export interface DLabitemSubscription
  extends Promise<AsyncIterator<DLabitem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<String>>;
  fluid: () => Promise<AsyncIterator<String>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  labevents: <T = Promise<AsyncIterator<LabeventSubscription>>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  loinc_code: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents12PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents12PreviousValuesPromise
  extends Promise<Chartevents12PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents12PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents12PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DItemEdge {
  node: DItem;
  cursor: String;
}

export interface DItemEdgePromise extends Promise<DItemEdge>, Fragmentable {
  node: <T = DItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DItemEdgeSubscription
  extends Promise<AsyncIterator<DItemEdge>>,
    Fragmentable {
  node: <T = DItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents11Connection {
  pageInfo: PageInfo;
  edges: Chartevents11Edge[];
}

export interface Chartevents11ConnectionPromise
  extends Promise<Chartevents11Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents11Edge>>() => T;
  aggregate: <T = AggregateChartevents11Promise>() => T;
}

export interface Chartevents11ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents11Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents11EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents11Subscription>() => T;
}

export interface ServicePreviousValues {
  id: UUID;
  curr_service?: String;
  prev_service?: String;
  transfertime: DateTimeOutput;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  curr_service: () => Promise<String>;
  prev_service: () => Promise<String>;
  transfertime: () => Promise<DateTimeOutput>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  curr_service: () => Promise<AsyncIterator<String>>;
  prev_service: () => Promise<AsyncIterator<String>>;
  transfertime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Chartevents13SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents13;
  updatedFields: String[];
  previousValues: Chartevents13PreviousValues;
}

export interface Chartevents13SubscriptionPayloadPromise
  extends Promise<Chartevents13SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents13Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents13PreviousValuesPromise>() => T;
}

export interface Chartevents13SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents13SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents13Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents13PreviousValuesSubscription>() => T;
}

export interface AggregateDIcdProcedure {
  count: Int;
}

export interface AggregateDIcdProcedurePromise
  extends Promise<AggregateDIcdProcedure>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDIcdProcedureSubscription
  extends Promise<AsyncIterator<AggregateDIcdProcedure>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents13PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents13PreviousValuesPromise
  extends Promise<Chartevents13PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents13PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents13PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DIcdProcedureConnection {
  pageInfo: PageInfo;
  edges: DIcdProcedureEdge[];
}

export interface DIcdProcedureConnectionPromise
  extends Promise<DIcdProcedureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DIcdProcedureEdge>>() => T;
  aggregate: <T = AggregateDIcdProcedurePromise>() => T;
}

export interface DIcdProcedureConnectionSubscription
  extends Promise<AsyncIterator<DIcdProcedureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DIcdProcedureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDIcdProcedureSubscription>() => T;
}

export interface Chartevents11 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents11Promise
  extends Promise<Chartevents11>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents11Subscription
  extends Promise<AsyncIterator<Chartevents11>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateDIcdDiagnosis {
  count: Int;
}

export interface AggregateDIcdDiagnosisPromise
  extends Promise<AggregateDIcdDiagnosis>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDIcdDiagnosisSubscription
  extends Promise<AsyncIterator<AggregateDIcdDiagnosis>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents14SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents14;
  updatedFields: String[];
  previousValues: Chartevents14PreviousValues;
}

export interface Chartevents14SubscriptionPayloadPromise
  extends Promise<Chartevents14SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents14Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents14PreviousValuesPromise>() => T;
}

export interface Chartevents14SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents14SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents14Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents14PreviousValuesSubscription>() => T;
}

export interface DIcdDiagnosisConnection {
  pageInfo: PageInfo;
  edges: DIcdDiagnosisEdge[];
}

export interface DIcdDiagnosisConnectionPromise
  extends Promise<DIcdDiagnosisConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DIcdDiagnosisEdge>>() => T;
  aggregate: <T = AggregateDIcdDiagnosisPromise>() => T;
}

export interface DIcdDiagnosisConnectionSubscription
  extends Promise<AsyncIterator<DIcdDiagnosisConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DIcdDiagnosisEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDIcdDiagnosisSubscription>() => T;
}

export interface Chartevents14PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents14PreviousValuesPromise
  extends Promise<Chartevents14PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents14PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents14PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DIcdDiagnosis {
  id: UUID;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface DIcdDiagnosisPromise
  extends Promise<DIcdDiagnosis>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface DIcdDiagnosisSubscription
  extends Promise<AsyncIterator<DIcdDiagnosis>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartevents10 {
  count: Int;
}

export interface AggregateChartevents10Promise
  extends Promise<AggregateChartevents10>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents10Subscription
  extends Promise<AsyncIterator<AggregateChartevents10>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DCptEdge {
  node: DCpt;
  cursor: String;
}

export interface DCptEdgePromise extends Promise<DCptEdge>, Fragmentable {
  node: <T = DCptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DCptEdgeSubscription
  extends Promise<AsyncIterator<DCptEdge>>,
    Fragmentable {
  node: <T = DCptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents15SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents15;
  updatedFields: String[];
  previousValues: Chartevents15PreviousValues;
}

export interface Chartevents15SubscriptionPayloadPromise
  extends Promise<Chartevents15SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents15Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents15PreviousValuesPromise>() => T;
}

export interface Chartevents15SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents15SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents15Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents15PreviousValuesSubscription>() => T;
}

export interface DCpt {
  id: UUID;
  category: Int;
  codesuffix?: String;
  maxcodeinsubsection: Int;
  mincodeinsubsection: Int;
  sectionheader: String;
  sectionrange: String;
  subsectionheader: String;
  subsectionrange: String;
}

export interface DCptPromise extends Promise<DCpt>, Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<Int>;
  codesuffix: () => Promise<String>;
  maxcodeinsubsection: () => Promise<Int>;
  mincodeinsubsection: () => Promise<Int>;
  sectionheader: () => Promise<String>;
  sectionrange: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  subsectionrange: () => Promise<String>;
}

export interface DCptSubscription
  extends Promise<AsyncIterator<DCpt>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<Int>>;
  codesuffix: () => Promise<AsyncIterator<String>>;
  maxcodeinsubsection: () => Promise<AsyncIterator<Int>>;
  mincodeinsubsection: () => Promise<AsyncIterator<Int>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  sectionrange: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  subsectionrange: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents15PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents15PreviousValuesPromise
  extends Promise<Chartevents15PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents15PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents15PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface CpteventEdge {
  node: Cptevent;
  cursor: String;
}

export interface CpteventEdgePromise
  extends Promise<CpteventEdge>,
    Fragmentable {
  node: <T = CpteventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CpteventEdgeSubscription
  extends Promise<AsyncIterator<CpteventEdge>>,
    Fragmentable {
  node: <T = CpteventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents10Edge {
  node: Chartevents10;
  cursor: String;
}

export interface Chartevents10EdgePromise
  extends Promise<Chartevents10Edge>,
    Fragmentable {
  node: <T = Chartevents10Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents10EdgeSubscription
  extends Promise<AsyncIterator<Chartevents10Edge>>,
    Fragmentable {
  node: <T = Chartevents10Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartevents9 {
  count: Int;
}

export interface AggregateChartevents9Promise
  extends Promise<AggregateChartevents9>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents9Subscription
  extends Promise<AsyncIterator<AggregateChartevents9>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents16SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents16;
  updatedFields: String[];
  previousValues: Chartevents16PreviousValues;
}

export interface Chartevents16SubscriptionPayloadPromise
  extends Promise<Chartevents16SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents16Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents16PreviousValuesPromise>() => T;
}

export interface Chartevents16SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents16SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents16Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents16PreviousValuesSubscription>() => T;
}

export interface Chartevents9Connection {
  pageInfo: PageInfo;
  edges: Chartevents9Edge[];
}

export interface Chartevents9ConnectionPromise
  extends Promise<Chartevents9Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents9Edge>>() => T;
  aggregate: <T = AggregateChartevents9Promise>() => T;
}

export interface Chartevents9ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents9Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents9EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents9Subscription>() => T;
}

export interface Chartevents16PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents16PreviousValuesPromise
  extends Promise<Chartevents16PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents16PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents16PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  node: Service;
  updatedFields: String[];
  previousValues: ServicePreviousValues;
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface Chartevents10Connection {
  pageInfo: PageInfo;
  edges: Chartevents10Edge[];
}

export interface Chartevents10ConnectionPromise
  extends Promise<Chartevents10Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents10Edge>>() => T;
  aggregate: <T = AggregateChartevents10Promise>() => T;
}

export interface Chartevents10ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents10Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents10EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents10Subscription>() => T;
}

export interface Chartevents8Edge {
  node: Chartevents8;
  cursor: String;
}

export interface Chartevents8EdgePromise
  extends Promise<Chartevents8Edge>,
    Fragmentable {
  node: <T = Chartevents8Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents8EdgeSubscription
  extends Promise<AsyncIterator<Chartevents8Edge>>,
    Fragmentable {
  node: <T = Chartevents8Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents17SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents17;
  updatedFields: String[];
  previousValues: Chartevents17PreviousValues;
}

export interface Chartevents17SubscriptionPayloadPromise
  extends Promise<Chartevents17SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents17Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents17PreviousValuesPromise>() => T;
}

export interface Chartevents17SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents17SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents17Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents17PreviousValuesSubscription>() => T;
}

export interface Chartevents8 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents8Promise
  extends Promise<Chartevents8>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents8Subscription
  extends Promise<AsyncIterator<Chartevents8>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents17PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents17PreviousValuesPromise
  extends Promise<Chartevents17PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents17PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents17PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents7 {
  count: Int;
}

export interface AggregateChartevents7Promise
  extends Promise<AggregateChartevents7>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents7Subscription
  extends Promise<AsyncIterator<AggregateChartevents7>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents10 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents10Promise
  extends Promise<Chartevents10>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents10Subscription
  extends Promise<AsyncIterator<Chartevents10>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents7Connection {
  pageInfo: PageInfo;
  edges: Chartevents7Edge[];
}

export interface Chartevents7ConnectionPromise
  extends Promise<Chartevents7Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents7Edge>>() => T;
  aggregate: <T = AggregateChartevents7Promise>() => T;
}

export interface Chartevents7ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents7Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents7EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents7Subscription>() => T;
}

export interface Chartevents2SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents2;
  updatedFields: String[];
  previousValues: Chartevents2PreviousValues;
}

export interface Chartevents2SubscriptionPayloadPromise
  extends Promise<Chartevents2SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents2Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents2PreviousValuesPromise>() => T;
}

export interface Chartevents2SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents2SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents2Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents2PreviousValuesSubscription>() => T;
}

export interface AggregateChartevents6 {
  count: Int;
}

export interface AggregateChartevents6Promise
  extends Promise<AggregateChartevents6>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents6Subscription
  extends Promise<AsyncIterator<AggregateChartevents6>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents2PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents2PreviousValuesPromise
  extends Promise<Chartevents2PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents2PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents2PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents6Connection {
  pageInfo: PageInfo;
  edges: Chartevents6Edge[];
}

export interface Chartevents6ConnectionPromise
  extends Promise<Chartevents6Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents6Edge>>() => T;
  aggregate: <T = AggregateChartevents6Promise>() => T;
}

export interface Chartevents6ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents6Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents6EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents6Subscription>() => T;
}

export interface AggregateChartevents1 {
  count: Int;
}

export interface AggregateChartevents1Promise
  extends Promise<AggregateChartevents1>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents1Subscription
  extends Promise<AsyncIterator<AggregateChartevents1>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cptevent {
  id: UUID;
  chartdate?: DateTimeOutput;
  costcenter: String;
  cpt_cd: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface CpteventPromise extends Promise<Cptevent>, Fragmentable {
  id: () => Promise<UUID>;
  chartdate: () => Promise<DateTimeOutput>;
  costcenter: () => Promise<String>;
  cpt_cd: () => Promise<String>;
  cpt_number: () => Promise<Int>;
  cpt_suffix: () => Promise<String>;
  description: () => Promise<String>;
  sectionheader: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  ticket_id_seq: () => Promise<Int>;
}

export interface CpteventSubscription
  extends Promise<AsyncIterator<Cptevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  costcenter: () => Promise<AsyncIterator<String>>;
  cpt_cd: () => Promise<AsyncIterator<String>>;
  cpt_number: () => Promise<AsyncIterator<Int>>;
  cpt_suffix: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  ticket_id_seq: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents3SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents3;
  updatedFields: String[];
  previousValues: Chartevents3PreviousValues;
}

export interface Chartevents3SubscriptionPayloadPromise
  extends Promise<Chartevents3SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents3Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents3PreviousValuesPromise>() => T;
}

export interface Chartevents3SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents3SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents3Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents3PreviousValuesSubscription>() => T;
}

export interface Chartevents5Edge {
  node: Chartevents5;
  cursor: String;
}

export interface Chartevents5EdgePromise
  extends Promise<Chartevents5Edge>,
    Fragmentable {
  node: <T = Chartevents5Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents5EdgeSubscription
  extends Promise<AsyncIterator<Chartevents5Edge>>,
    Fragmentable {
  node: <T = Chartevents5Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents3PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents3PreviousValuesPromise
  extends Promise<Chartevents3PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents3PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents3PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents5 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents5Promise
  extends Promise<Chartevents5>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents5Subscription
  extends Promise<AsyncIterator<Chartevents5>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents1Edge {
  node: Chartevents1;
  cursor: String;
}

export interface Chartevents1EdgePromise
  extends Promise<Chartevents1Edge>,
    Fragmentable {
  node: <T = Chartevents1Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents1EdgeSubscription
  extends Promise<AsyncIterator<Chartevents1Edge>>,
    Fragmentable {
  node: <T = Chartevents1Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents4Edge {
  node: Chartevents4;
  cursor: String;
}

export interface Chartevents4EdgePromise
  extends Promise<Chartevents4Edge>,
    Fragmentable {
  node: <T = Chartevents4Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents4EdgeSubscription
  extends Promise<AsyncIterator<Chartevents4Edge>>,
    Fragmentable {
  node: <T = Chartevents4Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents4SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents4;
  updatedFields: String[];
  previousValues: Chartevents4PreviousValues;
}

export interface Chartevents4SubscriptionPayloadPromise
  extends Promise<Chartevents4SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents4Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents4PreviousValuesPromise>() => T;
}

export interface Chartevents4SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents4SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents4Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents4PreviousValuesSubscription>() => T;
}

export interface Chartevents4 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents4Promise
  extends Promise<Chartevents4>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents4Subscription
  extends Promise<AsyncIterator<Chartevents4>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents4PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents4PreviousValuesPromise
  extends Promise<Chartevents4PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents4PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents4PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents3 {
  count: Int;
}

export interface AggregateChartevents3Promise
  extends Promise<AggregateChartevents3>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents3Subscription
  extends Promise<AsyncIterator<AggregateChartevents3>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents1Connection {
  pageInfo: PageInfo;
  edges: Chartevents1Edge[];
}

export interface Chartevents1ConnectionPromise
  extends Promise<Chartevents1Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents1Edge>>() => T;
  aggregate: <T = AggregateChartevents1Promise>() => T;
}

export interface Chartevents1ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents1Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents1EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents1Subscription>() => T;
}

export interface Chartevents3Connection {
  pageInfo: PageInfo;
  edges: Chartevents3Edge[];
}

export interface Chartevents3ConnectionPromise
  extends Promise<Chartevents3Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents3Edge>>() => T;
  aggregate: <T = AggregateChartevents3Promise>() => T;
}

export interface Chartevents3ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents3Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents3EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents3Subscription>() => T;
}

export interface Chartevents5SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents5;
  updatedFields: String[];
  previousValues: Chartevents5PreviousValues;
}

export interface Chartevents5SubscriptionPayloadPromise
  extends Promise<Chartevents5SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents5Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents5PreviousValuesPromise>() => T;
}

export interface Chartevents5SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents5SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents5Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents5PreviousValuesSubscription>() => T;
}

export interface AggregateChartevents2 {
  count: Int;
}

export interface AggregateChartevents2Promise
  extends Promise<AggregateChartevents2>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents2Subscription
  extends Promise<AsyncIterator<AggregateChartevents2>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents5PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents5PreviousValuesPromise
  extends Promise<Chartevents5PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents5PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents5PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents2Connection {
  pageInfo: PageInfo;
  edges: Chartevents2Edge[];
}

export interface Chartevents2ConnectionPromise
  extends Promise<Chartevents2Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents2Edge>>() => T;
  aggregate: <T = AggregateChartevents2Promise>() => T;
}

export interface Chartevents2ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents2Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents2EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents2Subscription>() => T;
}

export interface Chartevents1 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents1Promise
  extends Promise<Chartevents1>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents1Subscription
  extends Promise<AsyncIterator<Chartevents1>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DiagnosesIcd {
  id: UUID;
  icd9_code?: String;
  seq_num?: Int;
}

export interface DiagnosesIcdPromise
  extends Promise<DiagnosesIcd>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface DiagnosesIcdSubscription
  extends Promise<AsyncIterator<DiagnosesIcd>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents6SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents6;
  updatedFields: String[];
  previousValues: Chartevents6PreviousValues;
}

export interface Chartevents6SubscriptionPayloadPromise
  extends Promise<Chartevents6SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents6Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents6PreviousValuesPromise>() => T;
}

export interface Chartevents6SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents6SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents6Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents6PreviousValuesSubscription>() => T;
}

export interface Chartevents17Edge {
  node: Chartevents17;
  cursor: String;
}

export interface Chartevents17EdgePromise
  extends Promise<Chartevents17Edge>,
    Fragmentable {
  node: <T = Chartevents17Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents17EdgeSubscription
  extends Promise<AsyncIterator<Chartevents17Edge>>,
    Fragmentable {
  node: <T = Chartevents17Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents6PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents6PreviousValuesPromise
  extends Promise<Chartevents6PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents6PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents6PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents17 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents17Promise
  extends Promise<Chartevents17>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents17Subscription
  extends Promise<AsyncIterator<Chartevents17>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevent {
  count: Int;
}

export interface AggregateCharteventPromise
  extends Promise<AggregateChartevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCharteventSubscription
  extends Promise<AsyncIterator<AggregateChartevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents16Edge {
  node: Chartevents16;
  cursor: String;
}

export interface Chartevents16EdgePromise
  extends Promise<Chartevents16Edge>,
    Fragmentable {
  node: <T = Chartevents16Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents16EdgeSubscription
  extends Promise<AsyncIterator<Chartevents16Edge>>,
    Fragmentable {
  node: <T = Chartevents16Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents7SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents7;
  updatedFields: String[];
  previousValues: Chartevents7PreviousValues;
}

export interface Chartevents7SubscriptionPayloadPromise
  extends Promise<Chartevents7SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents7Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents7PreviousValuesPromise>() => T;
}

export interface Chartevents7SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents7SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents7Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents7PreviousValuesSubscription>() => T;
}

export interface Chartevents16 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents16Promise
  extends Promise<Chartevents16>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents16Subscription
  extends Promise<AsyncIterator<Chartevents16>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents7PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents7PreviousValuesPromise
  extends Promise<Chartevents7PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents7PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents7PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents15 {
  count: Int;
}

export interface AggregateChartevents15Promise
  extends Promise<AggregateChartevents15>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents15Subscription
  extends Promise<AsyncIterator<AggregateChartevents15>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CharteventEdge {
  node: Chartevent;
  cursor: String;
}

export interface CharteventEdgePromise
  extends Promise<CharteventEdge>,
    Fragmentable {
  node: <T = CharteventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CharteventEdgeSubscription
  extends Promise<AsyncIterator<CharteventEdge>>,
    Fragmentable {
  node: <T = CharteventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents15Connection {
  pageInfo: PageInfo;
  edges: Chartevents15Edge[];
}

export interface Chartevents15ConnectionPromise
  extends Promise<Chartevents15Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents15Edge>>() => T;
  aggregate: <T = AggregateChartevents15Promise>() => T;
}

export interface Chartevents15ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents15Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents15EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents15Subscription>() => T;
}

export interface Chartevents8SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents8;
  updatedFields: String[];
  previousValues: Chartevents8PreviousValues;
}

export interface Chartevents8SubscriptionPayloadPromise
  extends Promise<Chartevents8SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents8Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents8PreviousValuesPromise>() => T;
}

export interface Chartevents8SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents8SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents8Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents8PreviousValuesSubscription>() => T;
}

export interface AggregateChartevents14 {
  count: Int;
}

export interface AggregateChartevents14Promise
  extends Promise<AggregateChartevents14>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents14Subscription
  extends Promise<AsyncIterator<AggregateChartevents14>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents8PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents8PreviousValuesPromise
  extends Promise<Chartevents8PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents8PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents8PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Microbiologyevent {
  id: UUID;
  ab_name?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface MicrobiologyeventPromise
  extends Promise<Microbiologyevent>,
    Fragmentable {
  id: () => Promise<UUID>;
  ab_name: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  dilution_comparison: () => Promise<String>;
  dilution_text: () => Promise<String>;
  dilution_value: () => Promise<Float>;
  interpretation: () => Promise<String>;
  isolate_num: () => Promise<Int>;
  org_name: () => Promise<String>;
  spec_type_desc: () => Promise<String>;
}

export interface MicrobiologyeventSubscription
  extends Promise<AsyncIterator<Microbiologyevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  ab_name: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  dilution_comparison: () => Promise<AsyncIterator<String>>;
  dilution_text: () => Promise<AsyncIterator<String>>;
  dilution_value: () => Promise<AsyncIterator<Float>>;
  interpretation: () => Promise<AsyncIterator<String>>;
  isolate_num: () => Promise<AsyncIterator<Int>>;
  org_name: () => Promise<AsyncIterator<String>>;
  spec_type_desc: () => Promise<AsyncIterator<String>>;
}

export interface CharteventConnection {
  pageInfo: PageInfo;
  edges: CharteventEdge[];
}

export interface CharteventConnectionPromise
  extends Promise<CharteventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CharteventEdge>>() => T;
  aggregate: <T = AggregateCharteventPromise>() => T;
}

export interface CharteventConnectionSubscription
  extends Promise<AsyncIterator<CharteventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CharteventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCharteventSubscription>() => T;
}

export interface AggregateProcedureeventsMv {
  count: Int;
}

export interface AggregateProcedureeventsMvPromise
  extends Promise<AggregateProcedureeventsMv>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProcedureeventsMvSubscription
  extends Promise<AsyncIterator<AggregateProcedureeventsMv>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents9SubscriptionPayload {
  mutation: MutationType;
  node: Chartevents9;
  updatedFields: String[];
  previousValues: Chartevents9PreviousValues;
}

export interface Chartevents9SubscriptionPayloadPromise
  extends Promise<Chartevents9SubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Chartevents9Promise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Chartevents9PreviousValuesPromise>() => T;
}

export interface Chartevents9SubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Chartevents9SubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Chartevents9Subscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Chartevents9PreviousValuesSubscription>() => T;
}

export interface PrescriptionEdge {
  node: Prescription;
  cursor: String;
}

export interface PrescriptionEdgePromise
  extends Promise<PrescriptionEdge>,
    Fragmentable {
  node: <T = PrescriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PrescriptionEdgeSubscription
  extends Promise<AsyncIterator<PrescriptionEdge>>,
    Fragmentable {
  node: <T = PrescriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents9PreviousValues {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents9PreviousValuesPromise
  extends Promise<Chartevents9PreviousValues>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents9PreviousValuesSubscription
  extends Promise<AsyncIterator<Chartevents9PreviousValues>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface PatientConnection {
  pageInfo: PageInfo;
  edges: PatientEdge[];
}

export interface PatientConnectionPromise
  extends Promise<PatientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientEdge>>() => T;
  aggregate: <T = AggregatePatientPromise>() => T;
}

export interface PatientConnectionSubscription
  extends Promise<AsyncIterator<PatientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientSubscription>() => T;
}

export interface AggregateCaregiver {
  count: Int;
}

export interface AggregateCaregiverPromise
  extends Promise<AggregateCaregiver>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCaregiverSubscription
  extends Promise<AsyncIterator<AggregateCaregiver>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OutputeventEdge {
  node: Outputevent;
  cursor: String;
}

export interface OutputeventEdgePromise
  extends Promise<OutputeventEdge>,
    Fragmentable {
  node: <T = OutputeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OutputeventEdgeSubscription
  extends Promise<AsyncIterator<OutputeventEdge>>,
    Fragmentable {
  node: <T = OutputeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CpteventSubscriptionPayload {
  mutation: MutationType;
  node: Cptevent;
  updatedFields: String[];
  previousValues: CpteventPreviousValues;
}

export interface CpteventSubscriptionPayloadPromise
  extends Promise<CpteventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CpteventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CpteventPreviousValuesPromise>() => T;
}

export interface CpteventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CpteventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CpteventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CpteventPreviousValuesSubscription>() => T;
}

export interface NoteeventConnection {
  pageInfo: PageInfo;
  edges: NoteeventEdge[];
}

export interface NoteeventConnectionPromise
  extends Promise<NoteeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteeventEdge>>() => T;
  aggregate: <T = AggregateNoteeventPromise>() => T;
}

export interface NoteeventConnectionSubscription
  extends Promise<AsyncIterator<NoteeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteeventSubscription>() => T;
}

export interface CpteventPreviousValues {
  id: UUID;
  chartdate?: DateTimeOutput;
  costcenter: String;
  cpt_cd: String;
  cpt_number?: Int;
  cpt_suffix?: String;
  description?: String;
  sectionheader?: String;
  subsectionheader?: String;
  ticket_id_seq?: Int;
}

export interface CpteventPreviousValuesPromise
  extends Promise<CpteventPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  chartdate: () => Promise<DateTimeOutput>;
  costcenter: () => Promise<String>;
  cpt_cd: () => Promise<String>;
  cpt_number: () => Promise<Int>;
  cpt_suffix: () => Promise<String>;
  description: () => Promise<String>;
  sectionheader: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  ticket_id_seq: () => Promise<Int>;
}

export interface CpteventPreviousValuesSubscription
  extends Promise<AsyncIterator<CpteventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  costcenter: () => Promise<AsyncIterator<String>>;
  cpt_cd: () => Promise<AsyncIterator<String>>;
  cpt_number: () => Promise<AsyncIterator<Int>>;
  cpt_suffix: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  ticket_id_seq: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateLabevent {
  count: Int;
}

export interface AggregateLabeventPromise
  extends Promise<AggregateLabevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLabeventSubscription
  extends Promise<AsyncIterator<AggregateLabevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CaregiverEdge {
  node: Caregiver;
  cursor: String;
}

export interface CaregiverEdgePromise
  extends Promise<CaregiverEdge>,
    Fragmentable {
  node: <T = CaregiverPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CaregiverEdgeSubscription
  extends Promise<AsyncIterator<CaregiverEdge>>,
    Fragmentable {
  node: <T = CaregiverSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DCptSubscriptionPayload {
  mutation: MutationType;
  node: DCpt;
  updatedFields: String[];
  previousValues: DCptPreviousValues;
}

export interface DCptSubscriptionPayloadPromise
  extends Promise<DCptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DCptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DCptPreviousValuesPromise>() => T;
}

export interface DCptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DCptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DCptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DCptPreviousValuesSubscription>() => T;
}

export interface AggregateInputeventsCv {
  count: Int;
}

export interface AggregateInputeventsCvPromise
  extends Promise<AggregateInputeventsCv>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInputeventsCvSubscription
  extends Promise<AsyncIterator<AggregateInputeventsCv>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DCptPreviousValues {
  id: UUID;
  category: Int;
  codesuffix?: String;
  maxcodeinsubsection: Int;
  mincodeinsubsection: Int;
  sectionheader: String;
  sectionrange: String;
  subsectionheader: String;
  subsectionrange: String;
}

export interface DCptPreviousValuesPromise
  extends Promise<DCptPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<Int>;
  codesuffix: () => Promise<String>;
  maxcodeinsubsection: () => Promise<Int>;
  mincodeinsubsection: () => Promise<Int>;
  sectionheader: () => Promise<String>;
  sectionrange: () => Promise<String>;
  subsectionheader: () => Promise<String>;
  subsectionrange: () => Promise<String>;
}

export interface DCptPreviousValuesSubscription
  extends Promise<AsyncIterator<DCptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<Int>>;
  codesuffix: () => Promise<AsyncIterator<String>>;
  maxcodeinsubsection: () => Promise<AsyncIterator<Int>>;
  mincodeinsubsection: () => Promise<AsyncIterator<Int>>;
  sectionheader: () => Promise<AsyncIterator<String>>;
  sectionrange: () => Promise<AsyncIterator<String>>;
  subsectionheader: () => Promise<AsyncIterator<String>>;
  subsectionrange: () => Promise<AsyncIterator<String>>;
}

export interface IcustayEdge {
  node: Icustay;
  cursor: String;
}

export interface IcustayEdgePromise extends Promise<IcustayEdge>, Fragmentable {
  node: <T = IcustayPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IcustayEdgeSubscription
  extends Promise<AsyncIterator<IcustayEdge>>,
    Fragmentable {
  node: <T = IcustaySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CaregiverConnection {
  pageInfo: PageInfo;
  edges: CaregiverEdge[];
}

export interface CaregiverConnectionPromise
  extends Promise<CaregiverConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CaregiverEdge>>() => T;
  aggregate: <T = AggregateCaregiverPromise>() => T;
}

export interface CaregiverConnectionSubscription
  extends Promise<AsyncIterator<CaregiverConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CaregiverEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCaregiverSubscription>() => T;
}

export interface DrgcodeConnection {
  pageInfo: PageInfo;
  edges: DrgcodeEdge[];
}

export interface DrgcodeConnectionPromise
  extends Promise<DrgcodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DrgcodeEdge>>() => T;
  aggregate: <T = AggregateDrgcodePromise>() => T;
}

export interface DrgcodeConnectionSubscription
  extends Promise<AsyncIterator<DrgcodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DrgcodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDrgcodeSubscription>() => T;
}

export interface DIcdDiagnosisSubscriptionPayload {
  mutation: MutationType;
  node: DIcdDiagnosis;
  updatedFields: String[];
  previousValues: DIcdDiagnosisPreviousValues;
}

export interface DIcdDiagnosisSubscriptionPayloadPromise
  extends Promise<DIcdDiagnosisSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DIcdDiagnosisPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DIcdDiagnosisPreviousValuesPromise>() => T;
}

export interface DIcdDiagnosisSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DIcdDiagnosisSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DIcdDiagnosisSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DIcdDiagnosisPreviousValuesSubscription>() => T;
}

export interface AggregateDatetimeevent {
  count: Int;
}

export interface AggregateDatetimeeventPromise
  extends Promise<AggregateDatetimeevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDatetimeeventSubscription
  extends Promise<AsyncIterator<AggregateDatetimeevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DIcdDiagnosisPreviousValues {
  id: UUID;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface DIcdDiagnosisPreviousValuesPromise
  extends Promise<DIcdDiagnosisPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface DIcdDiagnosisPreviousValuesSubscription
  extends Promise<AsyncIterator<DIcdDiagnosisPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface DLabitemEdge {
  node: DLabitem;
  cursor: String;
}

export interface DLabitemEdgePromise
  extends Promise<DLabitemEdge>,
    Fragmentable {
  node: <T = DLabitemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DLabitemEdgeSubscription
  extends Promise<AsyncIterator<DLabitemEdge>>,
    Fragmentable {
  node: <T = DLabitemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Icustay {
  id: UUID;
  dbsource: String;
  first_careunit: String;
  first_wardid: Int;
  icustay_id: Int;
  intime: DateTimeOutput;
  last_careunit: String;
  last_wardid: Int;
  los?: Float;
  outtime?: DateTimeOutput;
}

export interface IcustayPromise extends Promise<Icustay>, Fragmentable {
  id: () => Promise<UUID>;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<String>;
  first_careunit: () => Promise<String>;
  first_wardid: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  inputevents_cv: <T = FragmentableArray<InputeventsCv>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<InputeventsMv>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  intime: () => Promise<DateTimeOutput>;
  last_careunit: () => Promise<String>;
  last_wardid: () => Promise<Int>;
  los: () => Promise<Float>;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outtime: () => Promise<DateTimeOutput>;
  prescriptions: <T = FragmentableArray<Prescription>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<ProcedureeventsMv>>(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = FragmentableArray<Transfer>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface IcustaySubscription
  extends Promise<AsyncIterator<Icustay>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<AsyncIterator<String>>;
  first_careunit: () => Promise<AsyncIterator<String>>;
  first_wardid: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  inputevents_cv: <T = Promise<AsyncIterator<InputeventsCvSubscription>>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<InputeventsMvSubscription>>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  last_careunit: () => Promise<AsyncIterator<String>>;
  last_wardid: () => Promise<AsyncIterator<Int>>;
  los: () => Promise<AsyncIterator<Float>>;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  prescriptions: <T = Promise<AsyncIterator<PrescriptionSubscription>>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<ProcedureeventsMvSubscription>>
  >(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  transfers: <T = Promise<AsyncIterator<TransferSubscription>>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateDItem {
  count: Int;
}

export interface AggregateDItemPromise
  extends Promise<AggregateDItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDItemSubscription
  extends Promise<AsyncIterator<AggregateDItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DIcdProcedureSubscriptionPayload {
  mutation: MutationType;
  node: DIcdProcedure;
  updatedFields: String[];
  previousValues: DIcdProcedurePreviousValues;
}

export interface DIcdProcedureSubscriptionPayloadPromise
  extends Promise<DIcdProcedureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DIcdProcedurePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DIcdProcedurePreviousValuesPromise>() => T;
}

export interface DIcdProcedureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DIcdProcedureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DIcdProcedureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DIcdProcedurePreviousValuesSubscription>() => T;
}

export interface DItem {
  id: UUID;
  abbreviation?: String;
  category?: String;
  conceptid?: Int;
  dbsource?: String;
  itemid: Int;
  label?: String;
  linksto?: String;
  param_type?: String;
  unitname?: String;
}

export interface DItemPromise extends Promise<DItem>, Fragmentable {
  id: () => Promise<UUID>;
  abbreviation: () => Promise<String>;
  category: () => Promise<String>;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  conceptid: () => Promise<Int>;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<String>;
  inputevents_mv: <T = FragmentableArray<InputeventsMv>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  linksto: () => Promise<String>;
  microbiologyevents: <T = FragmentableArray<Microbiologyevent>>(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  param_type: () => Promise<String>;
  procedureevents_mv: <T = FragmentableArray<ProcedureeventsMv>>(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unitname: () => Promise<String>;
}

export interface DItemSubscription
  extends Promise<AsyncIterator<DItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  abbreviation: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  conceptid: () => Promise<AsyncIterator<Int>>;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dbsource: () => Promise<AsyncIterator<String>>;
  inputevents_mv: <T = Promise<AsyncIterator<InputeventsMvSubscription>>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  linksto: () => Promise<AsyncIterator<String>>;
  microbiologyevents: <
    T = Promise<AsyncIterator<MicrobiologyeventSubscription>>
  >(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  param_type: () => Promise<AsyncIterator<String>>;
  procedureevents_mv: <
    T = Promise<AsyncIterator<ProcedureeventsMvSubscription>>
  >(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unitname: () => Promise<AsyncIterator<String>>;
}

export interface DIcdProcedurePreviousValues {
  id: UUID;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface DIcdProcedurePreviousValuesPromise
  extends Promise<DIcdProcedurePreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface DIcdProcedurePreviousValuesSubscription
  extends Promise<AsyncIterator<DIcdProcedurePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface DIcdProcedure {
  id: UUID;
  icd9_code: String;
  long_title: String;
  short_title: String;
}

export interface DIcdProcedurePromise
  extends Promise<DIcdProcedure>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  long_title: () => Promise<String>;
  short_title: () => Promise<String>;
}

export interface DIcdProcedureSubscription
  extends Promise<AsyncIterator<DIcdProcedure>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  long_title: () => Promise<AsyncIterator<String>>;
  short_title: () => Promise<AsyncIterator<String>>;
}

export interface Caregiver {
  id: UUID;
  cgid: Int;
  description?: String;
  label?: String;
}

export interface CaregiverPromise extends Promise<Caregiver>, Fragmentable {
  id: () => Promise<UUID>;
  cgid: () => Promise<Int>;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<String>;
  inputevents_cv: <T = FragmentableArray<InputeventsCv>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<InputeventsMv>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  label: () => Promise<String>;
  noteevents: <T = FragmentableArray<Noteevent>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<ProcedureeventsMv>>(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CaregiverSubscription
  extends Promise<AsyncIterator<Caregiver>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  cgid: () => Promise<AsyncIterator<Int>>;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<AsyncIterator<String>>;
  inputevents_cv: <T = Promise<AsyncIterator<InputeventsCvSubscription>>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<InputeventsMvSubscription>>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  label: () => Promise<AsyncIterator<String>>;
  noteevents: <T = Promise<AsyncIterator<NoteeventSubscription>>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<ProcedureeventsMvSubscription>>
  >(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Callout {
  id: UUID;
  acknowledge_status: String;
  acknowledgetime?: DateTimeOutput;
  callout_outcome: String;
  callout_service: String;
  callout_status: String;
  callout_wardid?: Int;
  createtime: DateTimeOutput;
  curr_careunit?: String;
  curr_wardid?: Int;
  currentreservationtime?: DateTimeOutput;
  discharge_wardid?: Int;
  firstreservationtime?: DateTimeOutput;
  outcometime: DateTimeOutput;
  request_cdiff: Int;
  request_mrsa: Int;
  request_resp: Int;
  request_tele: Int;
  request_vre: Int;
  submit_careunit?: String;
  submit_wardid?: Int;
  updatetime: DateTimeOutput;
}

export interface CalloutPromise extends Promise<Callout>, Fragmentable {
  id: () => Promise<UUID>;
  acknowledge_status: () => Promise<String>;
  acknowledgetime: () => Promise<DateTimeOutput>;
  callout_outcome: () => Promise<String>;
  callout_service: () => Promise<String>;
  callout_status: () => Promise<String>;
  callout_wardid: () => Promise<Int>;
  createtime: () => Promise<DateTimeOutput>;
  curr_careunit: () => Promise<String>;
  curr_wardid: () => Promise<Int>;
  currentreservationtime: () => Promise<DateTimeOutput>;
  discharge_wardid: () => Promise<Int>;
  firstreservationtime: () => Promise<DateTimeOutput>;
  outcometime: () => Promise<DateTimeOutput>;
  request_cdiff: () => Promise<Int>;
  request_mrsa: () => Promise<Int>;
  request_resp: () => Promise<Int>;
  request_tele: () => Promise<Int>;
  request_vre: () => Promise<Int>;
  submit_careunit: () => Promise<String>;
  submit_wardid: () => Promise<Int>;
  updatetime: () => Promise<DateTimeOutput>;
}

export interface CalloutSubscription
  extends Promise<AsyncIterator<Callout>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  acknowledge_status: () => Promise<AsyncIterator<String>>;
  acknowledgetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  callout_outcome: () => Promise<AsyncIterator<String>>;
  callout_service: () => Promise<AsyncIterator<String>>;
  callout_status: () => Promise<AsyncIterator<String>>;
  callout_wardid: () => Promise<AsyncIterator<Int>>;
  createtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  curr_careunit: () => Promise<AsyncIterator<String>>;
  curr_wardid: () => Promise<AsyncIterator<Int>>;
  currentreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  discharge_wardid: () => Promise<AsyncIterator<Int>>;
  firstreservationtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  outcometime: () => Promise<AsyncIterator<DateTimeOutput>>;
  request_cdiff: () => Promise<AsyncIterator<Int>>;
  request_mrsa: () => Promise<AsyncIterator<Int>>;
  request_resp: () => Promise<AsyncIterator<Int>>;
  request_tele: () => Promise<AsyncIterator<Int>>;
  request_vre: () => Promise<AsyncIterator<Int>>;
  submit_careunit: () => Promise<AsyncIterator<String>>;
  submit_wardid: () => Promise<AsyncIterator<Int>>;
  updatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DItemSubscriptionPayload {
  mutation: MutationType;
  node: DItem;
  updatedFields: String[];
  previousValues: DItemPreviousValues;
}

export interface DItemSubscriptionPayloadPromise
  extends Promise<DItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DItemPreviousValuesPromise>() => T;
}

export interface DItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DItemPreviousValuesSubscription>() => T;
}

export interface DCptConnection {
  pageInfo: PageInfo;
  edges: DCptEdge[];
}

export interface DCptConnectionPromise
  extends Promise<DCptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DCptEdge>>() => T;
  aggregate: <T = AggregateDCptPromise>() => T;
}

export interface DCptConnectionSubscription
  extends Promise<AsyncIterator<DCptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DCptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDCptSubscription>() => T;
}

export interface DItemPreviousValues {
  id: UUID;
  abbreviation?: String;
  category?: String;
  conceptid?: Int;
  dbsource?: String;
  itemid: Int;
  label?: String;
  linksto?: String;
  param_type?: String;
  unitname?: String;
}

export interface DItemPreviousValuesPromise
  extends Promise<DItemPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  abbreviation: () => Promise<String>;
  category: () => Promise<String>;
  conceptid: () => Promise<Int>;
  dbsource: () => Promise<String>;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  linksto: () => Promise<String>;
  param_type: () => Promise<String>;
  unitname: () => Promise<String>;
}

export interface DItemPreviousValuesSubscription
  extends Promise<AsyncIterator<DItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  abbreviation: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  conceptid: () => Promise<AsyncIterator<Int>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  linksto: () => Promise<AsyncIterator<String>>;
  param_type: () => Promise<AsyncIterator<String>>;
  unitname: () => Promise<AsyncIterator<String>>;
}

export interface CpteventConnection {
  pageInfo: PageInfo;
  edges: CpteventEdge[];
}

export interface CpteventConnectionPromise
  extends Promise<CpteventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CpteventEdge>>() => T;
  aggregate: <T = AggregateCpteventPromise>() => T;
}

export interface CpteventConnectionSubscription
  extends Promise<AsyncIterator<CpteventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CpteventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCpteventSubscription>() => T;
}

export interface AggregateCallout {
  count: Int;
}

export interface AggregateCalloutPromise
  extends Promise<AggregateCallout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCalloutSubscription
  extends Promise<AsyncIterator<AggregateCallout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents9 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents9Promise
  extends Promise<Chartevents9>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents9Subscription
  extends Promise<AsyncIterator<Chartevents9>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DLabitemSubscriptionPayload {
  mutation: MutationType;
  node: DLabitem;
  updatedFields: String[];
  previousValues: DLabitemPreviousValues;
}

export interface DLabitemSubscriptionPayloadPromise
  extends Promise<DLabitemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DLabitemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DLabitemPreviousValuesPromise>() => T;
}

export interface DLabitemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DLabitemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DLabitemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DLabitemPreviousValuesSubscription>() => T;
}

export interface Chartevents8Connection {
  pageInfo: PageInfo;
  edges: Chartevents8Edge[];
}

export interface Chartevents8ConnectionPromise
  extends Promise<Chartevents8Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents8Edge>>() => T;
  aggregate: <T = AggregateChartevents8Promise>() => T;
}

export interface Chartevents8ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents8Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents8EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents8Subscription>() => T;
}

export interface DLabitemPreviousValues {
  id: UUID;
  category: String;
  fluid: String;
  itemid: Int;
  label: String;
  loinc_code?: String;
}

export interface DLabitemPreviousValuesPromise
  extends Promise<DLabitemPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<String>;
  fluid: () => Promise<String>;
  itemid: () => Promise<Int>;
  label: () => Promise<String>;
  loinc_code: () => Promise<String>;
}

export interface DLabitemPreviousValuesSubscription
  extends Promise<AsyncIterator<DLabitemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<String>>;
  fluid: () => Promise<AsyncIterator<String>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  loinc_code: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents7Edge {
  node: Chartevents7;
  cursor: String;
}

export interface Chartevents7EdgePromise
  extends Promise<Chartevents7Edge>,
    Fragmentable {
  node: <T = Chartevents7Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents7EdgeSubscription
  extends Promise<AsyncIterator<Chartevents7Edge>>,
    Fragmentable {
  node: <T = Chartevents7Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CalloutEdge {
  node: Callout;
  cursor: String;
}

export interface CalloutEdgePromise extends Promise<CalloutEdge>, Fragmentable {
  node: <T = CalloutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CalloutEdgeSubscription
  extends Promise<AsyncIterator<CalloutEdge>>,
    Fragmentable {
  node: <T = CalloutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents6Edge {
  node: Chartevents6;
  cursor: String;
}

export interface Chartevents6EdgePromise
  extends Promise<Chartevents6Edge>,
    Fragmentable {
  node: <T = Chartevents6Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents6EdgeSubscription
  extends Promise<AsyncIterator<Chartevents6Edge>>,
    Fragmentable {
  node: <T = Chartevents6Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DatetimeeventSubscriptionPayload {
  mutation: MutationType;
  node: Datetimeevent;
  updatedFields: String[];
  previousValues: DatetimeeventPreviousValues;
}

export interface DatetimeeventSubscriptionPayloadPromise
  extends Promise<DatetimeeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DatetimeeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DatetimeeventPreviousValuesPromise>() => T;
}

export interface DatetimeeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DatetimeeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DatetimeeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DatetimeeventPreviousValuesSubscription>() => T;
}

export interface AggregateChartevents5 {
  count: Int;
}

export interface AggregateChartevents5Promise
  extends Promise<AggregateChartevents5>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents5Subscription
  extends Promise<AsyncIterator<AggregateChartevents5>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DatetimeeventPreviousValues {
  id: UUID;
  charttime: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime: DateTimeOutput;
  value?: DateTimeOutput;
  valueuom: String;
  warning?: Int;
}

export interface DatetimeeventPreviousValuesPromise
  extends Promise<DatetimeeventPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<DateTimeOutput>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface DatetimeeventPreviousValuesSubscription
  extends Promise<AsyncIterator<DatetimeeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<DateTimeOutput>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents4 {
  count: Int;
}

export interface AggregateChartevents4Promise
  extends Promise<AggregateChartevents4>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents4Subscription
  extends Promise<AsyncIterator<AggregateChartevents4>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CalloutConnection {
  pageInfo: PageInfo;
  edges: CalloutEdge[];
}

export interface CalloutConnectionPromise
  extends Promise<CalloutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CalloutEdge>>() => T;
  aggregate: <T = AggregateCalloutPromise>() => T;
}

export interface CalloutConnectionSubscription
  extends Promise<AsyncIterator<CalloutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CalloutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCalloutSubscription>() => T;
}

export interface Datetimeevent {
  id: UUID;
  charttime: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime: DateTimeOutput;
  value?: DateTimeOutput;
  valueuom: String;
  warning?: Int;
}

export interface DatetimeeventPromise
  extends Promise<Datetimeevent>,
    Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<DateTimeOutput>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface DatetimeeventSubscription
  extends Promise<AsyncIterator<Datetimeevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<DateTimeOutput>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DiagnosesIcdSubscriptionPayload {
  mutation: MutationType;
  node: DiagnosesIcd;
  updatedFields: String[];
  previousValues: DiagnosesIcdPreviousValues;
}

export interface DiagnosesIcdSubscriptionPayloadPromise
  extends Promise<DiagnosesIcdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiagnosesIcdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiagnosesIcdPreviousValuesPromise>() => T;
}

export interface DiagnosesIcdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiagnosesIcdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiagnosesIcdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiagnosesIcdPreviousValuesSubscription>() => T;
}

export interface Chartevents3 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents3Promise
  extends Promise<Chartevents3>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents3Subscription
  extends Promise<AsyncIterator<Chartevents3>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DiagnosesIcdPreviousValues {
  id: UUID;
  icd9_code?: String;
  seq_num?: Int;
}

export interface DiagnosesIcdPreviousValuesPromise
  extends Promise<DiagnosesIcdPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface DiagnosesIcdPreviousValuesSubscription
  extends Promise<AsyncIterator<DiagnosesIcdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents2 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents2Promise
  extends Promise<Chartevents2>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents2Subscription
  extends Promise<AsyncIterator<Chartevents2>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAdmission {
  count: Int;
}

export interface AggregateAdmissionPromise
  extends Promise<AggregateAdmission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdmissionSubscription
  extends Promise<AsyncIterator<AggregateAdmission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents17Connection {
  pageInfo: PageInfo;
  edges: Chartevents17Edge[];
}

export interface Chartevents17ConnectionPromise
  extends Promise<Chartevents17Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents17Edge>>() => T;
  aggregate: <T = AggregateChartevents17Promise>() => T;
}

export interface Chartevents17ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents17Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents17EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents17Subscription>() => T;
}

export interface DrgcodeSubscriptionPayload {
  mutation: MutationType;
  node: Drgcode;
  updatedFields: String[];
  previousValues: DrgcodePreviousValues;
}

export interface DrgcodeSubscriptionPayloadPromise
  extends Promise<DrgcodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DrgcodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DrgcodePreviousValuesPromise>() => T;
}

export interface DrgcodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DrgcodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DrgcodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DrgcodePreviousValuesSubscription>() => T;
}

export interface Chartevents16Connection {
  pageInfo: PageInfo;
  edges: Chartevents16Edge[];
}

export interface Chartevents16ConnectionPromise
  extends Promise<Chartevents16Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents16Edge>>() => T;
  aggregate: <T = AggregateChartevents16Promise>() => T;
}

export interface Chartevents16ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents16Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents16EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents16Subscription>() => T;
}

export interface DrgcodePreviousValues {
  id: UUID;
  description?: String;
  drg_code: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type: String;
}

export interface DrgcodePreviousValuesPromise
  extends Promise<DrgcodePreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  description: () => Promise<String>;
  drg_code: () => Promise<String>;
  drg_mortality: () => Promise<Int>;
  drg_severity: () => Promise<Int>;
  drg_type: () => Promise<String>;
}

export interface DrgcodePreviousValuesSubscription
  extends Promise<AsyncIterator<DrgcodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  description: () => Promise<AsyncIterator<String>>;
  drg_code: () => Promise<AsyncIterator<String>>;
  drg_mortality: () => Promise<AsyncIterator<Int>>;
  drg_severity: () => Promise<AsyncIterator<Int>>;
  drg_type: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents15Edge {
  node: Chartevents15;
  cursor: String;
}

export interface Chartevents15EdgePromise
  extends Promise<Chartevents15Edge>,
    Fragmentable {
  node: <T = Chartevents15Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents15EdgeSubscription
  extends Promise<AsyncIterator<Chartevents15Edge>>,
    Fragmentable {
  node: <T = Chartevents15Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdmissionEdge {
  node: Admission;
  cursor: String;
}

export interface AdmissionEdgePromise
  extends Promise<AdmissionEdge>,
    Fragmentable {
  node: <T = AdmissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdmissionEdgeSubscription
  extends Promise<AsyncIterator<AdmissionEdge>>,
    Fragmentable {
  node: <T = AdmissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents14Edge {
  node: Chartevents14;
  cursor: String;
}

export interface Chartevents14EdgePromise
  extends Promise<Chartevents14Edge>,
    Fragmentable {
  node: <T = Chartevents14Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents14EdgeSubscription
  extends Promise<AsyncIterator<Chartevents14Edge>>,
    Fragmentable {
  node: <T = Chartevents14Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface IcustaySubscriptionPayload {
  mutation: MutationType;
  node: Icustay;
  updatedFields: String[];
  previousValues: IcustayPreviousValues;
}

export interface IcustaySubscriptionPayloadPromise
  extends Promise<IcustaySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IcustayPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IcustayPreviousValuesPromise>() => T;
}

export interface IcustaySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IcustaySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IcustaySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IcustayPreviousValuesSubscription>() => T;
}

export interface ProcedureeventsMvConnection {
  pageInfo: PageInfo;
  edges: ProcedureeventsMvEdge[];
}

export interface ProcedureeventsMvConnectionPromise
  extends Promise<ProcedureeventsMvConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProcedureeventsMvEdge>>() => T;
  aggregate: <T = AggregateProcedureeventsMvPromise>() => T;
}

export interface ProcedureeventsMvConnectionSubscription
  extends Promise<AsyncIterator<ProcedureeventsMvConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProcedureeventsMvEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProcedureeventsMvSubscription>() => T;
}

export interface IcustayPreviousValues {
  id: UUID;
  dbsource: String;
  first_careunit: String;
  first_wardid: Int;
  icustay_id: Int;
  intime: DateTimeOutput;
  last_careunit: String;
  last_wardid: Int;
  los?: Float;
  outtime?: DateTimeOutput;
}

export interface IcustayPreviousValuesPromise
  extends Promise<IcustayPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  dbsource: () => Promise<String>;
  first_careunit: () => Promise<String>;
  first_wardid: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  intime: () => Promise<DateTimeOutput>;
  last_careunit: () => Promise<String>;
  last_wardid: () => Promise<Int>;
  los: () => Promise<Float>;
  outtime: () => Promise<DateTimeOutput>;
}

export interface IcustayPreviousValuesSubscription
  extends Promise<AsyncIterator<IcustayPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  dbsource: () => Promise<AsyncIterator<String>>;
  first_careunit: () => Promise<AsyncIterator<String>>;
  first_wardid: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  intime: () => Promise<AsyncIterator<DateTimeOutput>>;
  last_careunit: () => Promise<AsyncIterator<String>>;
  last_wardid: () => Promise<AsyncIterator<Int>>;
  los: () => Promise<AsyncIterator<Float>>;
  outtime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Patient {
  id: UUID;
  dob: DateTimeOutput;
  dod?: DateTimeOutput;
  dod_hosp?: DateTimeOutput;
  dod_ssn?: DateTimeOutput;
  expire_flag: Int;
  gender: String;
  subject_id: Int;
}

export interface PatientPromise extends Promise<Patient>, Fragmentable {
  id: () => Promise<UUID>;
  admissions: <T = FragmentableArray<Admission>>(
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  callout: <T = FragmentableArray<Callout>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = FragmentableArray<Chartevent>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = FragmentableArray<Cptevent>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = FragmentableArray<Datetimeevent>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnoses_icd: <T = FragmentableArray<DiagnosesIcd>>(
    args?: {
      where?: DiagnosesIcdWhereInput;
      orderBy?: DiagnosesIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dob: () => Promise<DateTimeOutput>;
  dod: () => Promise<DateTimeOutput>;
  dod_hosp: () => Promise<DateTimeOutput>;
  dod_ssn: () => Promise<DateTimeOutput>;
  drgcodes: <T = FragmentableArray<Drgcode>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  expire_flag: () => Promise<Int>;
  gender: () => Promise<String>;
  icustays: <T = FragmentableArray<Icustay>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = FragmentableArray<InputeventsCv>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = FragmentableArray<InputeventsMv>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  labevents: <T = FragmentableArray<Labevent>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  microbiologyevents: <T = FragmentableArray<Microbiologyevent>>(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = FragmentableArray<Noteevent>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = FragmentableArray<Outputevent>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = FragmentableArray<Prescription>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <T = FragmentableArray<ProcedureeventsMv>>(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = FragmentableArray<ProceduresIcd>>(
    args?: {
      where?: ProceduresIcdWhereInput;
      orderBy?: ProceduresIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  services: <T = FragmentableArray<Service>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subject_id: () => Promise<Int>;
  transfers: <T = FragmentableArray<Transfer>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PatientSubscription
  extends Promise<AsyncIterator<Patient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  admissions: <T = Promise<AsyncIterator<AdmissionSubscription>>>(
    args?: {
      where?: AdmissionWhereInput;
      orderBy?: AdmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  callout: <T = Promise<AsyncIterator<CalloutSubscription>>>(
    args?: {
      where?: CalloutWhereInput;
      orderBy?: CalloutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chartevents: <T = Promise<AsyncIterator<CharteventSubscription>>>(
    args?: {
      where?: CharteventWhereInput;
      orderBy?: CharteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cptevents: <T = Promise<AsyncIterator<CpteventSubscription>>>(
    args?: {
      where?: CpteventWhereInput;
      orderBy?: CpteventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  datetimeevents: <T = Promise<AsyncIterator<DatetimeeventSubscription>>>(
    args?: {
      where?: DatetimeeventWhereInput;
      orderBy?: DatetimeeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  diagnoses_icd: <T = Promise<AsyncIterator<DiagnosesIcdSubscription>>>(
    args?: {
      where?: DiagnosesIcdWhereInput;
      orderBy?: DiagnosesIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_hosp: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_ssn: () => Promise<AsyncIterator<DateTimeOutput>>;
  drgcodes: <T = Promise<AsyncIterator<DrgcodeSubscription>>>(
    args?: {
      where?: DrgcodeWhereInput;
      orderBy?: DrgcodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  expire_flag: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
  icustays: <T = Promise<AsyncIterator<IcustaySubscription>>>(
    args?: {
      where?: IcustayWhereInput;
      orderBy?: IcustayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_cv: <T = Promise<AsyncIterator<InputeventsCvSubscription>>>(
    args?: {
      where?: InputeventsCvWhereInput;
      orderBy?: InputeventsCvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inputevents_mv: <T = Promise<AsyncIterator<InputeventsMvSubscription>>>(
    args?: {
      where?: InputeventsMvWhereInput;
      orderBy?: InputeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  labevents: <T = Promise<AsyncIterator<LabeventSubscription>>>(
    args?: {
      where?: LabeventWhereInput;
      orderBy?: LabeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  microbiologyevents: <
    T = Promise<AsyncIterator<MicrobiologyeventSubscription>>
  >(
    args?: {
      where?: MicrobiologyeventWhereInput;
      orderBy?: MicrobiologyeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  noteevents: <T = Promise<AsyncIterator<NoteeventSubscription>>>(
    args?: {
      where?: NoteeventWhereInput;
      orderBy?: NoteeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  outputevents: <T = Promise<AsyncIterator<OutputeventSubscription>>>(
    args?: {
      where?: OutputeventWhereInput;
      orderBy?: OutputeventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  prescriptions: <T = Promise<AsyncIterator<PrescriptionSubscription>>>(
    args?: {
      where?: PrescriptionWhereInput;
      orderBy?: PrescriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedureevents_mv: <
    T = Promise<AsyncIterator<ProcedureeventsMvSubscription>>
  >(
    args?: {
      where?: ProcedureeventsMvWhereInput;
      orderBy?: ProcedureeventsMvOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  procedures_icd: <T = Promise<AsyncIterator<ProceduresIcdSubscription>>>(
    args?: {
      where?: ProceduresIcdWhereInput;
      orderBy?: ProceduresIcdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subject_id: () => Promise<AsyncIterator<Int>>;
  transfers: <T = Promise<AsyncIterator<TransferSubscription>>>(
    args?: {
      where?: TransferWhereInput;
      orderBy?: TransferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProceduresIcdPreviousValues {
  id: UUID;
  icd9_code: String;
  seq_num: Int;
}

export interface ProceduresIcdPreviousValuesPromise
  extends Promise<ProceduresIcdPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface ProceduresIcdPreviousValuesSubscription
  extends Promise<AsyncIterator<ProceduresIcdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface MicrobiologyeventEdge {
  node: Microbiologyevent;
  cursor: String;
}

export interface MicrobiologyeventEdgePromise
  extends Promise<MicrobiologyeventEdge>,
    Fragmentable {
  node: <T = MicrobiologyeventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MicrobiologyeventEdgeSubscription
  extends Promise<AsyncIterator<MicrobiologyeventEdge>>,
    Fragmentable {
  node: <T = MicrobiologyeventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InputeventsCvSubscriptionPayload {
  mutation: MutationType;
  node: InputeventsCv;
  updatedFields: String[];
  previousValues: InputeventsCvPreviousValues;
}

export interface InputeventsCvSubscriptionPayloadPromise
  extends Promise<InputeventsCvSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InputeventsCvPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InputeventsCvPreviousValuesPromise>() => T;
}

export interface InputeventsCvSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InputeventsCvSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InputeventsCvSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InputeventsCvPreviousValuesSubscription>() => T;
}

export interface InputeventsMvEdge {
  node: InputeventsMv;
  cursor: String;
}

export interface InputeventsMvEdgePromise
  extends Promise<InputeventsMvEdge>,
    Fragmentable {
  node: <T = InputeventsMvPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InputeventsMvEdgeSubscription
  extends Promise<AsyncIterator<InputeventsMvEdge>>,
    Fragmentable {
  node: <T = InputeventsMvSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InputeventsCvPreviousValues {
  id: UUID;
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeOutput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
}

export interface InputeventsCvPreviousValuesPromise
  extends Promise<InputeventsCvPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  charttime: () => Promise<DateTimeOutput>;
  itemid: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  newbottle: () => Promise<Int>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalamountuom: () => Promise<String>;
  originalrate: () => Promise<Float>;
  originalrateuom: () => Promise<String>;
  originalroute: () => Promise<String>;
  originalsite: () => Promise<String>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
}

export interface InputeventsCvPreviousValuesSubscription
  extends Promise<AsyncIterator<InputeventsCvPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<Int>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalamountuom: () => Promise<AsyncIterator<String>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  originalrateuom: () => Promise<AsyncIterator<String>>;
  originalroute: () => Promise<AsyncIterator<String>>;
  originalsite: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateDrgcode {
  count: Int;
}

export interface AggregateDrgcodePromise
  extends Promise<AggregateDrgcode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDrgcodeSubscription
  extends Promise<AsyncIterator<AggregateDrgcode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DatetimeeventConnection {
  pageInfo: PageInfo;
  edges: DatetimeeventEdge[];
}

export interface DatetimeeventConnectionPromise
  extends Promise<DatetimeeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DatetimeeventEdge>>() => T;
  aggregate: <T = AggregateDatetimeeventPromise>() => T;
}

export interface DatetimeeventConnectionSubscription
  extends Promise<AsyncIterator<DatetimeeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DatetimeeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDatetimeeventSubscription>() => T;
}

export interface InputeventsMvSubscriptionPayload {
  mutation: MutationType;
  node: InputeventsMv;
  updatedFields: String[];
  previousValues: InputeventsMvPreviousValues;
}

export interface InputeventsMvSubscriptionPayloadPromise
  extends Promise<InputeventsMvSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InputeventsMvPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InputeventsMvPreviousValuesPromise>() => T;
}

export interface InputeventsMvSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InputeventsMvSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InputeventsMvSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InputeventsMvPreviousValuesSubscription>() => T;
}

export interface DItemConnection {
  pageInfo: PageInfo;
  edges: DItemEdge[];
}

export interface DItemConnectionPromise
  extends Promise<DItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DItemEdge>>() => T;
  aggregate: <T = AggregateDItemPromise>() => T;
}

export interface DItemConnectionSubscription
  extends Promise<AsyncIterator<DItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDItemSubscription>() => T;
}

export interface InputeventsMvPreviousValues {
  id: UUID;
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface InputeventsMvPreviousValuesPromise
  extends Promise<InputeventsMvPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  ordercomponenttypedescription: () => Promise<String>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalrate: () => Promise<Float>;
  patientweight: () => Promise<Float>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  totalamount: () => Promise<Float>;
  totalamountuom: () => Promise<String>;
}

export interface InputeventsMvPreviousValuesSubscription
  extends Promise<AsyncIterator<InputeventsMvPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  ordercomponenttypedescription: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  patientweight: () => Promise<AsyncIterator<Float>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
  totalamountuom: () => Promise<AsyncIterator<String>>;
}

export interface DIcdDiagnosisEdge {
  node: DIcdDiagnosis;
  cursor: String;
}

export interface DIcdDiagnosisEdgePromise
  extends Promise<DIcdDiagnosisEdge>,
    Fragmentable {
  node: <T = DIcdDiagnosisPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DIcdDiagnosisEdgeSubscription
  extends Promise<AsyncIterator<DIcdDiagnosisEdge>>,
    Fragmentable {
  node: <T = DIcdDiagnosisSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdmissionConnection {
  pageInfo: PageInfo;
  edges: AdmissionEdge[];
}

export interface AdmissionConnectionPromise
  extends Promise<AdmissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdmissionEdge>>() => T;
  aggregate: <T = AggregateAdmissionPromise>() => T;
}

export interface AdmissionConnectionSubscription
  extends Promise<AsyncIterator<AdmissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdmissionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdmissionSubscription>() => T;
}

export interface AggregateCptevent {
  count: Int;
}

export interface AggregateCpteventPromise
  extends Promise<AggregateCptevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCpteventSubscription
  extends Promise<AsyncIterator<AggregateCptevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LabeventSubscriptionPayload {
  mutation: MutationType;
  node: Labevent;
  updatedFields: String[];
  previousValues: LabeventPreviousValues;
}

export interface LabeventSubscriptionPayloadPromise
  extends Promise<LabeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LabeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LabeventPreviousValuesPromise>() => T;
}

export interface LabeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LabeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LabeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LabeventPreviousValuesSubscription>() => T;
}

export interface AggregateChartevents8 {
  count: Int;
}

export interface AggregateChartevents8Promise
  extends Promise<AggregateChartevents8>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents8Subscription
  extends Promise<AsyncIterator<AggregateChartevents8>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LabeventPreviousValues {
  id: UUID;
  charttime?: DateTimeOutput;
  flag?: String;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
}

export interface LabeventPreviousValuesPromise
  extends Promise<LabeventPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  flag: () => Promise<String>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface LabeventPreviousValuesSubscription
  extends Promise<AsyncIterator<LabeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  flag: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents7 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents7Promise
  extends Promise<Chartevents7>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents7Subscription
  extends Promise<AsyncIterator<Chartevents7>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface InputeventsCv {
  id: UUID;
  amount?: Float;
  amountuom?: String;
  charttime?: DateTimeOutput;
  itemid?: Int;
  linkorderid?: Int;
  newbottle?: Int;
  orderid?: Int;
  originalamount?: Float;
  originalamountuom?: String;
  originalrate?: Float;
  originalrateuom?: String;
  originalroute?: String;
  originalsite?: String;
  rate?: Float;
  rateuom?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
}

export interface InputeventsCvPromise
  extends Promise<InputeventsCv>,
    Fragmentable {
  id: () => Promise<UUID>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  charttime: () => Promise<DateTimeOutput>;
  itemid: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  newbottle: () => Promise<Int>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalamountuom: () => Promise<String>;
  originalrate: () => Promise<Float>;
  originalrateuom: () => Promise<String>;
  originalroute: () => Promise<String>;
  originalsite: () => Promise<String>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
}

export interface InputeventsCvSubscription
  extends Promise<AsyncIterator<InputeventsCv>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<Int>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalamountuom: () => Promise<AsyncIterator<String>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  originalrateuom: () => Promise<AsyncIterator<String>>;
  originalroute: () => Promise<AsyncIterator<String>>;
  originalsite: () => Promise<AsyncIterator<String>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Chartevents5Connection {
  pageInfo: PageInfo;
  edges: Chartevents5Edge[];
}

export interface Chartevents5ConnectionPromise
  extends Promise<Chartevents5Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents5Edge>>() => T;
  aggregate: <T = AggregateChartevents5Promise>() => T;
}

export interface Chartevents5ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents5Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents5EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents5Subscription>() => T;
}

export interface MicrobiologyeventSubscriptionPayload {
  mutation: MutationType;
  node: Microbiologyevent;
  updatedFields: String[];
  previousValues: MicrobiologyeventPreviousValues;
}

export interface MicrobiologyeventSubscriptionPayloadPromise
  extends Promise<MicrobiologyeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MicrobiologyeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MicrobiologyeventPreviousValuesPromise>() => T;
}

export interface MicrobiologyeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MicrobiologyeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MicrobiologyeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MicrobiologyeventPreviousValuesSubscription>() => T;
}

export interface Chartevents3Edge {
  node: Chartevents3;
  cursor: String;
}

export interface Chartevents3EdgePromise
  extends Promise<Chartevents3Edge>,
    Fragmentable {
  node: <T = Chartevents3Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents3EdgeSubscription
  extends Promise<AsyncIterator<Chartevents3Edge>>,
    Fragmentable {
  node: <T = Chartevents3Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MicrobiologyeventPreviousValues {
  id: UUID;
  ab_name?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  dilution_comparison?: String;
  dilution_text?: String;
  dilution_value?: Float;
  interpretation?: String;
  isolate_num?: Int;
  org_name?: String;
  spec_type_desc?: String;
}

export interface MicrobiologyeventPreviousValuesPromise
  extends Promise<MicrobiologyeventPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  ab_name: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  dilution_comparison: () => Promise<String>;
  dilution_text: () => Promise<String>;
  dilution_value: () => Promise<Float>;
  interpretation: () => Promise<String>;
  isolate_num: () => Promise<Int>;
  org_name: () => Promise<String>;
  spec_type_desc: () => Promise<String>;
}

export interface MicrobiologyeventPreviousValuesSubscription
  extends Promise<AsyncIterator<MicrobiologyeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  ab_name: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  dilution_comparison: () => Promise<AsyncIterator<String>>;
  dilution_text: () => Promise<AsyncIterator<String>>;
  dilution_value: () => Promise<AsyncIterator<Float>>;
  interpretation: () => Promise<AsyncIterator<String>>;
  isolate_num: () => Promise<AsyncIterator<Int>>;
  org_name: () => Promise<AsyncIterator<String>>;
  spec_type_desc: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChartevents17 {
  count: Int;
}

export interface AggregateChartevents17Promise
  extends Promise<AggregateChartevents17>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents17Subscription
  extends Promise<AsyncIterator<AggregateChartevents17>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Service {
  id: UUID;
  curr_service?: String;
  prev_service?: String;
  transfertime: DateTimeOutput;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<UUID>;
  curr_service: () => Promise<String>;
  prev_service: () => Promise<String>;
  transfertime: () => Promise<DateTimeOutput>;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  curr_service: () => Promise<AsyncIterator<String>>;
  prev_service: () => Promise<AsyncIterator<String>>;
  transfertime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Drgcode {
  id: UUID;
  description?: String;
  drg_code: String;
  drg_mortality?: Int;
  drg_severity?: Int;
  drg_type: String;
}

export interface DrgcodePromise extends Promise<Drgcode>, Fragmentable {
  id: () => Promise<UUID>;
  description: () => Promise<String>;
  drg_code: () => Promise<String>;
  drg_mortality: () => Promise<Int>;
  drg_severity: () => Promise<Int>;
  drg_type: () => Promise<String>;
}

export interface DrgcodeSubscription
  extends Promise<AsyncIterator<Drgcode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  description: () => Promise<AsyncIterator<String>>;
  drg_code: () => Promise<AsyncIterator<String>>;
  drg_mortality: () => Promise<AsyncIterator<Int>>;
  drg_severity: () => Promise<AsyncIterator<Int>>;
  drg_type: () => Promise<AsyncIterator<String>>;
}

export interface NoteeventSubscriptionPayload {
  mutation: MutationType;
  node: Noteevent;
  updatedFields: String[];
  previousValues: NoteeventPreviousValues;
}

export interface NoteeventSubscriptionPayloadPromise
  extends Promise<NoteeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NoteeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NoteeventPreviousValuesPromise>() => T;
}

export interface NoteeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NoteeventPreviousValuesSubscription>() => T;
}

export interface AggregateTransfer {
  count: Int;
}

export interface AggregateTransferPromise
  extends Promise<AggregateTransfer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransferSubscription
  extends Promise<AsyncIterator<AggregateTransfer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NoteeventPreviousValues {
  id: UUID;
  category?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeOutput;
  text?: String;
}

export interface NoteeventPreviousValuesPromise
  extends Promise<NoteeventPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  iserror: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface NoteeventPreviousValuesSubscription
  extends Promise<AsyncIterator<NoteeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  iserror: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNoteevent {
  count: Int;
}

export interface AggregateNoteeventPromise
  extends Promise<AggregateNoteevent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteeventSubscription
  extends Promise<AsyncIterator<AggregateNoteevent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InputeventsMv {
  id: UUID;
  amount?: Float;
  amountuom?: String;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  ordercomponenttypedescription?: String;
  orderid?: Int;
  originalamount?: Float;
  originalrate?: Float;
  patientweight?: Float;
  rate?: Float;
  rateuom?: String;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  totalamount?: Float;
  totalamountuom?: String;
}

export interface InputeventsMvPromise
  extends Promise<InputeventsMv>,
    Fragmentable {
  id: () => Promise<UUID>;
  amount: () => Promise<Float>;
  amountuom: () => Promise<String>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  ordercomponenttypedescription: () => Promise<String>;
  orderid: () => Promise<Int>;
  originalamount: () => Promise<Float>;
  originalrate: () => Promise<Float>;
  patientweight: () => Promise<Float>;
  rate: () => Promise<Float>;
  rateuom: () => Promise<String>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  totalamount: () => Promise<Float>;
  totalamountuom: () => Promise<String>;
}

export interface InputeventsMvSubscription
  extends Promise<AsyncIterator<InputeventsMv>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  amount: () => Promise<AsyncIterator<Float>>;
  amountuom: () => Promise<AsyncIterator<String>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  ordercomponenttypedescription: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  originalamount: () => Promise<AsyncIterator<Float>>;
  originalrate: () => Promise<AsyncIterator<Float>>;
  patientweight: () => Promise<AsyncIterator<Float>>;
  rate: () => Promise<AsyncIterator<Float>>;
  rateuom: () => Promise<AsyncIterator<String>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalamount: () => Promise<AsyncIterator<Float>>;
  totalamountuom: () => Promise<AsyncIterator<String>>;
}

export interface InputeventsCvConnection {
  pageInfo: PageInfo;
  edges: InputeventsCvEdge[];
}

export interface InputeventsCvConnectionPromise
  extends Promise<InputeventsCvConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InputeventsCvEdge>>() => T;
  aggregate: <T = AggregateInputeventsCvPromise>() => T;
}

export interface InputeventsCvConnectionSubscription
  extends Promise<AsyncIterator<InputeventsCvConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InputeventsCvEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInputeventsCvSubscription>() => T;
}

export interface OutputeventSubscriptionPayload {
  mutation: MutationType;
  node: Outputevent;
  updatedFields: String[];
  previousValues: OutputeventPreviousValues;
}

export interface OutputeventSubscriptionPayloadPromise
  extends Promise<OutputeventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OutputeventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OutputeventPreviousValuesPromise>() => T;
}

export interface OutputeventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OutputeventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OutputeventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OutputeventPreviousValuesSubscription>() => T;
}

export interface ProcedureeventsMv {
  id: UUID;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface ProcedureeventsMvPromise
  extends Promise<ProcedureeventsMv>,
    Fragmentable {
  id: () => Promise<UUID>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  location: () => Promise<String>;
  locationcategory: () => Promise<String>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  orderid: () => Promise<Int>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface ProcedureeventsMvSubscription
  extends Promise<AsyncIterator<ProcedureeventsMv>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationcategory: () => Promise<AsyncIterator<String>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface OutputeventPreviousValues {
  id: UUID;
  charttime?: DateTimeOutput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface OutputeventPreviousValuesPromise
  extends Promise<OutputeventPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  iserror: () => Promise<Int>;
  newbottle: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface OutputeventPreviousValuesSubscription
  extends Promise<AsyncIterator<OutputeventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  iserror: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDCpt {
  count: Int;
}

export interface AggregateDCptPromise
  extends Promise<AggregateDCpt>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDCptSubscription
  extends Promise<AsyncIterator<AggregateDCpt>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProceduresIcd {
  id: UUID;
  icd9_code: String;
  seq_num: Int;
}

export interface ProceduresIcdPromise
  extends Promise<ProceduresIcd>,
    Fragmentable {
  id: () => Promise<UUID>;
  icd9_code: () => Promise<String>;
  seq_num: () => Promise<Int>;
}

export interface ProceduresIcdSubscription
  extends Promise<AsyncIterator<ProceduresIcd>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  icd9_code: () => Promise<AsyncIterator<String>>;
  seq_num: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevent {
  id: UUID;
  charttime?: DateTimeOutput;
  error?: Int;
  resultstatus?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface CharteventPromise extends Promise<Chartevent>, Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface CharteventSubscription
  extends Promise<AsyncIterator<Chartevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface PatientSubscriptionPayload {
  mutation: MutationType;
  node: Patient;
  updatedFields: String[];
  previousValues: PatientPreviousValues;
}

export interface PatientSubscriptionPayloadPromise
  extends Promise<PatientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientPreviousValuesPromise>() => T;
}

export interface PatientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientPreviousValuesSubscription>() => T;
}

export interface Chartevents4Connection {
  pageInfo: PageInfo;
  edges: Chartevents4Edge[];
}

export interface Chartevents4ConnectionPromise
  extends Promise<Chartevents4Connection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Chartevents4Edge>>() => T;
  aggregate: <T = AggregateChartevents4Promise>() => T;
}

export interface Chartevents4ConnectionSubscription
  extends Promise<AsyncIterator<Chartevents4Connection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Chartevents4EdgeSubscription>>>() => T;
  aggregate: <T = AggregateChartevents4Subscription>() => T;
}

export interface PatientPreviousValues {
  id: UUID;
  dob: DateTimeOutput;
  dod?: DateTimeOutput;
  dod_hosp?: DateTimeOutput;
  dod_ssn?: DateTimeOutput;
  expire_flag: Int;
  gender: String;
  subject_id: Int;
}

export interface PatientPreviousValuesPromise
  extends Promise<PatientPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  dob: () => Promise<DateTimeOutput>;
  dod: () => Promise<DateTimeOutput>;
  dod_hosp: () => Promise<DateTimeOutput>;
  dod_ssn: () => Promise<DateTimeOutput>;
  expire_flag: () => Promise<Int>;
  gender: () => Promise<String>;
  subject_id: () => Promise<Int>;
}

export interface PatientPreviousValuesSubscription
  extends Promise<AsyncIterator<PatientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_hosp: () => Promise<AsyncIterator<DateTimeOutput>>;
  dod_ssn: () => Promise<AsyncIterator<DateTimeOutput>>;
  expire_flag: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<String>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChartevents16 {
  count: Int;
}

export interface AggregateChartevents16Promise
  extends Promise<AggregateChartevents16>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChartevents16Subscription
  extends Promise<AsyncIterator<AggregateChartevents16>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Outputevent {
  id: UUID;
  charttime?: DateTimeOutput;
  iserror?: Int;
  newbottle?: String;
  stopped?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface OutputeventPromise extends Promise<Outputevent>, Fragmentable {
  id: () => Promise<UUID>;
  charttime: () => Promise<DateTimeOutput>;
  iserror: () => Promise<Int>;
  newbottle: () => Promise<String>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface OutputeventSubscription
  extends Promise<AsyncIterator<Outputevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  iserror: () => Promise<AsyncIterator<Int>>;
  newbottle: () => Promise<AsyncIterator<String>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePatient {
  count: Int;
}

export interface AggregatePatientPromise
  extends Promise<AggregatePatient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientSubscription
  extends Promise<AsyncIterator<AggregatePatient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PrescriptionSubscriptionPayload {
  mutation: MutationType;
  node: Prescription;
  updatedFields: String[];
  previousValues: PrescriptionPreviousValues;
}

export interface PrescriptionSubscriptionPayloadPromise
  extends Promise<PrescriptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PrescriptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PrescriptionPreviousValuesPromise>() => T;
}

export interface PrescriptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PrescriptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PrescriptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PrescriptionPreviousValuesSubscription>() => T;
}

export interface DiagnosesIcdEdge {
  node: DiagnosesIcd;
  cursor: String;
}

export interface DiagnosesIcdEdgePromise
  extends Promise<DiagnosesIcdEdge>,
    Fragmentable {
  node: <T = DiagnosesIcdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiagnosesIcdEdgeSubscription
  extends Promise<AsyncIterator<DiagnosesIcdEdge>>,
    Fragmentable {
  node: <T = DiagnosesIcdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PrescriptionPreviousValues {
  id: UUID;
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type: String;
  enddate?: DateTimeOutput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeOutput;
}

export interface PrescriptionPreviousValuesPromise
  extends Promise<PrescriptionPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  dose_unit_rx: () => Promise<String>;
  dose_val_rx: () => Promise<String>;
  drug: () => Promise<String>;
  drug_name_generic: () => Promise<String>;
  drug_name_poe: () => Promise<String>;
  drug_type: () => Promise<String>;
  enddate: () => Promise<DateTimeOutput>;
  form_unit_disp: () => Promise<String>;
  form_val_disp: () => Promise<String>;
  formulary_drug_cd: () => Promise<String>;
  gsn: () => Promise<String>;
  ndc: () => Promise<String>;
  prod_strength: () => Promise<String>;
  route: () => Promise<String>;
  startdate: () => Promise<DateTimeOutput>;
}

export interface PrescriptionPreviousValuesSubscription
  extends Promise<AsyncIterator<PrescriptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  dose_unit_rx: () => Promise<AsyncIterator<String>>;
  dose_val_rx: () => Promise<AsyncIterator<String>>;
  drug: () => Promise<AsyncIterator<String>>;
  drug_name_generic: () => Promise<AsyncIterator<String>>;
  drug_name_poe: () => Promise<AsyncIterator<String>>;
  drug_type: () => Promise<AsyncIterator<String>>;
  enddate: () => Promise<AsyncIterator<DateTimeOutput>>;
  form_unit_disp: () => Promise<AsyncIterator<String>>;
  form_val_disp: () => Promise<AsyncIterator<String>>;
  formulary_drug_cd: () => Promise<AsyncIterator<String>>;
  gsn: () => Promise<AsyncIterator<String>>;
  ndc: () => Promise<AsyncIterator<String>>;
  prod_strength: () => Promise<AsyncIterator<String>>;
  route: () => Promise<AsyncIterator<String>>;
  startdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Chartevents9Edge {
  node: Chartevents9;
  cursor: String;
}

export interface Chartevents9EdgePromise
  extends Promise<Chartevents9Edge>,
    Fragmentable {
  node: <T = Chartevents9Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents9EdgeSubscription
  extends Promise<AsyncIterator<Chartevents9Edge>>,
    Fragmentable {
  node: <T = Chartevents9Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents2Edge {
  node: Chartevents2;
  cursor: String;
}

export interface Chartevents2EdgePromise
  extends Promise<Chartevents2Edge>,
    Fragmentable {
  node: <T = Chartevents2Promise>() => T;
  cursor: () => Promise<String>;
}

export interface Chartevents2EdgeSubscription
  extends Promise<AsyncIterator<Chartevents2Edge>>,
    Fragmentable {
  node: <T = Chartevents2Subscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Prescription {
  id: UUID;
  dose_unit_rx?: String;
  dose_val_rx?: String;
  drug: String;
  drug_name_generic?: String;
  drug_name_poe?: String;
  drug_type: String;
  enddate?: DateTimeOutput;
  form_unit_disp?: String;
  form_val_disp?: String;
  formulary_drug_cd?: String;
  gsn?: String;
  ndc?: String;
  prod_strength?: String;
  route?: String;
  startdate?: DateTimeOutput;
}

export interface PrescriptionPromise
  extends Promise<Prescription>,
    Fragmentable {
  id: () => Promise<UUID>;
  dose_unit_rx: () => Promise<String>;
  dose_val_rx: () => Promise<String>;
  drug: () => Promise<String>;
  drug_name_generic: () => Promise<String>;
  drug_name_poe: () => Promise<String>;
  drug_type: () => Promise<String>;
  enddate: () => Promise<DateTimeOutput>;
  form_unit_disp: () => Promise<String>;
  form_val_disp: () => Promise<String>;
  formulary_drug_cd: () => Promise<String>;
  gsn: () => Promise<String>;
  ndc: () => Promise<String>;
  prod_strength: () => Promise<String>;
  route: () => Promise<String>;
  startdate: () => Promise<DateTimeOutput>;
}

export interface PrescriptionSubscription
  extends Promise<AsyncIterator<Prescription>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  dose_unit_rx: () => Promise<AsyncIterator<String>>;
  dose_val_rx: () => Promise<AsyncIterator<String>>;
  drug: () => Promise<AsyncIterator<String>>;
  drug_name_generic: () => Promise<AsyncIterator<String>>;
  drug_name_poe: () => Promise<AsyncIterator<String>>;
  drug_type: () => Promise<AsyncIterator<String>>;
  enddate: () => Promise<AsyncIterator<DateTimeOutput>>;
  form_unit_disp: () => Promise<AsyncIterator<String>>;
  form_val_disp: () => Promise<AsyncIterator<String>>;
  formulary_drug_cd: () => Promise<AsyncIterator<String>>;
  gsn: () => Promise<AsyncIterator<String>>;
  ndc: () => Promise<AsyncIterator<String>>;
  prod_strength: () => Promise<AsyncIterator<String>>;
  route: () => Promise<AsyncIterator<String>>;
  startdate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProcedureeventsMvPreviousValues {
  id: UUID;
  cancelreason?: Int;
  comments_canceledby?: String;
  comments_date?: DateTimeOutput;
  comments_editedby?: String;
  continueinnextdept?: Int;
  endtime?: DateTimeOutput;
  isopenbag?: Int;
  linkorderid?: Int;
  location?: String;
  locationcategory?: String;
  ordercategorydescription?: String;
  ordercategoryname?: String;
  orderid?: Int;
  secondaryordercategoryname?: String;
  starttime?: DateTimeOutput;
  statusdescription?: String;
  storetime?: DateTimeOutput;
  value?: Float;
  valueuom?: String;
}

export interface ProcedureeventsMvPreviousValuesPromise
  extends Promise<ProcedureeventsMvPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  cancelreason: () => Promise<Int>;
  comments_canceledby: () => Promise<String>;
  comments_date: () => Promise<DateTimeOutput>;
  comments_editedby: () => Promise<String>;
  continueinnextdept: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  isopenbag: () => Promise<Int>;
  linkorderid: () => Promise<Int>;
  location: () => Promise<String>;
  locationcategory: () => Promise<String>;
  ordercategorydescription: () => Promise<String>;
  ordercategoryname: () => Promise<String>;
  orderid: () => Promise<Int>;
  secondaryordercategoryname: () => Promise<String>;
  starttime: () => Promise<DateTimeOutput>;
  statusdescription: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  valueuom: () => Promise<String>;
}

export interface ProcedureeventsMvPreviousValuesSubscription
  extends Promise<AsyncIterator<ProcedureeventsMvPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  cancelreason: () => Promise<AsyncIterator<Int>>;
  comments_canceledby: () => Promise<AsyncIterator<String>>;
  comments_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments_editedby: () => Promise<AsyncIterator<String>>;
  continueinnextdept: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isopenbag: () => Promise<AsyncIterator<Int>>;
  linkorderid: () => Promise<AsyncIterator<Int>>;
  location: () => Promise<AsyncIterator<String>>;
  locationcategory: () => Promise<AsyncIterator<String>>;
  ordercategorydescription: () => Promise<AsyncIterator<String>>;
  ordercategoryname: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  secondaryordercategoryname: () => Promise<AsyncIterator<String>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  statusdescription: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
}

export interface ProcedureeventsMvSubscriptionPayload {
  mutation: MutationType;
  node: ProcedureeventsMv;
  updatedFields: String[];
  previousValues: ProcedureeventsMvPreviousValues;
}

export interface ProcedureeventsMvSubscriptionPayloadPromise
  extends Promise<ProcedureeventsMvSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProcedureeventsMvPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProcedureeventsMvPreviousValuesPromise>() => T;
}

export interface ProcedureeventsMvSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProcedureeventsMvSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProcedureeventsMvSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProcedureeventsMvPreviousValuesSubscription>() => T;
}

export interface Noteevent {
  id: UUID;
  category?: String;
  chartdate?: DateTimeOutput;
  charttime?: DateTimeOutput;
  description?: String;
  iserror?: String;
  storetime?: DateTimeOutput;
  text?: String;
}

export interface NoteeventPromise extends Promise<Noteevent>, Fragmentable {
  id: () => Promise<UUID>;
  category: () => Promise<String>;
  chartdate: () => Promise<DateTimeOutput>;
  charttime: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  iserror: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface NoteeventSubscription
  extends Promise<AsyncIterator<Noteevent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  category: () => Promise<AsyncIterator<String>>;
  chartdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  iserror: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface Chartevents15 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents15Promise
  extends Promise<Chartevents15>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents15Subscription
  extends Promise<AsyncIterator<Chartevents15>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface Chartevents6 {
  cgid?: Int;
  charttime?: DateTimeOutput;
  error?: Int;
  hadm_id?: Int;
  icustay_id?: Int;
  itemid?: Int;
  resultstatus?: String;
  row_id: Int;
  stopped?: String;
  storetime?: DateTimeOutput;
  subject_id: Int;
  value?: String;
  valuenum?: Float;
  valueuom?: String;
  warning?: Int;
}

export interface Chartevents6Promise
  extends Promise<Chartevents6>,
    Fragmentable {
  cgid: () => Promise<Int>;
  charttime: () => Promise<DateTimeOutput>;
  error: () => Promise<Int>;
  hadm_id: () => Promise<Int>;
  icustay_id: () => Promise<Int>;
  itemid: () => Promise<Int>;
  resultstatus: () => Promise<String>;
  row_id: () => Promise<Int>;
  stopped: () => Promise<String>;
  storetime: () => Promise<DateTimeOutput>;
  subject_id: () => Promise<Int>;
  value: () => Promise<String>;
  valuenum: () => Promise<Float>;
  valueuom: () => Promise<String>;
  warning: () => Promise<Int>;
}

export interface Chartevents6Subscription
  extends Promise<AsyncIterator<Chartevents6>>,
    Fragmentable {
  cgid: () => Promise<AsyncIterator<Int>>;
  charttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  error: () => Promise<AsyncIterator<Int>>;
  hadm_id: () => Promise<AsyncIterator<Int>>;
  icustay_id: () => Promise<AsyncIterator<Int>>;
  itemid: () => Promise<AsyncIterator<Int>>;
  resultstatus: () => Promise<AsyncIterator<String>>;
  row_id: () => Promise<AsyncIterator<Int>>;
  stopped: () => Promise<AsyncIterator<String>>;
  storetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  subject_id: () => Promise<AsyncIterator<Int>>;
  value: () => Promise<AsyncIterator<String>>;
  valuenum: () => Promise<AsyncIterator<Float>>;
  valueuom: () => Promise<AsyncIterator<String>>;
  warning: () => Promise<AsyncIterator<Int>>;
}

export interface DIcdProcedureEdge {
  node: DIcdProcedure;
  cursor: String;
}

export interface DIcdProcedureEdgePromise
  extends Promise<DIcdProcedureEdge>,
    Fragmentable {
  node: <T = DIcdProcedurePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DIcdProcedureEdgeSubscription
  extends Promise<AsyncIterator<DIcdProcedureEdge>>,
    Fragmentable {
  node: <T = DIcdProcedureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LabeventConnection {
  pageInfo: PageInfo;
  edges: LabeventEdge[];
}

export interface LabeventConnectionPromise
  extends Promise<LabeventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LabeventEdge>>() => T;
  aggregate: <T = AggregateLabeventPromise>() => T;
}

export interface LabeventConnectionSubscription
  extends Promise<AsyncIterator<LabeventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LabeventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLabeventSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type UUID = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Admission",
    embedded: false
  },
  {
    name: "Callout",
    embedded: false
  },
  {
    name: "Caregiver",
    embedded: false
  },
  {
    name: "Chartevent",
    embedded: false
  },
  {
    name: "Chartevents1",
    embedded: false
  },
  {
    name: "Chartevents10",
    embedded: false
  },
  {
    name: "Chartevents11",
    embedded: false
  },
  {
    name: "Chartevents12",
    embedded: false
  },
  {
    name: "Chartevents13",
    embedded: false
  },
  {
    name: "Chartevents14",
    embedded: false
  },
  {
    name: "Chartevents15",
    embedded: false
  },
  {
    name: "Chartevents16",
    embedded: false
  },
  {
    name: "Chartevents17",
    embedded: false
  },
  {
    name: "Chartevents2",
    embedded: false
  },
  {
    name: "Chartevents3",
    embedded: false
  },
  {
    name: "Chartevents4",
    embedded: false
  },
  {
    name: "Chartevents5",
    embedded: false
  },
  {
    name: "Chartevents6",
    embedded: false
  },
  {
    name: "Chartevents7",
    embedded: false
  },
  {
    name: "Chartevents8",
    embedded: false
  },
  {
    name: "Chartevents9",
    embedded: false
  },
  {
    name: "Cptevent",
    embedded: false
  },
  {
    name: "DCpt",
    embedded: false
  },
  {
    name: "DIcdDiagnosis",
    embedded: false
  },
  {
    name: "DIcdProcedure",
    embedded: false
  },
  {
    name: "DItem",
    embedded: false
  },
  {
    name: "DLabitem",
    embedded: false
  },
  {
    name: "Datetimeevent",
    embedded: false
  },
  {
    name: "DiagnosesIcd",
    embedded: false
  },
  {
    name: "Drgcode",
    embedded: false
  },
  {
    name: "Icustay",
    embedded: false
  },
  {
    name: "InputeventsCv",
    embedded: false
  },
  {
    name: "InputeventsMv",
    embedded: false
  },
  {
    name: "Labevent",
    embedded: false
  },
  {
    name: "Microbiologyevent",
    embedded: false
  },
  {
    name: "Noteevent",
    embedded: false
  },
  {
    name: "Outputevent",
    embedded: false
  },
  {
    name: "Patient",
    embedded: false
  },
  {
    name: "Prescription",
    embedded: false
  },
  {
    name: "ProcedureeventsMv",
    embedded: false
  },
  {
    name: "ProceduresIcd",
    embedded: false
  },
  {
    name: "Service",
    embedded: false
  },
  {
    name: "Transfer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
